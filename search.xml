<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>macOS中Python多版本管理与虚拟环境</title>
      <link href="/2019/03/10/pyenv-and-virtualenv/"/>
      <url>/2019/03/10/pyenv-and-virtualenv/</url>
      
        <content type="html"><![CDATA[<h2 id="多版本管理的优点"><a href="#多版本管理的优点" class="headerlink" title="多版本管理的优点"></a>多版本管理的优点</h2><ul><li>当我们频繁开发和调试python程序时，会导致系统目录特别凌乱。</li><li>不同开发用途可能会用到不同版本的python，不同的应用程序也可能需要不同版本的第三方库，这样在管理时会比较麻烦<br>因此我们引入<strong>pyenv</strong>版本管理和<strong>virtualenv</strong>虚拟环境。</li></ul><h2 id="安装pyenv版本管理"><a href="#安装pyenv版本管理" class="headerlink" title="安装pyenv版本管理"></a>安装pyenv版本管理</h2><p>利用Homebrew进行安装</p><pre class=" language-bash"><code class="language-bash">$ brew <span class="token function">install</span> pyenv</code></pre><h3 id="查看可安装的版本列表"><a href="#查看可安装的版本列表" class="headerlink" title="查看可安装的版本列表"></a>查看可安装的版本列表</h3><pre class=" language-bash"><code class="language-bash">$ pyenv <span class="token function">install</span> --list</code></pre><p>我们可以看到有不同版本的python，例如python3.5.x和python3.6.x</p><h3 id="安装python-3-5-2"><a href="#安装python-3-5-2" class="headerlink" title="安装python 3.5.2"></a>安装python 3.5.2</h3><p>这里以安装python 3.5.2为例</p><pre class=" language-bash"><code class="language-bash">$ pyenv <span class="token function">install</span> 3.5.2</code></pre><p>安装完毕后，我们可以查看安装情况</p><pre class=" language-bash"><code class="language-bash">$ pyenv versions</code></pre><p>显示结果如下</p><pre><code>* system (set by /home/tony/.pyenv/version)  3.5.2</code></pre><p>system代表当前系统安装的python版本，3.5.2代表pyenv安装的python版本。</p><h3 id="切换python版本"><a href="#切换python版本" class="headerlink" title="切换python版本"></a>切换python版本</h3><pre class=" language-bash"><code class="language-bash">$ pyenv global 3.5.2</code></pre><p>查看切换结果</p><pre class=" language-bash"><code class="language-bash">  system * 3.5.2 <span class="token punctuation">(</span>set by /home/tony/.pyenv/version<span class="token punctuation">)</span></code></pre><p>切换回系统默认版本</p><pre class=" language-bash"><code class="language-bash">$ pyenv global system</code></pre><p>卸载某一版本python</p><pre class=" language-bash"><code class="language-bash">$ pyenv uninstall x.x.x</code></pre><h2 id="安装virtualenv虚拟环境"><a href="#安装virtualenv虚拟环境" class="headerlink" title="安装virtualenv虚拟环境"></a>安装virtualenv虚拟环境</h2><p>利用Homebrew安装</p><pre class=" language-bash"><code class="language-bash">$ brew <span class="token function">install</span> pyenv-virtualenv</code></pre><h3 id="安装制定python版本的虚拟环境"><a href="#安装制定python版本的虚拟环境" class="headerlink" title="安装制定python版本的虚拟环境"></a>安装制定python版本的虚拟环境</h3><pre class=" language-bash"><code class="language-bash">$ pyenv virtualenv 3.5.2 <span class="token function">env</span></code></pre><p>该命令会创建名为<code>env</code>的虚拟环境，这个环境的真实目录位于：<code>~/.pyenv/versions/</code><br>我们依然可以通过<code>pyenv versions</code>查看当前的虚拟环境安装情况</p><pre class=" language-bash"><code class="language-bash">* system <span class="token punctuation">(</span>set by /home/tony/.pyenv/version<span class="token punctuation">)</span>  3.5.2  <span class="token function">env</span></code></pre><h3 id="切换到虚拟环境"><a href="#切换到虚拟环境" class="headerlink" title="切换到虚拟环境"></a>切换到虚拟环境</h3><p>在切换到虚拟环境之前，我们还需要执行以下指令</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">eval</span>  “ $（ pyenv init  - ） ”$ <span class="token function">eval</span>  “ $（ pyenv virtualenv-init  - ） ”</code></pre><p>通过一下命令切换到虚拟环境</p><pre class=" language-bash"><code class="language-bash">$ pyenv activate <span class="token function">env</span></code></pre><p>我们可以通过<code>python</code>命令查看版本号<br>如果要退出虚拟环境，执行以下指令：</p><pre class=" language-bash"><code class="language-bash">pyenv deactivate</code></pre><p>如果需要删除虚拟环境，可以执行以下指令：</p><pre class=" language-bash"><code class="language-bash">$ pyenv uninstall <span class="token function">env</span></code></pre><p>在实际应用过程中，多加利用这两个工具，可以让你的电脑整洁如新！</p><hr><h4 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h4><p>在最新系统Mojave 10.14中，执行<code>pyenv install 3.x.x</code>可能会出现以下错误：</p><pre class=" language-bash"><code class="language-bash">$ zipimport.ZipImportError: can't decompress data<span class="token punctuation">;</span> zlib not available</code></pre><p>这个问题可能是macOS更新后，xcode没有跟进导致的，可以执行以下代码解决</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">sudo</span> installer -pkg /Library/Developer/CommandLineTools/Packages/macOS_SDK_headers_for_macOS_10.14.pkg -target /$ pyenv <span class="token function">install</span> 3.6.6</code></pre><p><strong>参考博客：</strong>[<a href="https://lisupy.github.io/2018/10/01/2018-10-01-Mojave使用pyenv安装python/" target="_blank" rel="noopener">Pluviophile’s Blog<br>-Mojave使用pyenv安装python-zlib错误</a></p>]]></content>
      
      
      <categories>
          
          <category> 分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> macOS </tag>
            
            <tag> Python </tag>
            
            <tag> pyenv </tag>
            
            <tag> virtualenv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>华为云代码托管服务及团队协作教程</title>
      <link href="/2019/03/05/huaweicloud-git/"/>
      <url>/2019/03/05/huaweicloud-git/</url>
      
        <content type="html"><![CDATA[<h2 id="连接华为云仓库"><a href="#连接华为云仓库" class="headerlink" title="连接华为云仓库"></a>连接华为云仓库</h2><h3 id="注册账号"><a href="#注册账号" class="headerlink" title="注册账号"></a>注册账号</h3><p>在华为云<a href="https://www.huaweicloud.com/?locale=zh-cn" target="_blank" rel="noopener">官网</a>注册账号</p><h3 id="新建仓库"><a href="#新建仓库" class="headerlink" title="新建仓库"></a>新建仓库</h3><ol><li>进入项目管理<br><img src="https://upload-images.jianshu.io/upload_images/14484228-ff10131724ce0407.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="进入项目管理"></li><li>通过左侧菜单栏进入代码托管<br><img src="https://upload-images.jianshu.io/upload_images/14484228-bb944beaff06d6df.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="代码托管"></li><li>根据自己的需求新建仓库<br><img src="https://upload-images.jianshu.io/upload_images/14484228-13625af197158062.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="新建仓库"></li></ol><h3 id="连接华为仓库"><a href="#连接华为仓库" class="headerlink" title="连接华为仓库"></a>连接华为仓库</h3><ol><li>设置SSH密钥<br><img src="https://upload-images.jianshu.io/upload_images/14484228-6d86fc7c297486f9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="设置我的SSH密钥"><br><img src="https://upload-images.jianshu.io/upload_images/14484228-9cefaa877952082b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="添加SSH密钥"></li><li>从本地获取SSH公钥（默认已安装git）<br>如果之前设置过github或gitee，那么系统是存在密钥的，密钥路径为<code>~/.ssh/id_rsa.pub</code>。<br>如果没有系统不存在密钥，那么在根目录执行以下命令创建密钥:<pre class=" language-bash"><code class="language-bash">ssh-keygen -t rsa -C <span class="token string">"您的email"</span></code></pre><em>在回车中会提示你输入一个密码，这个密码会在你提交项目时使用，如果为空的话提交项目时则不用输入，建议采用不输入密码方式。</em><br>可以采用两种方法将密钥复制到密钥栏：<pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#1查看密钥并手动复制</span><span class="token function">cat</span> ~/.ssh/id_rsa.pub<span class="token comment" spellcheck="true">#2使用命令复制密钥到剪切板</span><span class="token comment" spellcheck="true">#Windows</span>clip <span class="token operator">&lt;</span> ~/.ssh/id_rsa.pub<span class="token comment" spellcheck="true">#Mac</span>pbcopy <span class="token operator">&lt;</span> ~/.ssh/id_rsa.pub<span class="token comment" spellcheck="true">#Linux</span>xclip -sel clip <span class="token operator">&lt;</span> ~/.ssh/id_rsa.pub</code></pre>接下来，我们尝试将新建的仓库克隆到本地</li></ol><h3 id="克隆仓库及常用git指令"><a href="#克隆仓库及常用git指令" class="headerlink" title="克隆仓库及常用git指令"></a>克隆仓库及常用git指令</h3><ol><li>获取仓库地址<br><img src="https://upload-images.jianshu.io/upload_images/14484228-2a2f547bb1ef3853.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="仓库地址"></li><li>在终端执行克隆指令<pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> clone 刚复制的地址</code></pre>就可以将远程仓库克隆到本地了</li><li>常用git指令：<pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#添加文件</span><span class="token function">git</span> add filename<span class="token comment" spellcheck="true">#添加所有文件</span><span class="token function">git</span> add <span class="token keyword">.</span><span class="token comment" spellcheck="true">#确认提交</span><span class="token function">git</span> commit -m <span class="token string">'修改原因'</span><span class="token comment" spellcheck="true">#push到远程仓库,分支可选</span><span class="token function">git</span> push origin master</code></pre>想学习更多，请戳廖雪峰大神<a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="noopener">Git教程</a></li></ol><h2 id="团队协作"><a href="#团队协作" class="headerlink" title="团队协作"></a>团队协作</h2><p>这里介绍一下如何团队协作</p><h3 id="添加成员"><a href="#添加成员" class="headerlink" title="添加成员"></a>添加成员</h3><ol><li>进入项目<strong>设置</strong>界面<br><img src="https://upload-images.jianshu.io/upload_images/14484228-3f9c2be21ab371cb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="设置"></li><li>在<strong>成员管理</strong>中添加成员，通过链接邀请<br><img src="https://upload-images.jianshu.io/upload_images/14484228-4286aee7a16d917d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="邀请成员"></li><li>在<strong>待审核</strong>界面通过审核，即可在项目成员中看到所邀请的用户，可以根据角色权限说明来自行决定项目角色。<br><em>PS：个人仓库可以最多五个人协同开发</em></li><li>之后进入对应仓库的<strong>成员</strong>页面，添加成员即可<br><img src="https://upload-images.jianshu.io/upload_images/14484228-4df135ee0783de63.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="添加成员到仓库"><br><em>PS：被邀请成员也要设置好SSH密钥，才能克隆远程仓库</em><br>基本内容就这些了，以后想到再补充！</li></ol>]]></content>
      
      
      <categories>
          
          <category> 分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> 华为云 </tag>
            
            <tag> 代码托管 </tag>
            
            <tag> 团队协作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QT5串口通信（Hex格式传输）</title>
      <link href="/2019/02/28/qt-serial-communication/"/>
      <url>/2019/02/28/qt-serial-communication/</url>
      
        <content type="html"><![CDATA[<h2 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h2><ol><li>博客园-菜头大大：<a href="https://www.cnblogs.com/wurenzhong/p/8186437.html" target="_blank" rel="noopener">QT串口通信</a></li><li>CSDN-宗师之路：<a href="https://blog.csdn.net/qq_27312943/article/details/52900527" target="_blank" rel="noopener">QT实现串口通信(附源码下载)</a></li><li>CSDN-xz-c：<a href="https://blog.csdn.net/u014602230/article/details/52752683" target="_blank" rel="noopener">C++将10进制字符串转为16进制字符串</a></li></ol><h2 id="本文改进"><a href="#本文改进" class="headerlink" title="本文改进"></a>本文改进</h2><ol><li>在前辈们的代码基础上进行改进，使操作更符合逻辑</li><li>优化代码结构，提高了代码的可移植性</li></ol><h2 id="QT实现串口通信"><a href="#QT实现串口通信" class="headerlink" title="QT实现串口通信"></a>QT实现串口通信</h2><ol><li>在工程文件（.pro）中添加串口通信相关运行库：<code>QT       += serialport</code></li><li>在头文件中添加<pre class=" language-cpp"><code class="language-cpp"> <span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QtSerialPort/QSerialPort></span></span> <span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QtSerialPort/QSerialPortInfo></span></span></code></pre></li><li>在头文件中定义全局的串口对象：<code>QSerialPort *serial;</code></li></ol><h2 id="串口通信步骤"><a href="#串口通信步骤" class="headerlink" title="串口通信步骤"></a>串口通信步骤</h2><ol><li>设置串口名称<ul><li>寻找可用串口<pre class=" language-cpp"><code class="language-cpp">  <span class="token keyword">void</span> control<span class="token operator">::</span><span class="token function">scanPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>ui<span class="token operator">-</span><span class="token operator">></span>cb_port<span class="token operator">-</span><span class="token operator">></span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> isHavePort <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token function">foreach</span><span class="token punctuation">(</span><span class="token keyword">const</span> QSerialPortInfo <span class="token operator">&amp;</span>info<span class="token punctuation">,</span> QSerialPortInfo<span class="token operator">::</span><span class="token function">availablePorts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>          QSerialPort serial<span class="token punctuation">;</span>          serial<span class="token punctuation">.</span><span class="token function">setPort</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//判断端口能否打开</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>serial<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>QIODevice<span class="token operator">::</span>ReadWrite<span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token punctuation">{</span>              <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>ui<span class="token operator">-</span><span class="token operator">></span>cb_port<span class="token operator">-</span><span class="token operator">></span><span class="token function">addItem</span><span class="token punctuation">(</span>serial<span class="token punctuation">.</span><span class="token function">portName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              isHavePort <span class="token operator">++</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>isHavePort <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              QMessageBox<span class="token operator">::</span><span class="token function">information</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token string">"警告"</span><span class="token punctuation">,</span> <span class="token string">"没有可用串口"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre></li><li>设置串口名<pre class=" language-cpp"><code class="language-cpp">  serial <span class="token operator">=</span> <span class="token keyword">new</span> QSerialPort<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//设置串口名</span>  serial<span class="token operator">-</span><span class="token operator">></span><span class="token function">setPortName</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>ui<span class="token operator">-</span><span class="token operator">></span>cb_port<span class="token operator">-</span><span class="token operator">></span><span class="token function">currentText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul></li><li>打开串口<pre class=" language-cpp"><code class="language-cpp"> serial<span class="token operator">-</span><span class="token operator">></span><span class="token function">open</span><span class="token punctuation">(</span>QIODevice<span class="token operator">::</span>ReadWrite<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li>设置波特率<pre class=" language-cpp"><code class="language-cpp"> serial<span class="token operator">-</span><span class="token operator">></span><span class="token function">setBaudRate</span><span class="token punctuation">(</span>QSerialPort<span class="token operator">::</span>Baud115200<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置波特率为115200</span></code></pre></li><li>设置数据位<pre class=" language-cpp"><code class="language-cpp"> serial<span class="token operator">-</span><span class="token operator">></span><span class="token function">setDataBits</span><span class="token punctuation">(</span>QSerialPort<span class="token operator">::</span>Data8<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置数据位8</span></code></pre></li><li>设置校验位<pre class=" language-cpp"><code class="language-cpp"> serial<span class="token operator">-</span><span class="token operator">></span><span class="token function">setParity</span><span class="token punctuation">(</span>QSerialPort<span class="token operator">::</span>NoParity<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//无校验位</span></code></pre></li><li>设置停止位<pre class=" language-cpp"><code class="language-cpp"> serial<span class="token operator">-</span><span class="token operator">></span><span class="token function">setStopBits</span><span class="token punctuation">(</span>QSerialPort<span class="token operator">::</span>OneStop<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//停止位设置为1</span></code></pre></li><li>设置流控制<pre class=" language-cpp"><code class="language-cpp"> serial<span class="token operator">-</span><span class="token operator">></span><span class="token function">setFlowControl</span><span class="token punctuation">(</span>QSerialPort<span class="token operator">::</span>NoFlowControl<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置为无流控制</span></code></pre>通过上述操作，串口的基本设置就设置好了，接下来需要实现数据的接收和发送：</li><li>在打开串口按钮中执行的操作中添加槽函数，当下位机中有数据发送过来时就会相应这个槽函数<pre class=" language-cpp"><code class="language-cpp"> <span class="token function">connect</span><span class="token punctuation">(</span>serial<span class="token punctuation">,</span> <span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">readyRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">readData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li>从上位机发送数据到下位机，发送内容位ASII码值或者为Hex格式；根据自身需求，我将数据进行了转换和格式化，此处为Hex格式。<pre class=" language-cpp"><code class="language-cpp"> serial<span class="token operator">-</span><span class="token operator">></span><span class="token function">write</span><span class="token punctuation">(</span><span class="token function">QString2Hex</span><span class="token punctuation">(</span><span class="token function">formatInput</span><span class="token punctuation">(</span>hexStr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ol><h2 id="进制转换及格式化"><a href="#进制转换及格式化" class="headerlink" title="进制转换及格式化"></a>进制转换及格式化</h2><p>由于下位机需求，需要两帧将数据发送过去，经过多番考虑，最终决定将十进制转换为16进制，然后以Hex进行发送</p><ol><li>十进制转换为16进制字符串<pre class=" language-cpp"><code class="language-cpp"> <span class="token comment" spellcheck="true">//将十进制int转换为十六进制字符串</span> QString control<span class="token operator">::</span><span class="token function">decInt2HexStr</span><span class="token punctuation">(</span><span class="token keyword">int</span> dec<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">//保证数据在两帧范围内</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>dec <span class="token operator">></span> <span class="token number">65535</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>         QMessageBox<span class="token operator">::</span><span class="token function">information</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token string">"警告"</span><span class="token punctuation">,</span> <span class="token string">"输入超出规定范围（input &lt; 65535）"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> <span class="token string">"0"</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     QString hexStr<span class="token punctuation">;</span>     <span class="token keyword">int</span> temp <span class="token operator">=</span> dec <span class="token operator">/</span> <span class="token number">16</span><span class="token punctuation">;</span>     <span class="token keyword">int</span> left <span class="token operator">=</span> dec <span class="token operator">%</span> <span class="token number">16</span><span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>temp <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>         hexStr <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">decInt2HexStr</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>left <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span>         hexStr <span class="token operator">+</span><span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">else</span>         hexStr <span class="token operator">+</span><span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'A'</span> <span class="token operator">+</span> left <span class="token operator">-</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> hexStr<span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre></li><li><p>将字符串转换为Hex格式</p><pre class=" language-cpp"><code class="language-cpp"> <span class="token comment" spellcheck="true">//字符串转Hex(QByteArray)类型</span> QByteArray control<span class="token operator">::</span><span class="token function">QString2Hex</span><span class="token punctuation">(</span>QString hexStr<span class="token punctuation">)</span> <span class="token punctuation">{</span>     QByteArray senddata<span class="token punctuation">;</span>     <span class="token keyword">int</span> hexdata<span class="token punctuation">,</span> lowhexdata<span class="token punctuation">;</span>     <span class="token keyword">int</span> hexdatalen <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>     <span class="token keyword">int</span> len <span class="token operator">=</span> hexStr<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     senddata<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>len<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">char</span> lstr<span class="token punctuation">,</span> hstr<span class="token punctuation">;</span>     <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> <span class="token punctuation">)</span>     <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">//将第一个不为' '的字符赋给hstr;</span>         hstr <span class="token operator">=</span> hexStr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toLatin1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">if</span><span class="token punctuation">(</span>hstr <span class="token operator">==</span> <span class="token string">' '</span><span class="token punctuation">)</span>         <span class="token punctuation">{</span>             i<span class="token operator">++</span><span class="token punctuation">;</span>             <span class="token keyword">continue</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         i<span class="token operator">++</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//当i >= len时，跳出循环</span>         <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">>=</span> len<span class="token punctuation">)</span>             <span class="token keyword">break</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//当i &lt; len时，将下一个字符赋值给lstr;</span>         lstr <span class="token operator">=</span> hexStr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toLatin1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//将hstr和lstr转换为0-15的对应数值</span>         hexdata <span class="token operator">=</span> <span class="token function">ConvertHexChar</span><span class="token punctuation">(</span>hstr<span class="token punctuation">)</span><span class="token punctuation">;</span>         lowhexdata <span class="token operator">=</span> <span class="token function">ConvertHexChar</span><span class="token punctuation">(</span>lstr<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//</span>         <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>hexdata <span class="token operator">==</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>lowhexdata <span class="token operator">==</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span>             <span class="token keyword">break</span><span class="token punctuation">;</span>         <span class="token keyword">else</span>             hexdata <span class="token operator">=</span> hexdata <span class="token operator">*</span> <span class="token number">16</span> <span class="token operator">+</span> lowhexdata<span class="token punctuation">;</span>         i<span class="token operator">++</span><span class="token punctuation">;</span>         senddata<span class="token punctuation">[</span>hexdatalen<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>hexdata<span class="token punctuation">;</span>         hexdatalen<span class="token operator">++</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     senddata<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>hexdatalen<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> senddata<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//将单个字符串转换为hex</span> <span class="token comment" spellcheck="true">//0-F -> 0-15</span> <span class="token keyword">char</span> control<span class="token operator">::</span><span class="token function">ConvertHexChar</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>c <span class="token operator">>=</span> <span class="token string">'0'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>c <span class="token operator">&lt;=</span> <span class="token string">'9'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>         <span class="token keyword">return</span> c <span class="token operator">-</span> <span class="token number">0x30</span><span class="token punctuation">;</span>     <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>c <span class="token operator">>=</span> <span class="token string">'A'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>c <span class="token operator">&lt;=</span> <span class="token string">'F'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>         <span class="token keyword">return</span> c <span class="token operator">-</span> <span class="token string">'A'</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//'A' = 65;</span>     <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>c <span class="token operator">>=</span> <span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>c <span class="token operator">&lt;=</span> <span class="token string">'f'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>         <span class="token keyword">return</span> c <span class="token operator">-</span> <span class="token string">'a'</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span>     <span class="token keyword">else</span>         <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre></li><li>输出形式格式化<pre class=" language-cpp"><code class="language-cpp"> <span class="token comment" spellcheck="true">//将输入格式化，补满四位：0XFFFF</span> QString control<span class="token operator">::</span><span class="token function">formatInput</span><span class="token punctuation">(</span>QString hexStr<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">int</span> strlen <span class="token operator">=</span> hexStr<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">switch</span><span class="token punctuation">(</span>strlen<span class="token punctuation">)</span>     <span class="token punctuation">{</span>         <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>             hexStr <span class="token operator">=</span> <span class="token string">"0000"</span><span class="token punctuation">;</span>             <span class="token keyword">break</span><span class="token punctuation">;</span>         <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>             hexStr <span class="token operator">=</span> <span class="token string">"000"</span> <span class="token operator">+</span> hexStr<span class="token punctuation">;</span>             <span class="token keyword">break</span><span class="token punctuation">;</span>         <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>             hexStr <span class="token operator">=</span> <span class="token string">"00"</span> <span class="token operator">+</span> hexStr<span class="token punctuation">;</span>             <span class="token keyword">break</span><span class="token punctuation">;</span>         <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>             hexStr <span class="token operator">=</span> <span class="token string">"0"</span> <span class="token operator">+</span> hexStr<span class="token punctuation">;</span>             <span class="token keyword">break</span><span class="token punctuation">;</span>         <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>             hexStr <span class="token operator">=</span> hexStr<span class="token punctuation">;</span>             <span class="token keyword">break</span><span class="token punctuation">;</span>         <span class="token keyword">default</span><span class="token operator">:</span>             <span class="token keyword">break</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">return</span> hexStr<span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre></li></ol><h2 id="UI展示"><a href="#UI展示" class="headerlink" title="UI展示"></a>UI展示</h2><p><img src="https://upload-images.jianshu.io/upload_images/14484228-06891a8bb97b3885.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="界面展示"></p><h2 id="源码下载："><a href="#源码下载：" class="headerlink" title="源码下载："></a>源码下载：</h2><p><a href="https://github.com/2572880761/FPGA_Controller" target="_blank" rel="noopener">Github</a></p>]]></content>
      
      
      <categories>
          
          <category> 分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> QT5 </tag>
            
            <tag> 串口通信 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题：7.Reverse Integer</title>
      <link href="/2019/02/27/7-reverse-integer/"/>
      <url>/2019/02/27/7-reverse-integer/</url>
      
        <content type="html"><![CDATA[<h4 id="7-Reverse-Integer"><a href="#7-Reverse-Integer" class="headerlink" title="7. Reverse Integer"></a><a href="https://leetcode-cn.com/problems/reverse-integer/" target="_blank" rel="noopener">7. Reverse Integer</a></h4><p>Given a 32-bit signed integer, reverse digits of an integer.<br><strong>Example 1:</strong></p><blockquote><p><strong>Input:</strong> <code>123</code></p><p><strong>Output:</strong> <code>321</code></p></blockquote><p><strong>Example 2:</strong></p><blockquote><p><strong>Input:</strong> <code>-123</code></p><p><strong>Output:</strong> <code>-321</code></p></blockquote><p><strong>Example 3:</strong></p><blockquote><p><strong>Input:</strong> <code>120</code></p><p><strong>Output:</strong> <code>21</code></p></blockquote><p><strong>Note:</strong><br>Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [−2<sup>31</sup>,  2<sup>31 </sup>− 1]. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.</p><h5 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h5><p>初始化一个<code>long long</code>类型的变量<code>ans</code>用于保存反转后的整数，每次执行以下操作：</p><ol><li><code>ans = ans * 10 + x % 10;</code></li><li><code>x /= 10;</code></li></ol><p>最后判断<code>ans</code>是否溢出，溢出则返回0，否则返回<code>ans</code><br><em>在第一次尝试时，忽略了反转后的数字可能出现溢出的情况，定义int类型的ans会导致溢出，所以将ans定义为 long long类型</em></p><h5 id="解答："><a href="#解答：" class="headerlink" title="解答："></a>解答：</h5><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//INT_MAX : 2147483647 </span>        <span class="token comment" spellcheck="true">//INT_MIN : -2147483648</span>        <span class="token keyword">long</span> <span class="token keyword">long</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>x <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ans <span class="token operator">=</span> ans <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> x <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>            x <span class="token operator">/</span><span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>ans <span class="token operator">></span> INT_MAX <span class="token operator">||</span> ans <span class="token operator">&lt;</span> INT_MIN<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>macOS下忽略.DS_Store文件</title>
      <link href="/2019/02/26/ignoreds-store/"/>
      <url>/2019/02/26/ignoreds-store/</url>
      
        <content type="html"><![CDATA[<p>在macOS平台下会自动生成<code>.DS_Store</code>文件，在使用git提交的过程中，会发现git将<code>.DS_Store</code>文件一并提交了，这是我们不需要的。我们可以在项目中新建一个<code>.gitignore</code>文件，将<code>.DS_Store</code>添加进去，但是这种方式只对当前项目有效，新建项目之后仍会出现上述问题，所以这里介绍全局忽略<code>.DS_Store</code>的方法。</p><ol><li>在<code>home</code>目录下新建<code>.gitignore_global</code>文件，文件内容如下<pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># .gitignore_global</span>.DS_Store.DS_Store?</code></pre></li><li><p>编辑在<code>home</code>目录下的<code>.gitconfig</code>文件，使其引入<code>.gitignore_global</code>的设置。<code>.gitconfig</code>的内容如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>user<span class="token punctuation">]</span> name <span class="token operator">=</span> yourname email <span class="token operator">=</span> yourname@github.com<span class="token punctuation">[</span>core<span class="token punctuation">]</span> excludesfile <span class="token operator">=</span> /Users/yourname/.gitignore_global</code></pre><p><em>home路径中的yourname和自己的对应</em></p></li><li><p>如果项目中已经出现了<code>.DS_Store</code>文件并且已经提交了，我们需要将<code>.DS_Store</code>文件删除，并再次提交。</p></li></ol><ul><li>删除项目中的所有.DS_Store。这会跳过不在项目中的 .DS_Store<pre class=" language-bash"><code class="language-bash"><span class="token function">find</span> <span class="token keyword">.</span> -name .DS_Store -print0 <span class="token operator">|</span> <span class="token function">xargs</span> -0 <span class="token function">git</span> <span class="token function">rm</span> -f --ignore-unmatch</code></pre></li><li>如果要删除目录及其子目录下的<code>.DS_Store</code>，执行以下指令<pre class=" language-bash"><code class="language-bash"><span class="token function">find</span> <span class="token keyword">.</span> -name <span class="token string">'*.DS_Store'</span> -type f -delete</code></pre></li><li>更新项目<pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> add --all<span class="token function">git</span> commit -m <span class="token string">'.DS_Store banished!'</span></code></pre></li></ul><ol start="4"><li>当然也可以在终端通过修改系统设置来禁止生成<code>.DS_Store</code>（<em>好像不能禁止本地生成</em>）。</li></ol><ul><li>禁止<code>.DS_Store</code>生成：<pre class=" language-bash"><code class="language-bash">defaults <span class="token function">write</span> com.apple.desktopservices DSDontWriteNetworkStores -bool TRUE</code></pre></li><li>恢复<code>.DS_Store</code>生成<pre class=" language-bash"><code class="language-bash">defaults delete com.apple.desktopservices DSDontWriteNetworkStores</code></pre>参考博客：</li></ul><ol><li><p><a href="https://www.jianshu.com/p/fdaa8be7f6c3" target="_blank" rel="noopener">简书-iOSReverse-如何删除GIT中的.DS_Store</a></p></li><li><p><a href="https://aoenian.github.io/2018/12/19/git-ignore-config/" target="_blank" rel="noopener">个人博客-aoenian</a></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> 全局忽略 </tag>
            
            <tag> macOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题：961.N-Repeated Element in Size 2N Array</title>
      <link href="/2019/02/24/961-n-repeated-element-in-size-2n-array/"/>
      <url>/2019/02/24/961-n-repeated-element-in-size-2n-array/</url>
      
        <content type="html"><![CDATA[<h4 id="961-N-Repeated-Element-in-Size-2N-Array"><a href="#961-N-Repeated-Element-in-Size-2N-Array" class="headerlink" title="961. N-Repeated Element in Size 2N Array"></a><a href="https://leetcode-cn.com/problems/n-repeated-element-in-size-2n-array/" target="_blank" rel="noopener">961. N-Repeated Element in Size 2N Array</a></h4><p>In a array <code>A</code> of size <code>2N</code>, there are <code>N+1</code> unique elements, and exactly one of these elements is repeated N times.<br>Return the element repeated <code>N</code> times.</p><p><strong>Example 1:</strong></p><blockquote><p><strong>Input:</strong> <code>[1,2,3,3]</code></p><p><strong>Output:</strong> <code>3</code></p></blockquote><p><strong>Example 2:</strong></p><blockquote><p><strong>Input:</strong> <code>[2,1,2,5,3,2]</code></p><p><strong>Output:</strong> <code>2</code></p></blockquote><p><strong>Example 3:</strong></p><blockquote><p><strong>Input:</strong> <code>[5,1,5,2,5,3,5,4]</code></p><p><strong>Output:</strong> <code>5</code></p></blockquote><p><strong>Note:</strong></p><ol><li><code>4 &lt;= A.length &lt;= 10000</code></li><li><code>0 &lt;= A[i] &lt; 10000</code></li><li><code>A.length</code> is even<h5 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h5>根据题意，其余数字都是不同的，仅有目标值重复，故寻找出现次数大于1的数<h5 id="解答："><a href="#解答：" class="headerlink" title="解答："></a>解答：</h5><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">int</span> <span class="token function">repeatedNTimes</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> A<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> A<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i  <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> A<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题：944.Delete Columns to Make Sorted</title>
      <link href="/2019/02/24/944-delete-columns-to-make-sorted/"/>
      <url>/2019/02/24/944-delete-columns-to-make-sorted/</url>
      
        <content type="html"><![CDATA[<h4 id="944-Delete-Columns-to-Make-Sorted"><a href="#944-Delete-Columns-to-Make-Sorted" class="headerlink" title="944. Delete Columns to Make Sorted"></a><a href="https://leetcode-cn.com/problems/delete-columns-to-make-sorted/" target="_blank" rel="noopener">944. Delete Columns to Make Sorted</a></h4><p>We are given an array <code>A</code> of <code>N</code> lowercase letter strings, all of the same length.<br>Now, we may choose any set of deletion indices, and for each string, we delete all the characters in those indices.<br>For example, if we have an array <code>A = [&quot;abcdef&quot;,&quot;uvwxyz&quot;]</code> and deletion indices <code>{0, 2, 3}</code>, then the final array after deletions is <code>[&quot;bef&quot;, &quot;vyz&quot;]</code>, and the remaining columns of <code>A</code> are <code>[&quot;b&quot;,&quot;v&quot;]</code>, <code>[&quot;e&quot;,&quot;y&quot;]</code>, and <code>[&quot;f&quot;,&quot;z&quot;]</code>.  (Formally, the <code>c</code>-th column is <code>[A[0][c], A[1][c], ..., A[A.length-1][c]]</code>.)<br>Suppose we chose a set of deletion indices <code>D</code> such that after deletions, each remaining column in A is in <strong>non-decreasing</strong> sorted order.<br>Return the minimum possible value of <code>D.length</code>.</p><p><strong>Example 1:</strong></p><blockquote><p><strong>Input:</strong><code>[&quot;cba&quot;,&quot;daf&quot;,&quot;ghi&quot;]</code></p><p><strong>Output:</strong> <code>1</code></p><p><strong>Explanation:</strong><br>After choosing D = {1}, each column <code>[&quot;c&quot;,&quot;d&quot;,&quot;g&quot;]</code> and <code>[&quot;a&quot;,&quot;f&quot;,&quot;i&quot;]</code> are in non-decreasing sorted order.<br>If we chose D = {}, then a column <code>[&quot;b&quot;,&quot;a&quot;,&quot;h&quot;]</code> would not be in non-decreasing sorted order.</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p><strong>Input:</strong> <code>[&quot;a&quot;,&quot;b&quot;]</code></p><p><strong>Output:</strong> <code>0</code></p><p><strong>Explanation:</strong> <code>D = {}</code></p></blockquote><p><strong>Example 3:</strong></p><blockquote><p><strong>Input:</strong> <code>[&quot;zyx&quot;,&quot;wvu&quot;,&quot;tsr&quot;]</code></p><p><strong>Output:</strong> <code>3</code></p><p><strong>Explanation:</strong> <code>D = {0, 1, 2}</code></p></blockquote><p><strong>Note:</strong></p><ol><li><code>1 &lt;= A.length &lt;= 100</code></li><li><code>1 &lt;= A[i].length &lt;= 1000</code><h5 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h5>题意解析，非降序意味着列中不存在降序<br>故进行两次for循环，外层循环为列，内层循环为行，如果前一行某列字母大于后一行（ASCII），则返回值+1；<h5 id="解答："><a href="#解答：" class="headerlink" title="解答："></a>解答：</h5><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">int</span> <span class="token function">minDeletionSize</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token operator">&amp;</span> A<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> strLen <span class="token operator">=</span> A<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> vLen <span class="token operator">=</span> A<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//列序号</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> strLen<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//行序号</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> vLen <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>A<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> A<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                result<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//跳出循环</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题：942.DI String Match</title>
      <link href="/2019/02/24/942-di-string-match/"/>
      <url>/2019/02/24/942-di-string-match/</url>
      
        <content type="html"><![CDATA[<h4 id="942-DI-String-Match"><a href="#942-DI-String-Match" class="headerlink" title="942. DI String Match"></a><a href="https://leetcode-cn.com/problems/di-string-match/" target="_blank" rel="noopener">942. DI String Match</a></h4><p>Given a string <code>S</code> that <strong>only</strong> contains “I” (increase) or “D” (decrease), let <code>N = S.length</code>.<br>Return <strong>any</strong> permutation <code>A</code> of <code>[0, 1, ..., N]</code> such that for all <code>i = 0, ..., N-1</code>:</p><ul><li>If <code>S[i] == &quot;I&quot;</code>, then <code>A[i] &lt; A[i+1]</code></li><li>If <code>S[i] == &quot;D&quot;</code>, then <code>A[i] &gt; A[i+1]</code></li></ul><p><strong>Example 1:</strong></p><blockquote><p><strong>Input:</strong> <code>&quot;IDID&quot;</code></p><p><strong>Output:</strong> <code>[0,4,1,3,2]</code></p></blockquote><p><strong>Example 2:</strong></p><blockquote><p><strong>Input:</strong> <code>&quot;III&quot;</code></p><p><strong>Output:</strong> <code>[0,1,2,3]</code></p></blockquote><p><strong>Example 3:</strong></p><blockquote><p><strong>Input:</strong> <code>&quot;DDI&quot;</code></p><p><strong>Output:</strong> <code>[3,2,0,1]</code></p></blockquote><p><strong>Note:</strong></p><ol><li><code>1 &lt;= S.length &lt;= 10000</code></li><li><code>S</code> only contains characters <code>&quot;I&quot;</code> or <code>&quot;D&quot;</code>.<h5 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h5>如果字符为<code>I</code>，则数字从0开始递增，如果字符为<code>D</code>，则数字从N开始递减；<h5 id="解答："><a href="#解答：" class="headerlink" title="解答："></a>解答：</h5><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">diStringMatch</span><span class="token punctuation">(</span>string S<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> S<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> A<span class="token punctuation">;</span>    <span class="token keyword">int</span> incNum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> decNum <span class="token operator">=</span> len<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>S<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'I'</span><span class="token punctuation">)</span>            A<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>incNum<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            A<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>decNum<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    A<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>incNum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> A<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题：929.Unique Email Addresses</title>
      <link href="/2019/02/24/929-unique-email-addresses/"/>
      <url>/2019/02/24/929-unique-email-addresses/</url>
      
        <content type="html"><![CDATA[<h4 id="929-Unique-Email-Addresses"><a href="#929-Unique-Email-Addresses" class="headerlink" title="929. Unique Email Addresses"></a><a href="https://leetcode-cn.com/problems/unique-email-addresses/" target="_blank" rel="noopener">929. Unique Email Addresses</a></h4><p>Every email consists of a local name and a domain name, separated by the @ sign.<br>For example, in <code>alice@leetcode.com</code>, <code>alice</code> is the local name, and <code>leetcode.com</code> is the domain name.<br>Besides lowercase letters, these emails may contain <code>&#39;.&#39;</code>s or <code>&#39;+&#39;</code>s.<br>If you add periods (<code>&#39;.&#39;</code>) between some characters in the <strong>local name</strong> part of an email address, mail sent there will be forwarded to the same address without dots in the local name.  For example, <code>&quot;alice.z@leetcode.com&quot;</code>and <code>&quot;alicez@leetcode.com&quot;</code>forward to the same email address.  (Note that this rule does not apply for domain names.)<br>If you add a plus (<code>&#39;+&#39;</code>) in the <strong>local name</strong>, everything after the first plus sign will be <strong>ignored</strong>. This allows certain emails to be filtered, for example <code>m.y+name@email.com</code> will be forwarded to <code>my@email.com</code>.  (Again, this rule does not apply for domain names.)<br>It is possible to use both of these rules at the same time.</p><p>Given a list of <code>emails</code>, we send one email to each address in the list.  How many different addresses actually receive mails? </p><p><strong>Example 1:</strong></p><blockquote><p><strong>Input:</strong><br>[“<a href="mailto:test.email+alex@leetcode.com" target="_blank" rel="noopener">test.email+alex@leetcode.com</a>“,”<a href="mailto:test.e.mail+bob.cathy@leetcode.com" target="_blank" rel="noopener">test.e.mail+bob.cathy@leetcode.com</a>“,”<a href="mailto:testemail+david@lee.tcode.com" target="_blank" rel="noopener">testemail+david@lee.tcode.com</a>“]</p></blockquote><blockquote><p><strong>Output:</strong> <code>2</code></p></blockquote><blockquote><p><strong>Explanation:</strong> “<a href="mailto:testemail@leetcode.com" target="_blank" rel="noopener">testemail@leetcode.com</a>“ and “<a href="mailto:testemail@lee.tcode.com" target="_blank" rel="noopener">testemail@lee.tcode.com</a>“ actually receive mails</p></blockquote><p><strong>Note:</strong></p><ul><li><code>1 &lt;= emails[i].length &lt;= 100</code></li><li><code>1 &lt;= emails.length &lt;= 100</code></li><li>Each <code>emails[i]</code>contains exactly one <code>&#39;@&#39;</code>character.<h5 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h5></li></ul><ol><li>若邮箱中含有‘+’，先将‘+’和‘@’之间的字符删掉</li><li>将新的邮箱中‘@’之前的‘.’删掉</li><li>将最后的邮箱插入到无序容器<code>unordered_set&lt;string&gt; result;</code><h5 id="解答："><a href="#解答：" class="headerlink" title="解答："></a>解答：</h5><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span> <span class="token keyword">int</span> <span class="token function">numUniqueEmails</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token operator">&amp;</span> emails<span class="token punctuation">)</span> <span class="token punctuation">{</span>     unordered_set<span class="token operator">&lt;</span>string<span class="token operator">></span> result<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//无序容器-C++ Primer P394；</span>     <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> email <span class="token operator">=</span> emails<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> email <span class="token operator">!=</span> emails<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>email<span class="token punctuation">)</span>     <span class="token punctuation">{</span>         <span class="token keyword">auto</span> plus_pos <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>email<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">'+'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取‘+’的位置</span>         <span class="token keyword">auto</span> at_pos <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>email<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">'@'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">if</span><span class="token punctuation">(</span>plus_pos <span class="token operator">&lt;</span> at_pos<span class="token punctuation">)</span>         <span class="token punctuation">{</span>             <span class="token keyword">auto</span> len <span class="token operator">=</span> at_pos <span class="token operator">-</span> plus_pos<span class="token punctuation">;</span>             <span class="token punctuation">(</span><span class="token operator">*</span>email<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>plus_pos<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//移除‘+’和‘@’中间的内容</span>         <span class="token punctuation">}</span>         <span class="token keyword">auto</span> dot_pos <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>email<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         at_pos <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>email<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">'@'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">while</span><span class="token punctuation">(</span>dot_pos <span class="token operator">&lt;</span> at_pos<span class="token punctuation">)</span>         <span class="token punctuation">{</span>             <span class="token comment" spellcheck="true">//删除所有‘@’前的‘.’</span>             <span class="token punctuation">(</span><span class="token operator">*</span>email<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>dot_pos<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             dot_pos <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>email<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             at_pos<span class="token operator">--</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         result<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token operator">*</span>email<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题：922.Sort Array By Parity II</title>
      <link href="/2019/02/24/922-sort-array-by-parity-ii/"/>
      <url>/2019/02/24/922-sort-array-by-parity-ii/</url>
      
        <content type="html"><![CDATA[<h4 id="922-Sort-Array-By-Parity-II"><a href="#922-Sort-Array-By-Parity-II" class="headerlink" title="922. Sort Array By Parity II"></a><a href="https://leetcode-cn.com/problems/sort-array-by-parity-ii/" target="_blank" rel="noopener">922. Sort Array By Parity II</a></h4><p>Given an array <code>A</code> of non-negative integers, half of the integers in A are odd, and half of the integers are even.<br>Sort the array so that whenever <code>A[i]</code> is odd, <code>i</code> is odd; and whenever <code>A[i]</code> is even, <code>i</code> is even.<br>You may return any answer array that satisfies this condition.</p><p><strong>Example 1:</strong></p><blockquote><p><strong>Input:</strong> <code>[4,2,5,7]</code></p><p><strong>Output:</strong> <code>[4,5,2,7]</code></p><p><strong>Explanation:</strong> <code>[4,7,2,5], [2,5,4,7], [2,7,4,5] would also have been accepted.</code></p></blockquote><p><strong>Note:</strong></p><ol><li><code>2 &lt;= A.length &lt;= 20000</code></li><li><code>A.length % 2 == 0</code></li><li><code>0 &lt;= A[i] &lt;= 1000</code><h5 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h5></li><li>先将数组A按照奇偶分为两个数组odd和even，然后按照偶数、奇数的顺序依次插入到结果数组；</li><li><p>思路和1类似，利用vector的<code>top()</code>取出栈顶元素和<code>pop()</code>删除栈顶元素；</p><h5 id="解答："><a href="#解答：" class="headerlink" title="解答："></a>解答：</h5><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// code 1:</span><span class="token comment" spellcheck="true">// 80ms</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">sortArrayByParityII</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> A<span class="token punctuation">)</span> <span class="token punctuation">{</span>     vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> odd<span class="token punctuation">,</span> even<span class="token punctuation">,</span> result<span class="token punctuation">;</span>     <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> vint <span class="token operator">=</span> A<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> vint <span class="token operator">!=</span> A<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>vint<span class="token punctuation">)</span>     <span class="token punctuation">{</span>         <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>vint<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>             even<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token operator">*</span>vint<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">else</span>             odd<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token operator">*</span>vint<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     size_t len <span class="token operator">=</span> A<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">auto</span> e <span class="token operator">=</span> even<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">auto</span> o <span class="token operator">=</span> odd<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>     <span class="token punctuation">{</span>         <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>         <span class="token punctuation">{</span>             result<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token operator">*</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>             e<span class="token operator">++</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>                         <span class="token keyword">else</span>         <span class="token punctuation">{</span>             result<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token operator">*</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>             o<span class="token operator">++</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span>     <span class="token keyword">return</span> result<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// code 2：</span><span class="token comment" spellcheck="true">// 64ms</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">sortArrayByParityII</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> A<span class="token punctuation">)</span>  <span class="token punctuation">{</span>     stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> odd<span class="token punctuation">;</span>     stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> even<span class="token punctuation">;</span>     vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">::</span>iterator iter<span class="token punctuation">;</span>     <span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//奇偶标志位</span>     <span class="token keyword">for</span><span class="token punctuation">(</span>iter<span class="token operator">=</span>A<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>iter<span class="token operator">!=</span>A<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>iter<span class="token operator">++</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>         <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">*</span>iter<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>             even<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">*</span>iter<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">else</span>             odd<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">*</span>iter<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">for</span><span class="token punctuation">(</span>iter<span class="token operator">=</span>A<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>iter<span class="token operator">!=</span>A<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>iter<span class="token operator">++</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>           <span class="token comment" spellcheck="true">//top()取出栈顶元素，pop()删除栈顶元素；</span>           <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>           <span class="token punctuation">{</span>             <span class="token operator">*</span>iter<span class="token operator">=</span>even<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              even<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>         <span class="token keyword">else</span>         <span class="token punctuation">{</span>             <span class="token operator">*</span>iter<span class="token operator">=</span>odd<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              odd<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         a<span class="token operator">=</span><span class="token number">1</span><span class="token operator">-</span>a<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//奇偶变换</span>     <span class="token punctuation">}</span>     <span class="token keyword">return</span> A<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题：905.Sort Array By Parity</title>
      <link href="/2019/02/24/905-sort-array-by-parity/"/>
      <url>/2019/02/24/905-sort-array-by-parity/</url>
      
        <content type="html"><![CDATA[<h4 id="905-Sort-Array-By-Parity"><a href="#905-Sort-Array-By-Parity" class="headerlink" title="905. Sort Array By Parity"></a><a href="https://leetcode-cn.com/problems/sort-array-by-parity/" target="_blank" rel="noopener">905. Sort Array By Parity</a></h4><p>Given an array <code>A</code> of non-negative integers, return an array consisting of all the even elements of <code>A</code>, followed by all the odd elements of <code>A</code>.<br>You may return any answer array that satisfies this condition.</p><p><strong>Example 1:</strong></p><blockquote><p><strong>Input:</strong> [3,1,2,4]</p></blockquote><blockquote><p><strong>Output:</strong> [2,4,3,1],<br>The outputs [4,2,3,1], [2,4,1,3], and [4,2,1,3] would also be accepted.</p></blockquote><p><strong>Note:</strong></p><ol><li><code>1 &lt;= A.length &lt;= 5000</code></li><li><code>0 &lt;= A[i] &lt;= 5000</code></li></ol><h5 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h5><p>创建临时容器存放偶数和奇数，最后存入到结果容器并返回。</p><h5 id="解答："><a href="#解答：" class="headerlink" title="解答："></a>解答：</h5><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">sortArrayByParity</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> A<span class="token punctuation">)</span> <span class="token punctuation">{</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> odd<span class="token punctuation">,</span> even<span class="token punctuation">,</span> result<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> vint <span class="token operator">=</span> A<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> vint <span class="token operator">!=</span> A<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>vint<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>vint<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                even<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token operator">*</span>vint<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                odd<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token operator">*</span>vint<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        result<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> even<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> even<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将even插入result；</span>        result<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> odd<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> odd<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将odd插入result；</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题：867.Transpose Matrix</title>
      <link href="/2019/02/24/867-transpose-matrix/"/>
      <url>/2019/02/24/867-transpose-matrix/</url>
      
        <content type="html"><![CDATA[<h4 id="867-Transpose-Matrix"><a href="#867-Transpose-Matrix" class="headerlink" title="867. Transpose Matrix"></a><a href="https://leetcode-cn.com/problems/transpose-matrix/" target="_blank" rel="noopener">867. Transpose Matrix</a></h4><p>Given a matrix <code>A</code>, return the transpose of <code>A</code>.<br>The transpose of a matrix is the matrix flipped over it’s main diagonal, switching the row and column indices of the matrix.</p><p><strong>Example 1:</strong></p><blockquote><p><strong>Input:</strong> <code>[[1,2,3],[4,5,6],[7,8,9]]</code></p><p><strong>Output:</strong> <code>[[1,4,7],[2,5,8],[3,6,9]]</code></p></blockquote><p><strong>Example 2:</strong></p><blockquote><p><strong>Input:</strong> <code>[[1,2,3],[4,5,6]]</code></p><p><strong>Output:</strong> <code>[[1,4],[2,5],[3,6]]</code></p></blockquote><p><strong>Note:</strong></p><ol><li><code>1 &lt;= A.length &lt;= 1000</code></li><li><code>1 &lt;= A[0].length &lt;= 1000</code><h5 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h5>A为<code>m * n</code>的矩阵，所以A的转置为<code>n * m</code>的矩阵，故先创建<code>n * m</code>的矩阵<code>result</code>，通过遍历令<code>result[j][i] = A[i][j]</code>,最后返回<code>result</code><h5 id="解答："><a href="#解答：" class="headerlink" title="解答："></a>解答：</h5><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">transpose</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> A<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> m <span class="token operator">=</span> A<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> A<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*     * A为m * n的矩阵，则A的转置为n * m的矩阵     * 所以定义result为n * m的矩阵     */</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">result</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>        result<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>          <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            result<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题：852.Peak Index in a Mountain Array</title>
      <link href="/2019/02/24/852-peak-index-in-a-mountain-array/"/>
      <url>/2019/02/24/852-peak-index-in-a-mountain-array/</url>
      
        <content type="html"><![CDATA[<h4 id="852-Peak-Index-in-a-Mountain-Array"><a href="#852-Peak-Index-in-a-Mountain-Array" class="headerlink" title="852. Peak Index in a Mountain Array"></a><a href="https://leetcode-cn.com/problems/peak-index-in-a-mountain-array/" target="_blank" rel="noopener">852. Peak Index in a Mountain Array</a></h4><p>Let’s call an array <code>A</code> a <em>mountain</em> if the following properties hold:</p><ul><li><code>A.length &gt;= 3</code></li><li>There exists some <code>0 &lt; i &lt; A.length - 1</code> such that <code>A[0] &lt; A[1] &lt; ... A[i-1] &lt; A[i] &gt; A[i+1] &gt; ... &gt; A[A.length - 1]</code><br>Given an array that is definitely a mountain, return any <code>i</code> such that <code>A[0] &lt; A[1] &lt; ... A[i-1] &lt; A[i] &gt; A[i+1] &gt; ... &gt; A[A.length - 1]</code>.</li></ul><p><strong>Example 1:</strong></p><blockquote><p><strong>Input:</strong> <code>[0,1,0]</code></p><p><strong>Output:</strong> <code>1</code></p></blockquote><p><strong>Example 2:</strong></p><blockquote><p><strong>Input:</strong> <code>[0,2,1,0]</code></p><p><strong>Output:</strong> <code>1</code></p></blockquote><p><strong>Note:</strong></p><ol><li><code>3 &lt;= A.length &lt;= 10000</code></li><li><code>0 &lt;= A[i] &lt;= 10^6</code></li><li>A is a mountain, as defined above.<h5 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h5>指定临时变量<code>peak</code>和<code>peak_index</code>，<code>peak</code>与<code>A[i]</code>进行比较，若peak小于A[i]，则令<code>peak = A[i]; peak_index = i;</code>，遍历数组，直到<code>peak</code>取到最大值，<code>peak_index</code>为<code>peak</code>取最大时的i值<h5 id="解答："><a href="#解答：" class="headerlink" title="解答："></a>解答：</h5><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">int</span> <span class="token function">peakIndexInMountainArray</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> A<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> peak <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> peak_index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">auto</span> len <span class="token operator">=</span> A<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>peak <span class="token operator">&lt;</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            peak <span class="token operator">=</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            peak_index <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> peak_index<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题：832.Flipping an Image</title>
      <link href="/2019/02/24/832-flipping-an-image/"/>
      <url>/2019/02/24/832-flipping-an-image/</url>
      
        <content type="html"><![CDATA[<h4 id="832-Flipping-an-Image"><a href="#832-Flipping-an-Image" class="headerlink" title="832. Flipping an Image"></a><a href="https://leetcode-cn.com/problems/flipping-an-image/" target="_blank" rel="noopener">832. Flipping an Image</a></h4><p>Given a binary matrix <code>A</code>, we want to flip the image horizontally, then invert it, and return the resulting image.<br>To flip an image horizontally means that each row of the image is reversed.  For example, flipping <code>[1, 1, 0]</code> horizontally results in <code>[0, 1, 1]</code>.<br>To invert an image means that each <code>0</code> is replaced by <code>1</code>, and each <code>1</code> is replaced by <code>0</code>. For example, inverting <code>[0, 1, 1]</code> results in <code>[1, 0, 0]</code>.</p><p><strong>Example 1:</strong></p><blockquote><p><strong>Input:</strong> [[1,1,0],[1,0,1],[0,0,0]]</p><p><strong>Output:</strong> [[1,0,0],[0,1,0],[1,1,1]]</p><p><strong>Explanation:</strong> First reverse each row: [[0,1,1],[1,0,1],[0,0,0]].<br>Then, invert the image: [[1,0,0],[0,1,0],[1,1,1]]</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p><strong>Input:</strong> [[1,1,0,0],[1,0,0,1],[0,1,1,1],[1,0,1,0]]</p><p><strong>Output:</strong> [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]</p><p><strong>Explanation:</strong> First reverse each row: [[0,0,1,1],[1,0,0,1],[1,1,1,0],[0,1,0,1]].<br>Then invert the image: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]</p></blockquote><p><strong>Notes:</strong></p><ul><li><code>1 &lt;= A.length = A[0].length &lt;= 20</code></li><li><code>0 &lt;= A[i][j] &lt;= 1</code></li></ul><h5 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h5><ul><li>翻转：利用临时数组反转</li><li>反转：与1异或获得反转效果或者利用if-else判断，<strong>不可按位取反</strong><h5 id="解答："><a href="#解答：" class="headerlink" title="解答："></a>解答：</h5><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>  vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">flipAndInvertImage</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> A<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> vint <span class="token operator">=</span> A<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> vint <span class="token operator">!=</span> A<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>vint<span class="token punctuation">)</span>      <span class="token punctuation">{</span>          <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>vint<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">tmp</span><span class="token punctuation">(</span>len<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>              tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>vint<span class="token punctuation">)</span><span class="token punctuation">[</span>len <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>i <span class="token operator">:</span> tmp<span class="token punctuation">)</span>          <span class="token punctuation">{</span>              i <span class="token operator">^</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token operator">*</span>vint <span class="token operator">=</span> tmp<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> A<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题：807.Max Increase to Keep City Skyline</title>
      <link href="/2019/02/24/807-max-increase-to-keep-city-skyline/"/>
      <url>/2019/02/24/807-max-increase-to-keep-city-skyline/</url>
      
        <content type="html"><![CDATA[<h4 id="807-Max-Increase-to-Keep-City-Skyline"><a href="#807-Max-Increase-to-Keep-City-Skyline" class="headerlink" title="807. Max Increase to Keep City Skyline"></a><a href="https://leetcode-cn.com/problems/max-increase-to-keep-city-skyline/" target="_blank" rel="noopener">807. Max Increase to Keep City Skyline</a></h4><p>In a 2 dimensional array <code>grid</code>, each value <code>grid[i][j]</code> represents the height of a building located there. We are allowed to increase the height of any number of buildings, by any amount (the amounts can be different for different buildings). Height 0 is considered to be a building as well.<br>At the end, the “skyline” when viewed from all four directions of the grid, i.e. top, bottom, left, and right, must be the same as the skyline of the original grid. A city’s skyline is the outer contour of the rectangles formed by all the buildings when viewed from a distance. See the following example.<br>What is the maximum total sum that the height of the buildings can be increased?</p><p><strong>Example:</strong></p><blockquote><p><strong>Input:</strong> <code>grid = [[3,0,8,4],[2,4,5,7],[9,2,6,3],[0,3,1,0]]</code></p><p><strong>Output:</strong> <code>35</code></p><p><strong>Explanation:</strong> </p><pre><code>The grid is:[ [3, 0, 8, 4],   [2, 4, 5, 7],  [9, 2, 6, 3],  [0, 3, 1, 0] ]The skyline viewed from top or bottom is: [9, 4, 8, 7]The skyline viewed from left or right is: [8, 7, 9, 3]The grid after increasing the height of buildings without affecting skylines is:gridNew = [ [8, 4, 8, 7],            [7, 4, 7, 7],            [9, 4, 8, 7],            [3, 3, 3, 3] ]</code></pre><p><strong>Notes:</strong></p><ul><li><code>1 &lt; grid.length = grid[0].length &lt;= 50</code>.</li><li>All heights <code>grid[i][j]</code> are in the range <code>[0, 100]</code>.</li><li>All buildings in <code>grid[i][j]</code> occupy the entire grid cell: that is, they are a <code>1 x 1 x grid[i][j]</code> rectangular prism.</li></ul></blockquote><h5 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h5><ul><li>遍历<code>grid</code>获取skyline数值存入到<code>col</code>和<code>row</code>中；</li><li>遍历<code>grid</code>，利用<code>col</code>和<code>row</code>中最小的skyline值来计算最大增量，最后得出结果；<h5 id="解答："><a href="#解答：" class="headerlink" title="解答："></a>解答：</h5><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>  <span class="token keyword">int</span> <span class="token function">maxIncreaseKeepingSkyline</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> grid<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">int</span> len <span class="token operator">=</span> grid<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">col</span><span class="token punctuation">(</span>len<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">row</span><span class="token punctuation">(</span>len<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>          row<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>row<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          col<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>col<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span>          result <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>row<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> col<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题：804.Unique Morse Code Words</title>
      <link href="/2019/02/24/804-unique-morse-code-words/"/>
      <url>/2019/02/24/804-unique-morse-code-words/</url>
      
        <content type="html"><![CDATA[<h4 id="804-Unique-Morse-Code-Words"><a href="#804-Unique-Morse-Code-Words" class="headerlink" title="804. Unique Morse Code Words"></a><a href="https://leetcode-cn.com/problems/unique-morse-code-words/" target="_blank" rel="noopener">804. Unique Morse Code Words</a></h4><p>International Morse Code defines a standard encoding where each letter is mapped to a series of dots and dashes, as follows: <code>&quot;a&quot;</code> maps to <code>&quot;.-&quot;</code>, <code>&quot;b&quot;</code>maps to <code>&quot;-...&quot;</code>, <code>&quot;c&quot;</code> maps to <code>&quot;-.-.&quot;</code>, and so on.<br>For convenience, the full table for the 26 letters of the English alphabet is given below:</p><pre><code>[&quot;.-&quot;,&quot;-...&quot;,&quot;-.-.&quot;,&quot;-..&quot;,&quot;.&quot;,&quot;..-.&quot;,&quot;--.&quot;,&quot;....&quot;,&quot;..&quot;,&quot;.---&quot;,&quot;-.-&quot;,&quot;.-..&quot;,&quot;--&quot;,&quot;-.&quot;,&quot;---&quot;,&quot;.--.&quot;,&quot;--.-&quot;,&quot;.-.&quot;,&quot;...&quot;,&quot;-&quot;,&quot;..-&quot;,&quot;...-&quot;,&quot;.--&quot;,&quot;-..-&quot;,&quot;-.--&quot;,&quot;--..&quot;]</code></pre><p>Now, given a list of words, each word can be written as a concatenation of the Morse code of each letter. For example, “cab” can be written as “-.-..–…”, (which is the concatenation “-.-.” + “-…” + “.-“). We’ll call such a concatenation, the transformation of a word.<br>Return the number of different transformations among all words we have.</p><p><strong>Example:</strong></p><blockquote><p><strong>Input:</strong> <code>words = [&quot;gin&quot;, &quot;zen&quot;, &quot;gig&quot;, &quot;msg&quot;]</code></p><p><strong>Output:</strong> <code>2</code></p><p><strong>Explanation:</strong><br>The transformation of each word is:<br>“gin” -&gt; “–…-.”<br>“zen” -&gt; “–…-.”<br>“gig” -&gt; “–…–.”<br>“msg” -&gt; “–…–.”<br>There are 2 different transformations, “–…-.” and “–…–.”.</p></blockquote><p><strong>Note:</strong></p><ul><li>The length of <code>words</code> will be at most <code>100</code>.</li><li>Each <code>words[i]</code> will have length in range <code>[1, 12]</code>.</li><li><code>words[i]</code> will only consist of lowercase letters.<h5 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h5>将words中word的字母逐个转换为morsecode，并存入临时string，之后将其插入到无序容器<code>unordered_set&lt;string&gt; result;</code>中，然后获取不同元素的数量。<h5 id="解答："><a href="#解答：" class="headerlink" title="解答："></a>解答：</h5><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">int</span> <span class="token function">uniqueMorseRepresentations</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token operator">&amp;</span> words<span class="token punctuation">)</span> <span class="token punctuation">{</span>    unordered_set<span class="token operator">&lt;</span>string<span class="token operator">></span> result<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//vector&lt;string>morseWords;</span>    vector<span class="token operator">&lt;</span>string<span class="token operator">></span> morseCode<span class="token punctuation">{</span><span class="token string">".-"</span><span class="token punctuation">,</span><span class="token string">"-..."</span><span class="token punctuation">,</span><span class="token string">"-.-."</span><span class="token punctuation">,</span><span class="token string">"-.."</span><span class="token punctuation">,</span><span class="token string">"."</span><span class="token punctuation">,</span><span class="token string">"..-."</span><span class="token punctuation">,</span><span class="token string">"--."</span><span class="token punctuation">,</span><span class="token string">"...."</span><span class="token punctuation">,</span><span class="token string">".."</span><span class="token punctuation">,</span><span class="token string">".---"</span><span class="token punctuation">,</span><span class="token string">"-.-"</span><span class="token punctuation">,</span><span class="token string">".-.."</span><span class="token punctuation">,</span><span class="token string">"--"</span><span class="token punctuation">,</span><span class="token string">"-."</span><span class="token punctuation">,</span><span class="token string">"---"</span><span class="token punctuation">,</span><span class="token string">".--."</span><span class="token punctuation">,</span><span class="token string">"--.-"</span><span class="token punctuation">,</span><span class="token string">".-."</span><span class="token punctuation">,</span><span class="token string">"..."</span><span class="token punctuation">,</span><span class="token string">"-"</span><span class="token punctuation">,</span><span class="token string">"..-"</span><span class="token punctuation">,</span><span class="token string">"...-"</span><span class="token punctuation">,</span><span class="token string">".--"</span><span class="token punctuation">,</span><span class="token string">"-..-"</span><span class="token punctuation">,</span><span class="token string">"-.--"</span><span class="token punctuation">,</span><span class="token string">"--.."</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> word <span class="token operator">=</span> words<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> word <span class="token operator">!=</span> words<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>word<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        string tmp <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> letter <span class="token operator">:</span> <span class="token operator">*</span>word<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            tmp <span class="token operator">+</span><span class="token operator">=</span> morseCode<span class="token punctuation">[</span>letter <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        result<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题：771.Jewels and Stones</title>
      <link href="/2019/02/24/771-jewels-and-stones/"/>
      <url>/2019/02/24/771-jewels-and-stones/</url>
      
        <content type="html"><![CDATA[<h4 id="771-Jewels-and-Stones"><a href="#771-Jewels-and-Stones" class="headerlink" title="771. Jewels and Stones"></a><a href="https://leetcode-cn.com/problems/jewels-and-stones/" target="_blank" rel="noopener">771. Jewels and Stones</a></h4><p>You’re given strings <code>J</code>representing the types of stones that are jewels, and <code>S</code> representing the stones you have.  Each character in <code>S</code> is a type of stone you have.  You want to know how many of the stones you have are also jewels.<br>The letters in <code>J</code> are guaranteed distinct, and all characters in <code>J</code> and <code>S</code> are letters. Letters are case sensitive, so <code>&quot;a&quot;</code> is considered a different type of stone from <code>&quot;A&quot;</code>.</p><p><strong>Example 1:</strong></p><blockquote><p><strong>Input:</strong>J = “aA”, S = “aAAbbbb”</p><p><strong>Output:</strong> 3</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p><strong>Input:</strong> J = “z”, S = “ZZ”</p><p><strong>Output:</strong> 0</p></blockquote><p><strong>Note:</strong></p><ul><li><code>S</code> and <code>J</code> will consist of letters and have length at most 50.</li><li>The characters in <code>J</code> are distinct.</li></ul><h5 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h5><ul><li>思路1： 遍历J和S，两者相等，计数+1；</li><li>思路2： 创建临时数组a[256]，先以J中元素的ASCII值作为a的索引并作标记。后以S中元素的ASCII值作为a的索引，判断该位置是否为零，如果不为零，则计数+1；</li><li>思路3： 和2类似，不过将大小写字母分开，减少了数组的长度。<h5 id="解答："><a href="#解答：" class="headerlink" title="解答："></a>解答：</h5><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//code 1：</span><span class="token comment" spellcheck="true">//运行时间大于4ms；</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>  <span class="token keyword">int</span> <span class="token function">numJewelsInStones</span><span class="token punctuation">(</span>string J<span class="token punctuation">,</span> string S<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> J<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span> S<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>J<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> S<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>                  num <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> num<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//code 2:</span><span class="token comment" spellcheck="true">//运行时间4ms；</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>  <span class="token keyword">int</span> <span class="token function">numJewelsInStones</span><span class="token punctuation">(</span>string J<span class="token punctuation">,</span> string S<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">char</span> a<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>       <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>J<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>          a<span class="token punctuation">[</span>J<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//相应字母的ASCII值作为索引；</span>      <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>       <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>S<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>S<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>               ans<span class="token operator">++</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> ans<span class="token punctuation">;</span>       <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// code  3:</span><span class="token comment" spellcheck="true">//运行时间0ms；</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>  <span class="token keyword">int</span> <span class="token function">numJewelsInStones</span><span class="token punctuation">(</span>string J<span class="token punctuation">,</span> string S<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">int</span> a_upper<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span> <span class="token punctuation">,</span> a_lower<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> ch <span class="token operator">:</span> J<span class="token punctuation">)</span>      <span class="token punctuation">{</span>          <span class="token keyword">int</span> x<span class="token punctuation">;</span>                      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isupper</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token punctuation">{</span>              x <span class="token operator">=</span> ch <span class="token operator">-</span> <span class="token string">'A'</span><span class="token punctuation">;</span>              a_upper<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token keyword">else</span>          <span class="token punctuation">{</span>              x <span class="token operator">=</span> ch <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">;</span>              a_lower<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>       <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> ch <span class="token operator">:</span> S<span class="token punctuation">)</span>      <span class="token punctuation">{</span>          <span class="token keyword">int</span> x<span class="token punctuation">;</span>          <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isupper</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token punctuation">{</span>              x <span class="token operator">=</span> ch <span class="token operator">-</span> <span class="token string">'A'</span><span class="token punctuation">;</span>              <span class="token keyword">if</span><span class="token punctuation">(</span>a_upper<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token operator">++</span>num<span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token keyword">else</span>          <span class="token punctuation">{</span>              x <span class="token operator">=</span> ch <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">;</span>              <span class="token keyword">if</span><span class="token punctuation">(</span>a_lower<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token operator">++</span>num<span class="token punctuation">;</span>          <span class="token punctuation">}</span>       <span class="token punctuation">}</span>       <span class="token keyword">return</span> num<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题：709.To Lower Case</title>
      <link href="/2019/02/24/709-to-lower-case/"/>
      <url>/2019/02/24/709-to-lower-case/</url>
      
        <content type="html"><![CDATA[<h4 id="709-To-Lower-Case"><a href="#709-To-Lower-Case" class="headerlink" title="709. To Lower Case"></a><a href="https://leetcode-cn.com/problems/to-lower-case/" target="_blank" rel="noopener">709. To Lower Case</a></h4><p>Implement function ToLowerCase() that has a string parameter str, and returns the same string in lowercase.<br><strong>Example 1:</strong></p><blockquote><p><strong>Input:</strong> “Hello”</p><p><strong>Output:</strong> “hello”</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p><strong>Input:</strong> “here”</p><p><strong>Output:</strong> “here”</p></blockquote><p><strong>Example 3:</strong></p><blockquote><p><strong>Input:</strong> “LOVELY”</p><p><strong>Output:</strong> “lovely”</p></blockquote><h5 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h5><p>利用C++ tolower()函数；</p><h5 id="解答："><a href="#解答：" class="headerlink" title="解答："></a>解答：</h5><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    string <span class="token function">toLowerCase</span><span class="token punctuation">(</span>string str<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>letter <span class="token operator">:</span> str<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            letter <span class="token operator">=</span> <span class="token function">tolower</span><span class="token punctuation">(</span>letter<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> str<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题：657.Robot Return to Origin</title>
      <link href="/2019/02/24/657-robot-return-to-origin/"/>
      <url>/2019/02/24/657-robot-return-to-origin/</url>
      
        <content type="html"><![CDATA[<h4 id="657-Robot-Return-to-Origin"><a href="#657-Robot-Return-to-Origin" class="headerlink" title="657. Robot Return to Origin"></a><a href="https://leetcode-cn.com/problems/robot-return-to-origin/" target="_blank" rel="noopener">657. Robot Return to Origin</a></h4><p>There is a robot starting at position (0, 0), the origin, on a 2D plane. Given a sequence of its moves, judge if this robot <strong>ends up at (0, 0)</strong> after it completes its moves.<br>The move sequence is represented by a string, and the character moves[i] represents its ith move. Valid moves are R (right), L (left), U (up), and D (down). If the robot returns to the origin after it finishes all of its moves, return true. Otherwise, return false.</p><p><strong>Note</strong>: The way that the robot is “facing” is irrelevant. “R” will always make the robot move to the right once, “L” will always make it move left, etc. Also, assume that the magnitude of the robot’s movement is the same for each move.</p><p><strong>Example 1:</strong></p><blockquote><p><strong>Input:</strong> “UD”</p><p><strong>Output:</strong> true </p><p><strong>Explanation</strong>: The robot moves up once, and then down once. All moves have the same magnitude, so it ended up at the origin where it started. Therefore, we return true.</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p><strong>Input:</strong> “LL”</p><p><strong>Output:</strong> false</p><p><strong>Explanation</strong>: The robot moves left twice. It ends up two “moves” to the left of the origin. We return false because it is not at the origin at the end of its moves.</p></blockquote><h5 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h5><p>设置四个标志位，利用switch-case判断moves的值，相应标志位+1。<br>当‘上’=‘下’并且‘左’=‘右’的时候，机器人回到原点。</p><h5 id="解答："><a href="#解答：" class="headerlink" title="解答："></a>解答：</h5><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// code 1：</span><span class="token comment" spellcheck="true">// 8ms</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">bool</span> <span class="token function">judgeCircle</span><span class="token punctuation">(</span>string moves<span class="token punctuation">)</span> <span class="token punctuation">{</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">sign</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> c <span class="token operator">:</span> moves<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">switch</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">case</span> <span class="token string">'U'</span><span class="token operator">:</span>                    sign<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">'D'</span><span class="token operator">:</span>                    sign<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">'L'</span><span class="token operator">:</span>                    sign<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">'R'</span><span class="token operator">:</span>                    sign<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> sign<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> sign<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> sign<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> sign<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// code 2：</span><span class="token comment" spellcheck="true">// 4ms</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">bool</span> <span class="token function">judgeCircle</span><span class="token punctuation">(</span>string moves<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> d <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>moves<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            a<span class="token operator">+</span><span class="token operator">=</span>moves<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'R'</span><span class="token punctuation">;</span>            b<span class="token operator">+</span><span class="token operator">=</span>moves<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'L'</span><span class="token punctuation">;</span>            c<span class="token operator">+</span><span class="token operator">=</span>moves<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'U'</span><span class="token punctuation">;</span>            d<span class="token operator">+</span><span class="token operator">=</span>moves<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'D'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> a <span class="token operator">==</span> b <span class="token operator">&amp;&amp;</span> c <span class="token operator">==</span> d<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题：627.Swap Salary</title>
      <link href="/2019/02/24/627-swap-salary/"/>
      <url>/2019/02/24/627-swap-salary/</url>
      
        <content type="html"><![CDATA[<h4 id="627-Swap-Salary"><a href="#627-Swap-Salary" class="headerlink" title="627. Swap Salary"></a><a href="https://leetcode-cn.com/problems/swap-salary/" target="_blank" rel="noopener">627. Swap Salary</a></h4><p>SQL架构</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> <span class="token keyword">if</span> <span class="token operator">not</span> <span class="token keyword">exists</span> salary<span class="token punctuation">(</span>id <span class="token keyword">int</span><span class="token punctuation">,</span> name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sex char<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> salary <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token keyword">Truncate</span> <span class="token keyword">table</span> salary<span class="token keyword">insert</span> <span class="token keyword">into</span> salary <span class="token punctuation">(</span>id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> sex<span class="token punctuation">,</span> salary<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'m'</span><span class="token punctuation">,</span> <span class="token string">'2500'</span><span class="token punctuation">)</span><span class="token keyword">insert</span> <span class="token keyword">into</span> salary <span class="token punctuation">(</span>id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> sex<span class="token punctuation">,</span> salary<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'f'</span><span class="token punctuation">,</span> <span class="token string">'1500'</span><span class="token punctuation">)</span><span class="token keyword">insert</span> <span class="token keyword">into</span> salary <span class="token punctuation">(</span>id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> sex<span class="token punctuation">,</span> salary<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">,</span> <span class="token string">'m'</span><span class="token punctuation">,</span> <span class="token string">'5500'</span><span class="token punctuation">)</span><span class="token keyword">insert</span> <span class="token keyword">into</span> salary <span class="token punctuation">(</span>id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> sex<span class="token punctuation">,</span> salary<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">'4'</span><span class="token punctuation">,</span> <span class="token string">'D'</span><span class="token punctuation">,</span> <span class="token string">'f'</span><span class="token punctuation">,</span> <span class="token string">'500'</span><span class="token punctuation">)</span></code></pre><p>Given a table <code>salary</code>, such as the one below, that has m=male and f=female values. Swap all f and m values (i.e., change all f values to m and vice versa) with a single update query and no intermediate temp table.For example:</p><table><thead><tr><th>id</th><th>name</th><th>sex</th><th>salary</th></tr></thead><tbody><tr><td>1</td><td>A</td><td>m</td><td>2500</td></tr><tr><td>2</td><td>B</td><td>f</td><td>1500</td></tr><tr><td>3</td><td>C</td><td>m</td><td>5500</td></tr><tr><td>4</td><td>D</td><td>f</td><td>500</td></tr></tbody></table><p>After running your query, the above salary table should have the following rows:</p><table><thead><tr><th>id</th><th>name</th><th>sex</th><th>salary</th></tr></thead><tbody><tr><td>1</td><td>A</td><td>f</td><td>2500</td></tr><tr><td>2</td><td>B</td><td>m</td><td>1500</td></tr><tr><td>3</td><td>C</td><td>f</td><td>5500</td></tr><tr><td>4</td><td>D</td><td>m</td><td>500</td></tr></tbody></table><h5 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h5><p>利用SQL中的case-when多条件判断语句，类似C++中的switch-case语句</p><h5 id="解答："><a href="#解答：" class="headerlink" title="解答："></a>解答：</h5><pre class=" language-sql"><code class="language-sql"><span class="token keyword">UPDATE</span> salary<span class="token keyword">SET</span> sex <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">CASE</span> sex <span class="token keyword">WHEN</span> <span class="token string">'m'</span> <span class="token keyword">THEN</span> <span class="token string">'f'</span>                    <span class="token keyword">WHEN</span> <span class="token string">'f'</span> <span class="token keyword">THEN</span> <span class="token string">'m'</span>           <span class="token keyword">END</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题：620.Not Boring Movies</title>
      <link href="/2019/02/24/620-not-boring-movies/"/>
      <url>/2019/02/24/620-not-boring-movies/</url>
      
        <content type="html"><![CDATA[<h4 id="620-Not-Boring-Movies"><a href="#620-Not-Boring-Movies" class="headerlink" title="620. Not Boring Movies"></a><a href="https://leetcode-cn.com/problems/not-boring-movies/" target="_blank" rel="noopener">620. Not Boring Movies</a></h4><p>SQL架构</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">Create</span> <span class="token keyword">table</span> <span class="token keyword">If</span> <span class="token operator">Not</span> <span class="token keyword">Exists</span> cinema <span class="token punctuation">(</span>id <span class="token keyword">int</span><span class="token punctuation">,</span> movie <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span> description <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span> rating <span class="token keyword">float</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">Truncate</span> <span class="token keyword">table</span> cinema<span class="token keyword">insert</span> <span class="token keyword">into</span> cinema <span class="token punctuation">(</span>id<span class="token punctuation">,</span> movie<span class="token punctuation">,</span> description<span class="token punctuation">,</span> rating<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'War'</span><span class="token punctuation">,</span> <span class="token string">'great 3D'</span><span class="token punctuation">,</span> <span class="token string">'8.9'</span><span class="token punctuation">)</span><span class="token keyword">insert</span> <span class="token keyword">into</span> cinema <span class="token punctuation">(</span>id<span class="token punctuation">,</span> movie<span class="token punctuation">,</span> description<span class="token punctuation">,</span> rating<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token string">'Science'</span><span class="token punctuation">,</span> <span class="token string">'fiction'</span><span class="token punctuation">,</span> <span class="token string">'8.5'</span><span class="token punctuation">)</span><span class="token keyword">insert</span> <span class="token keyword">into</span> cinema <span class="token punctuation">(</span>id<span class="token punctuation">,</span> movie<span class="token punctuation">,</span> description<span class="token punctuation">,</span> rating<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">,</span> <span class="token string">'irish'</span><span class="token punctuation">,</span> <span class="token string">'boring'</span><span class="token punctuation">,</span> <span class="token string">'6.2'</span><span class="token punctuation">)</span><span class="token keyword">insert</span> <span class="token keyword">into</span> cinema <span class="token punctuation">(</span>id<span class="token punctuation">,</span> movie<span class="token punctuation">,</span> description<span class="token punctuation">,</span> rating<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">'4'</span><span class="token punctuation">,</span> <span class="token string">'Ice song'</span><span class="token punctuation">,</span> <span class="token string">'Fantacy'</span><span class="token punctuation">,</span> <span class="token string">'8.6'</span><span class="token punctuation">)</span><span class="token keyword">insert</span> <span class="token keyword">into</span> cinema <span class="token punctuation">(</span>id<span class="token punctuation">,</span> movie<span class="token punctuation">,</span> description<span class="token punctuation">,</span> rating<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">'5'</span><span class="token punctuation">,</span> <span class="token string">'House card'</span><span class="token punctuation">,</span> <span class="token string">'Interesting'</span><span class="token punctuation">,</span> <span class="token string">'9.1'</span><span class="token punctuation">)</span></code></pre><p>X city opened a new cinema, many people would like to go to this cinema. The cinema also gives out a poster indicating the movies’ ratings and descriptions.<br>Please write a SQL query to output movies with an odd numbered ID and a description that is not ‘boring’. Order the result by rating.<br>For example, table <code>cinema</code>:</p><table><thead><tr><th>id</th><th>movie</th><th>description</th><th>rating</th></tr></thead><tbody><tr><td>1</td><td>War</td><td>great 3D</td><td>8.9</td></tr><tr><td>2</td><td>Science</td><td>fiction</td><td>8.5</td></tr><tr><td>3</td><td>irish</td><td>boring</td><td>6.2</td></tr><tr><td>4</td><td>Ice song</td><td>Fantacy</td><td>8.6</td></tr><tr><td>5</td><td>House card</td><td>Interesting</td><td>9.1</td></tr></tbody></table><p>For the example above, the output should be:</p><table><thead><tr><th>id</th><th>movie</th><th>description</th><th>rating</th></tr></thead><tbody><tr><td>5</td><td>House card</td><td>Interesting</td><td>9.1</td></tr><tr><td>1</td><td>War</td><td>great 3D</td><td>8.9</td></tr></tbody></table><h5 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h5><p>通过<code>description</code>和<code>id</code>进行筛选，然后通过<code>rating</code>进行倒序排序（<code>DESC</code>）</p><h5 id="解答："><a href="#解答：" class="headerlink" title="解答："></a>解答：</h5><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> id<span class="token punctuation">,</span> movie<span class="token punctuation">,</span> description<span class="token punctuation">,</span> rating<span class="token keyword">FROM</span> cinema<span class="token keyword">WHERE</span> id <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">and</span> description <span class="token operator">!=</span> <span class="token string">'boring'</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> rating <span class="token keyword">DESC</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题：595.Big Countries</title>
      <link href="/2019/02/24/595-big-countries/"/>
      <url>/2019/02/24/595-big-countries/</url>
      
        <content type="html"><![CDATA[<h4 id="595-Big-Countries"><a href="#595-Big-Countries" class="headerlink" title="595. Big Countries"></a><a href="https://leetcode-cn.com/problems/big-countries/" target="_blank" rel="noopener">595. Big Countries</a></h4><p>SQL架构</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">Create</span> <span class="token keyword">table</span> <span class="token keyword">If</span> <span class="token operator">Not</span> <span class="token keyword">Exists</span> World <span class="token punctuation">(</span>name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span> continent <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span> area <span class="token keyword">int</span><span class="token punctuation">,</span> population <span class="token keyword">int</span><span class="token punctuation">,</span> gdp <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token keyword">Truncate</span> <span class="token keyword">table</span> World<span class="token keyword">insert</span> <span class="token keyword">into</span> World <span class="token punctuation">(</span>name<span class="token punctuation">,</span> continent<span class="token punctuation">,</span> area<span class="token punctuation">,</span> population<span class="token punctuation">,</span> gdp<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">'Afghanistan'</span><span class="token punctuation">,</span> <span class="token string">'Asia'</span><span class="token punctuation">,</span> <span class="token string">'652230'</span><span class="token punctuation">,</span> <span class="token string">'25500100'</span><span class="token punctuation">,</span> <span class="token string">'20343000000'</span><span class="token punctuation">)</span><span class="token keyword">insert</span> <span class="token keyword">into</span> World <span class="token punctuation">(</span>name<span class="token punctuation">,</span> continent<span class="token punctuation">,</span> area<span class="token punctuation">,</span> population<span class="token punctuation">,</span> gdp<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">'Albania'</span><span class="token punctuation">,</span> <span class="token string">'Europe'</span><span class="token punctuation">,</span> <span class="token string">'28748'</span><span class="token punctuation">,</span> <span class="token string">'2831741'</span><span class="token punctuation">,</span> <span class="token string">'12960000000'</span><span class="token punctuation">)</span><span class="token keyword">insert</span> <span class="token keyword">into</span> World <span class="token punctuation">(</span>name<span class="token punctuation">,</span> continent<span class="token punctuation">,</span> area<span class="token punctuation">,</span> population<span class="token punctuation">,</span> gdp<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">'Algeria'</span><span class="token punctuation">,</span> <span class="token string">'Africa'</span><span class="token punctuation">,</span> <span class="token string">'2381741'</span><span class="token punctuation">,</span> <span class="token string">'37100000'</span><span class="token punctuation">,</span> <span class="token string">'188681000000'</span><span class="token punctuation">)</span><span class="token keyword">insert</span> <span class="token keyword">into</span> World <span class="token punctuation">(</span>name<span class="token punctuation">,</span> continent<span class="token punctuation">,</span> area<span class="token punctuation">,</span> population<span class="token punctuation">,</span> gdp<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">'Andorra'</span><span class="token punctuation">,</span> <span class="token string">'Europe'</span><span class="token punctuation">,</span> <span class="token string">'468'</span><span class="token punctuation">,</span> <span class="token string">'78115'</span><span class="token punctuation">,</span> <span class="token string">'3712000000'</span><span class="token punctuation">)</span><span class="token keyword">insert</span> <span class="token keyword">into</span> World <span class="token punctuation">(</span>name<span class="token punctuation">,</span> continent<span class="token punctuation">,</span> area<span class="token punctuation">,</span> population<span class="token punctuation">,</span> gdp<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">'Angola'</span><span class="token punctuation">,</span> <span class="token string">'Africa'</span><span class="token punctuation">,</span> <span class="token string">'1246700'</span><span class="token punctuation">,</span> <span class="token string">'20609294'</span><span class="token punctuation">,</span> <span class="token string">'100990000000'</span><span class="token punctuation">)</span></code></pre><p>There is a table <code>World</code></p><table><thead><tr><th>name</th><th>continent</th><th>area</th><th>population</th><th>gdp</th></tr></thead><tbody><tr><td>Afghanistan</td><td>Asia</td><td>652230</td><td>25500100</td><td>20343000</td></tr><tr><td>Albania</td><td>Europe</td><td>28748</td><td>2831741</td><td>12960000</td></tr><tr><td>Algeria</td><td>Africa</td><td>2381741</td><td>37100000</td><td>188681000</td></tr><tr><td>Andorra</td><td>Europe</td><td>468</td><td>78115</td><td>3712000</td></tr><tr><td>Angola</td><td>Africa</td><td>1246700</td><td>20609294</td><td>100990000</td></tr></tbody></table><p>A country is big if it has an area of bigger than 3 million square km or a population of more than 25 million.<br>Write a SQL solution to output big countries’ name, population and area.<br>For example, according to the above table, we should output:</p><table><thead><tr><th>name</th><th>population</th><th>area</th></tr></thead><tbody><tr><td>Afghanistan</td><td>25500100</td><td>652230</td></tr><tr><td>Algeria</td><td>37100000</td><td>2381741</td></tr></tbody></table><h5 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h5><p>利用人口和面积进行筛选</p><h5 id="解答："><a href="#解答：" class="headerlink" title="解答："></a>解答：</h5><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> name<span class="token punctuation">,</span> population<span class="token punctuation">,</span> area <span class="token keyword">from</span> World <span class="token keyword">where</span> area <span class="token operator">></span> <span class="token number">3000000</span> <span class="token operator">or</span> population <span class="token operator">></span> <span class="token number">25000000</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题：561.Array Partition I</title>
      <link href="/2019/02/24/561-array-partition-i/"/>
      <url>/2019/02/24/561-array-partition-i/</url>
      
        <content type="html"><![CDATA[<h4 id="561-Array-Partition-I"><a href="#561-Array-Partition-I" class="headerlink" title="561. Array Partition I"></a><a href="https://leetcode-cn.com/problems/array-partition-i/" target="_blank" rel="noopener">561. Array Partition I</a></h4><p>Given an array of <strong>2n</strong> integers, your task is to group these integers into <strong>n</strong> pairs of integer, say (a<sub>1</sub>, b<sub>1</sub>), (a<sub>2</sub>, b<sub>2</sub>), …, (a<sub>n</sub>, b<sub>n</sub>) which makes sum of min(a<sub>i</sub>, b<sub>i</sub>) for all i from 1 to n as large as possible.</p><p><strong>Example:</strong></p><blockquote><p><strong>Input:</strong> <code>[1,4,3,2]</code></p><p><strong>Output:</strong> <code>4</code></p><p><strong>Explanation:</strong> <code>n is 2, and the maximum sum of pairs is 4 = min(1, 2) + min(3, 4).</code></p></blockquote><p><strong>Note:</strong></p><ol><li><strong>n</strong> is a positive integer, which is in the range of [1, 10000].</li><li>All the integers in the array will be in the range of [-10000, 10000].<h5 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h5>为得到最大的和，所以要保证第2大的数字和第1大的数字进行组合，第4大的数字和第3大的数字进行组合，以此类推。可以看出，我们将数组进行排序后，取<code>2n+1</code>项进行相加，即可得结果。<h5 id="解答："><a href="#解答：" class="headerlink" title="解答："></a>解答：</h5><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">int</span> <span class="token function">arrayPairSum</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        result <span class="token operator">+</span><span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token operator">++</span>i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题：509.Fibonacci Number</title>
      <link href="/2019/02/24/509-fibonacci-number/"/>
      <url>/2019/02/24/509-fibonacci-number/</url>
      
        <content type="html"><![CDATA[<h4 id="509-Fibonacci-Number"><a href="#509-Fibonacci-Number" class="headerlink" title="509. Fibonacci Number"></a><a href="https://leetcode-cn.com/problems/fibonacci-number/" target="_blank" rel="noopener">509. Fibonacci Number</a></h4><p>The <strong>Fibonacci numbers</strong>, commonly denoted <code>F(n)</code> form a sequence, called the <strong>Fibonacci sequence</strong>, such that each number is the sum of the two preceding ones, starting from <code>0</code> and <code>1</code>. That is,</p><pre><code>F(0) = 0,   F(1) = 1F(N) = F(N - 1) + F(N - 2), for N &gt; 1.</code></pre><p>Given <code>N</code>, calculate <code>F(N)</code>.</p><p><strong>Example 1:</strong></p><blockquote><p><strong>Input:</strong> <code>2</code></p><p><strong>Output:</strong> <code>1</code></p><p><strong>Explanation:</strong> <code>F(2) = F(1) + F(0) = 1 + 0 = 1.</code></p></blockquote><p><strong>Example 2:</strong></p><blockquote><p><strong>Input:</strong> <code>3</code></p><p><strong>Output:</strong> <code>2</code></p><p><strong>Explanation:</strong> <code>F(3) = F(2) + F(1) = 1 + 1 = 2.</code></p></blockquote><p><strong>Example 3:</strong></p><blockquote><p><strong>Input:</strong> <code>4</code></p><p><strong>Output:</strong> <code>3</code></p><p><strong>Explanation:</strong> <code>F(4) = F(3) + F(2) = 2 + 1 = 3.</code></p></blockquote><p><strong>Note:</strong><br>0 ≤ <code>N</code> ≤ 30.</p><h5 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h5><ul><li>思路1：采用递归的方法</li><li>思路2：采用数组，将斐波那契数存入到数组中。<h5 id="解答："><a href="#解答：" class="headerlink" title="解答："></a>解答：</h5><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//方法1：</span><span class="token comment" spellcheck="true">//效率较低，运行时间20ms</span><span class="token keyword">int</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>      <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>n<span class="token number">-2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>  <span class="token keyword">int</span> <span class="token function">fib</span><span class="token punctuation">(</span><span class="token keyword">int</span> N<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//方法2：</span><span class="token comment" spellcheck="true">//运行时间0ms</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>  <span class="token keyword">int</span> <span class="token function">fib</span><span class="token punctuation">(</span><span class="token keyword">int</span> N<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>N<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//开辟大小为N+1的数组</span>      p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>      <span class="token punctuation">{</span>          p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">+</span> p<span class="token punctuation">[</span>i<span class="token number">-2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> p<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题：476.Number Complement</title>
      <link href="/2019/02/24/476-number-complement/"/>
      <url>/2019/02/24/476-number-complement/</url>
      
        <content type="html"><![CDATA[<h4 id="476-Number-Complement"><a href="#476-Number-Complement" class="headerlink" title="476. Number Complement"></a><a href="https://leetcode-cn.com/problems/number-complement/" target="_blank" rel="noopener">476. Number Complement</a></h4><p>Given a positive integer, output its complement number. The complement strategy is to flip the bits of its binary representation.</p><p><strong>Note:</strong></p><ol><li>The given integer is guaranteed to fit within the range of a 32-bit signed integer.</li><li>You could assume no leading zero bit in the integer’s binary representation.</li></ol><p><strong>Example 1:</strong></p><blockquote><p><strong>Input:</strong> <code>5</code></p><p><strong>Output:</strong> <code>2</code></p><p><strong>Explanation:</strong> The binary representation of 5 is 101 (no leading zero bits), and its complement is 010. So you need to output 2.</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p><strong>Input:</strong> <code>1</code></p><p><strong>Output:</strong> <code>0</code></p><p><strong>Explanation:</strong> The binary representation of 1 is 1 (no leading zero bits), and its complement is 0. So you need to output 0.</p></blockquote><h5 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h5><p>题例中<code>5</code>的二进制为<code>101</code>，补数为<code>010</code>,补数可以通过<code>101 ^ 111</code>获得，所以首先获取与num相同二进制位数的<code>111</code>，通过判断<code>num</code>左移1位是否为空可以获得其位数，进而获取<code>mask</code>。</p><h5 id="解答："><a href="#解答：" class="headerlink" title="解答："></a>解答：</h5><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">findComplement</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> mask <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> tmp <span class="token operator">=</span> num<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>tmp <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            mask <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token keyword">return</span> num <span class="token operator">^</span> <span class="token punctuation">(</span>mask<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题：461.Hamming Distance</title>
      <link href="/2019/02/24/461-hamming-distance/"/>
      <url>/2019/02/24/461-hamming-distance/</url>
      
        <content type="html"><![CDATA[<h4 id="461-Hamming-Distance"><a href="#461-Hamming-Distance" class="headerlink" title="461. Hamming Distance"></a><a href="https://leetcode-cn.com/problems/hamming-distance/" target="_blank" rel="noopener">461. Hamming Distance</a></h4><p>The <a href="https://en.wikipedia.org/wiki/Hamming_distance" target="_blank" rel="noopener">Hamming distance</a> between two integers is the number of positions at which the corresponding bits are different.<br>Given two integers <code>x</code> and <code>y</code>, calculate the Hamming distance.</p><p><strong>Note:</strong><br>0 ≤ <code>x</code>, <code>y</code> &lt; 2<sup>31</sup>.</p><p><strong>Example:</strong></p><pre><code>Input: x = 1, y = 4Output: 2Explanation:1   (0 0 0 1)4   (0 1 0 0)       ↑   ↑The above arrows point to positions where the corresponding bits are different.</code></pre><h5 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h5><p>n = x ^ y，两数对应位置若不相同，则n的相应位置置1<br>利用n = n &amp; (n - 1)获取n中1的个数</p><h5 id="解答："><a href="#解答：" class="headerlink" title="解答："></a>解答：</h5><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">hammingDistance</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> x<span class="token operator">^</span>y<span class="token punctuation">,</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">{</span>            count <span class="token operator">++</span><span class="token punctuation">;</span>            n <span class="token operator">=</span> n<span class="token operator">&amp;</span><span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> count<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题：344.Reverse String</title>
      <link href="/2019/02/24/344-reverse-string/"/>
      <url>/2019/02/24/344-reverse-string/</url>
      
        <content type="html"><![CDATA[<h4 id="344-Reverse-String"><a href="#344-Reverse-String" class="headerlink" title="344. Reverse String"></a><a href="https://leetcode-cn.com/problems/reverse-string/" target="_blank" rel="noopener">344. Reverse String</a></h4><p>Write a function that takes a string as input and returns the string reversed.</p><p><strong>Example 1:</strong></p><blockquote><p><strong>Input:</strong> “hello”</p><p><strong>Output:</strong> “olleh”</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p><strong>Input:</strong> “A man, a plan, a canal: Panama”</p><p><strong>Output:</strong> “amanaP :lanac a ,nalp a ,nam A”</p></blockquote><h5 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h5><ul><li>思路1： 通过<code>s.length()</code>获取<code>s</code>的字符长度，然后通过下标访问<code>s</code>，将<code>s</code>中的字符从尾到头拼接到<code>result</code>上，得到返回结果。</li><li>思路2： 利用<code>reverse</code>函数，<code>reverse(beg, end)</code>会将区间<code>(beg, end)</code>之间的元素全部逆转。<h5 id="解答："><a href="#解答：" class="headerlink" title="解答："></a>解答：</h5><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// code 1: </span><span class="token comment" spellcheck="true">// 4ms</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>  string <span class="token function">reverseString</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">{</span>      string result <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>      <span class="token keyword">auto</span> len <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">while</span><span class="token punctuation">(</span>len <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>          result <span class="token operator">+</span><span class="token operator">=</span> s<span class="token punctuation">[</span>len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token operator">--</span>len<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> result<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// code 2:</span><span class="token comment" spellcheck="true">// 4ms</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>  string <span class="token function">reverseString</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">reverse</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> s<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题：268.Missing Number</title>
      <link href="/2019/02/24/268-missing-number/"/>
      <url>/2019/02/24/268-missing-number/</url>
      
        <content type="html"><![CDATA[<h4 id="268-Missing-Number"><a href="#268-Missing-Number" class="headerlink" title="268. Missing Number"></a><a href="https://leetcode-cn.com/problems/missing-number/" target="_blank" rel="noopener">268. Missing Number</a></h4><p>Given an array containing <em>n</em> distinct numbers taken from <code>0, 1, 2, ..., n</code>, find the one that is missing from the array.</p><p><strong>Example 1:</strong></p><blockquote><p><strong>Input:</strong> <code>[3,0,1]</code></p><p><strong>Output:</strong> <code>2</code></p></blockquote><p><strong>Example 2:</strong></p><blockquote><p><strong>Input:</strong> <code>[9,6,4,2,3,5,7,0,1]</code></p><p><strong>Output:</strong> <code>8</code></p></blockquote><p><strong>Note</strong>:<br>Your algorithm should run in linear runtime complexity. Could you implement it using only constant extra space complexity?</p><h5 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h5><p>要求时间复杂度为O(n)；</p><ul><li>思路1： 采用和<a href="https://leetcode-cn.com/problems/single-number/" target="_blank" rel="noopener">136. Single Number</a>类似的思路，将容器中所有的数字和有序数列<code>1,2,3……,n</code>异或，如果容器中存在数字<code>x</code>，那么和有序数列中对应的<code>x</code>异或结果为零，最终得到的结果便为缺失的数字。</li><li>思路2：采用求和相减，若容器长度为<code>n</code>，利用求和公式计算<code>s1 = n * (n+1) / 2</code>，减去容器中数字的求和<code>s2</code>，则可得缺失的数字。<h5 id="解答："><a href="#解答：" class="headerlink" title="解答："></a>解答：</h5><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//方法1：</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>  <span class="token keyword">int</span> <span class="token function">missingNumber</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>      <span class="token punctuation">{</span>          result <span class="token operator">^</span><span class="token operator">=</span> <span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">^</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> result<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//方法2：</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>  <span class="token keyword">int</span> <span class="token function">missingNumber</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> s1 <span class="token operator">=</span> n <span class="token operator">*</span> <span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> s2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span> nums<span class="token punctuation">)</span>      <span class="token punctuation">{</span>          s2 <span class="token operator">+</span><span class="token operator">=</span> i<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> s1 <span class="token operator">-</span> s2<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
            <tag> 位运算 </tag>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题：231.Power of Two</title>
      <link href="/2019/02/24/231-power-of-two/"/>
      <url>/2019/02/24/231-power-of-two/</url>
      
        <content type="html"><![CDATA[<h4 id="231-Power-of-Two"><a href="#231-Power-of-Two" class="headerlink" title="231. Power of Two"></a><a href="https://leetcode-cn.com/problems/power-of-two/" target="_blank" rel="noopener">231. Power of Two</a></h4><p><strong>Example 1:</strong></p><blockquote><p><strong>Input:</strong> <code>1</code></p><p><strong>Output:</strong> <code>true</code></p><p><strong>Explanation:</strong> 2<sup>0</sup> = 1</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p><strong>Input:</strong> <code>16</code></p><p><strong>Output:</strong> <code>true</code></p><p><strong>Explanation:</strong> 2<sup>4</sup> = 16</p></blockquote><p><strong>Example 3:</strong></p><blockquote><p><strong>Input:</strong> <code>218</code></p><p><strong>Output:</strong> <code>false</code></p></blockquote><h5 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h5><p>通过观察可知，如果一个数字为2的幂，那么这个数字中的二进制数中的最高位必为1，其它都为0，那么灵气减1，最高位变为0，其它位变为1。例如2<sup>3</sup>=8,其二进制形式为1000，那么8 - 1 = 7，7的二进制形式为0111，1000 &amp; 0111 = 0；我们可以通过这个性质来判断该数字是否为2的幂。</p><h5 id="解答："><a href="#解答：" class="headerlink" title="解答："></a>解答：</h5><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">bool</span> <span class="token function">isPowerOfTwo</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>n <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token punctuation">(</span>n <span class="token operator">&amp;</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题：201.Bitwise AND of Numbers Range</title>
      <link href="/2019/02/24/201-bitwise-and-of-numbers-range/"/>
      <url>/2019/02/24/201-bitwise-and-of-numbers-range/</url>
      
        <content type="html"><![CDATA[<h4 id="201-Bitwise-AND-of-Numbers-Range"><a href="#201-Bitwise-AND-of-Numbers-Range" class="headerlink" title="201. Bitwise AND of Numbers Range"></a><a href="https://leetcode-cn.com/problems/bitwise-and-of-numbers-range/" target="_blank" rel="noopener">201. Bitwise AND of Numbers Range</a></h4><p>Given a range [m, n] where 0 &lt;= m &lt;= n &lt;= 2147483647, return the bitwise AND of all numbers in this range, inclusive.</p><p><strong>Example 1:</strong></p><blockquote><p><strong>Input:</strong> <code>[5,7]</code></p><p><strong>Output:</strong> <code>4</code></p></blockquote><p><strong>Example 2:</strong></p><blockquote><p><strong>Input:</strong> <code>[0,1]</code></p><p><strong>Output:</strong> <code>0</code></p></blockquote><h5 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h5><p>通过观察可以知道5的二进制为<strong>1</strong>01，6的二进制为<strong>1</strong>10，7的二进制为<strong>1</strong>11，输出4的二进制为<strong>1</strong>00，可以发现，只要找到二进制的左边公共部分即可。<br>可以先建立一个32位都是1的mask，然后每次左移一位，比较m和n是否相同，不同再继续左移一位，直至相同，然后把m和mask相与即得最终结果。</p><h5 id="解答："><a href="#解答：" class="headerlink" title="解答："></a>解答：</h5><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//方法1</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">rangeBitwiseAnd</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">unsigned</span> <span class="token keyword">int</span> mask <span class="token operator">=</span> UINT_MAX<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>m <span class="token operator">&amp;</span> mask<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token punctuation">(</span>n <span class="token operator">&amp;</span> mask<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            mask <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> mask <span class="token operator">&amp;</span> m<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//方法2</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">rangeBitwiseAnd</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>m<span class="token operator">!=</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>            m<span class="token operator">>>=</span><span class="token number">1</span><span class="token punctuation">;</span>            n<span class="token operator">>>=</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token operator">++</span>cnt<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> m<span class="token operator">&lt;&lt;</span>cnt<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题：191.Number of 1 Bits</title>
      <link href="/2019/02/24/191-number-of-1-bits/"/>
      <url>/2019/02/24/191-number-of-1-bits/</url>
      
        <content type="html"><![CDATA[<h3 id="191-Number-of-1-Bits"><a href="#191-Number-of-1-Bits" class="headerlink" title="191. Number of 1 Bits"></a><a href="https://leetcode-cn.com/problems/number-of-1-bits/" target="_blank" rel="noopener">191. Number of 1 Bits</a></h3><p>Write a function that takes an unsigned integer and return the number of ‘1’ bits it has (also known as the <a href="http://en.wikipedia.org/wiki/Hamming_weight" target="_blank" rel="noopener">Hamming weight</a>).</p><p><strong>Example 1:</strong></p><blockquote><p><strong>Input:</strong> <code>00000000000000000000000000001011</code></p><p><strong>Output:</strong> <code>3</code></p><p><strong>Explanation:</strong> The input binary string <strong>00000000000000000000000000001011</strong> has a total of three ‘1’ bits.</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p><strong>Input:</strong> <code>00000000000000000000000010000000</code></p><p><strong>Output:</strong> <code>1</code></p><p><strong>Explanation:</strong> The input binary string <strong>00000000000000000000000010000000</strong> has a total of one ‘1’ bit.</p></blockquote><p><strong>Example 3:</strong></p><blockquote><p><strong>Input:</strong> <code>11111111111111111111111111111101</code></p><p><strong>Output:</strong> <code>31</code></p><p><strong>Explanation:</strong> The input binary string <strong>11111111111111111111111111111101</strong> has a total of thirty one ‘1’ bits.</p></blockquote><p><strong>Note:</strong></p><ul><li>Note that in some languages such as Java, there is no unsigned integer type. In this case, the input will be given as signed integer type and should not affect your implementation, as the internal binary representation of the integer is the same whether it is signed or unsigned.</li><li>In Java, the compiler represents the signed integers using <a href="https://en.wikipedia.org/wiki/Two%27s_complement" target="_blank" rel="noopener">2’s complement notation</a>. Therefore, in <strong>Example 3</strong> above the input represents the signed integer <code>-3</code>.</li></ul><p><strong>Follow up</strong>:<br>If this function is called many times, how would you optimize it?</p><h5 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h5><ul><li>思路1：除2取余法，末尾为1，除2取余后为1，末尾为0，除2取余后为0</li><li>思路2：与1相与，直接判定末位是否为1</li><li>思路3：直接去掉二进制中位置最靠后的1。假设<code>n=1100</code>，则<code>n-1=1011</code>，那么<code>n&amp;(n-1)=1000</code>,位置最靠后的1被去掉。<h5 id="解答："><a href="#解答：" class="headerlink" title="解答："></a>解答：</h5><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//方法1</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>  <span class="token keyword">int</span> <span class="token function">hammingWeight</span><span class="token punctuation">(</span>uint32_t n<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">while</span><span class="token punctuation">(</span>n <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>          cnt <span class="token operator">+</span><span class="token operator">=</span> n <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">;</span>          n <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> cnt<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//方法2</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>  <span class="token keyword">int</span> <span class="token function">hammingWeight</span><span class="token punctuation">(</span>uint32_t n<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">while</span><span class="token punctuation">(</span>n <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>          cnt <span class="token operator">+</span><span class="token operator">=</span> n <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">;</span>          n <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> cnt<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//方法3</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>  <span class="token keyword">int</span> <span class="token function">hammingWeight</span><span class="token punctuation">(</span>uint32_t n<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">while</span><span class="token punctuation">(</span>n <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>          n <span class="token operator">=</span> n <span class="token operator">&amp;</span> <span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          cnt<span class="token operator">++</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> cnt<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题：182.Duplicate Emails</title>
      <link href="/2019/02/24/182-duplicate-emails/"/>
      <url>/2019/02/24/182-duplicate-emails/</url>
      
        <content type="html"><![CDATA[<h4 id="182-Duplicate-Emails"><a href="#182-Duplicate-Emails" class="headerlink" title="182. Duplicate Emails"></a><a href="https://leetcode-cn.com/problems/duplicate-emails/" target="_blank" rel="noopener">182. Duplicate Emails</a></h4><p>SQL架构</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">Create</span> <span class="token keyword">table</span> <span class="token keyword">If</span> <span class="token operator">Not</span> <span class="token keyword">Exists</span> Person <span class="token punctuation">(</span>Id <span class="token keyword">int</span><span class="token punctuation">,</span> Email <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">Truncate</span> <span class="token keyword">table</span> Person<span class="token keyword">insert</span> <span class="token keyword">into</span> Person <span class="token punctuation">(</span>Id<span class="token punctuation">,</span> Email<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'a@b.com'</span><span class="token punctuation">)</span><span class="token keyword">insert</span> <span class="token keyword">into</span> Person <span class="token punctuation">(</span>Id<span class="token punctuation">,</span> Email<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token string">'c@d.com'</span><span class="token punctuation">)</span><span class="token keyword">insert</span> <span class="token keyword">into</span> Person <span class="token punctuation">(</span>Id<span class="token punctuation">,</span> Email<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">,</span> <span class="token string">'a@b.com'</span><span class="token punctuation">)</span></code></pre><p>Write a SQL query to find all duplicate emails in a table named <code>Person</code>.</p><p><strong>Example:</strong></p><table><thead><tr><th>Id</th><th>Email</th></tr></thead><tbody><tr><td>1</td><td><a href="mailto:a@b.com" target="_blank" rel="noopener">a@b.com</a></td></tr><tr><td>2</td><td><a href="mailto:c@d.com" target="_blank" rel="noopener">c@d.com</a></td></tr><tr><td>3</td><td><a href="mailto:a@b.com" target="_blank" rel="noopener">a@b.com</a></td></tr></tbody></table><p>For example, your query should return the following for the above table:</p><table><thead><tr><th>Email</th></tr></thead><tbody><tr><td><a href="mailto:a@b.com" target="_blank" rel="noopener">a@b.com</a></td></tr></tbody></table><p><strong>Note</strong>: All emails are in lowercase.</p><h5 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h5><p>使用 GROUP BY 和 HAVING 条件：向 GROUP BY 添加条件的一种更常用的方法是使用 HAVING 子句，该子句更为简单高效。<br>GROUP BY 语句用于结合合计函数，根据一个或多个列对结果集进行分组。</p><h5 id="解答："><a href="#解答：" class="headerlink" title="解答："></a>解答：</h5><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> Email <span class="token keyword">from</span> Person<span class="token keyword">group</span> <span class="token keyword">by</span> Email <span class="token keyword">having</span> <span class="token function">count</span><span class="token punctuation">(</span>Email<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题：136.Single Number</title>
      <link href="/2019/02/24/136-single-number/"/>
      <url>/2019/02/24/136-single-number/</url>
      
        <content type="html"><![CDATA[<h4 id="136-Single-Number"><a href="#136-Single-Number" class="headerlink" title="136. Single Number"></a><a href="https://leetcode-cn.com/problems/single-number/" target="_blank" rel="noopener">136. Single Number</a></h4><p>Given a <strong>non-empty</strong> array of integers, every element appears <em>twice</em> except for one. Find that single one.</p><p><strong>Note:</strong><br>Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?<br><strong>Example 1:</strong></p><blockquote><p><strong>Input:</strong> <code>[2,2,1]</code></p><p><strong>Output:</strong> `1</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p><strong>Input:</strong> <code>[4,1,2,1,2]</code></p><p><strong>Output:</strong> <code>4</code></p></blockquote><h5 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h5><p>题目要求算法的时间复杂度为O(n),空间复杂度为O(1)；<br>将容器的所有的数字进行异或运算，由于相同两个数字异或结果为0，所以所有元素异或的结果便为所寻单独的数字。</p><h5 id="解答："><a href="#解答：" class="headerlink" title="解答："></a>解答：</h5><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">singleNumber</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> ibeg <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> ibeg <span class="token operator">!=</span> nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>ibeg<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            result <span class="token operator">^</span><span class="token operator">=</span> <span class="token operator">*</span>ibeg<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//所有数字进行异或运算 </span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题：118.Pascal&#39;s Triangle</title>
      <link href="/2019/02/24/118-pascals-triangle/"/>
      <url>/2019/02/24/118-pascals-triangle/</url>
      
        <content type="html"><![CDATA[<h4 id="118-Pascal’s-Triangle"><a href="#118-Pascal’s-Triangle" class="headerlink" title="118. Pascal’s Triangle"></a><a href="https://leetcode-cn.com/problems/pascals-triangle/" target="_blank" rel="noopener">118. Pascal’s Triangle</a></h4><p>Given a non-negative integer <em>numRows</em>, generate the first <em>numRows</em> of Pascal’s triangle.<br><img src="http://upload-images.jianshu.io/upload_images/14484228-f1bcb06c89999105.gif?imageMogr2/auto-orient/strip" alt="In Pascal&#39;s triangle, each number is the sum of the two numbers directly above it."></p><p><strong>Example:</strong></p><p><strong>Input:</strong> <code>5</code></p><p><strong>Output:</strong></p><pre><code>[     [1],    [1,1],   [1,2,1],  [1,3,3,1], [1,4,6,4,1]]</code></pre><h5 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h5><p>根据杨辉三角的特点创建容器，并将每行开头和结尾赋值为1，当行数大于2时，根据杨辉三角的运算规则进行运算</p><h5 id="解答："><a href="#解答：" class="headerlink" title="解答："></a>解答：</h5><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">generate</span><span class="token punctuation">(</span><span class="token keyword">int</span> numRows<span class="token punctuation">)</span> <span class="token punctuation">{</span>        vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">res</span><span class="token punctuation">(</span>numRows<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numRows<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            res<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//确定每行数字的个数</span>            <span class="token comment" spellcheck="true">//每行开头和结尾都为1</span>            res<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            res<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>numRows <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numRows<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>             <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span>                     res<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> res<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> res<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题：78.Subsets</title>
      <link href="/2019/02/24/78-subsets/"/>
      <url>/2019/02/24/78-subsets/</url>
      
        <content type="html"><![CDATA[<h4 id="78-Subsets"><a href="#78-Subsets" class="headerlink" title="78. Subsets"></a><a href="https://leetcode-cn.com/problems/subsets/" target="_blank" rel="noopener">78. Subsets</a></h4><p>Given a set of <strong>distinct</strong> integers, <em>nums</em>, return all possible subsets (the power set).<br><strong>Note:</strong> The solution set must not contain duplicate subsets.</p><p><strong>Example:</strong></p><p><strong>Input:</strong> nums = [1,2,3]</p><p><strong>Output:</strong></p><pre><code>[  [3],  [1],  [2],  [1,2,3],  [1,3],  [2,3],  [1,2],  []]</code></pre><h5 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h5><pre><code>对集合的每一个元素进行迭代，迭代时，我们保留原来的子集，并在原来的子集后面加入新的元素，之后再加入集合迭代过程如下[] -&gt; 1 -&gt; [1][] [1] -&gt; 2 -&gt; [2] [1,2][] [1] [2] [1,2] -&gt; 3 -&gt; [3] [1,3] [2,3] [1,2,3][] [1] [2] [1,2] [3] [1,3] [2,3] [1,2,3]</code></pre><h5 id="解答："><a href="#解答：" class="headerlink" title="解答："></a>解答：</h5><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">subsets</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> result<span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> tmp<span class="token punctuation">;</span>        result<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> resLen <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> resLen<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span>                vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> tmp <span class="token operator">=</span> result<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                tmp<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                result<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
            <tag> 位运算 </tag>
            
            <tag> 回溯算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题：1.Two Sum</title>
      <link href="/2019/02/24/1-two-sum/"/>
      <url>/2019/02/24/1-two-sum/</url>
      
        <content type="html"><![CDATA[<h4 id="1-Two-Sum"><a href="#1-Two-Sum" class="headerlink" title="1. Two Sum"></a><a href="https://leetcode-cn.com/problems/two-sum/" target="_blank" rel="noopener">1. Two Sum</a></h4><p>Given an array of integers, return <strong>indices</strong> of the two numbers such that they add up to a specific target.<br>You may assume that each input would have <strong>exactly</strong> one solution, and you may not use the same element twice.</p><p><strong>Example:</strong></p><blockquote><p>Given nums = [2, 7, 11, 15], target = 9,</p><p>Because nums[0] + nums[1] = 2 + 7 = 9,<br>return [0, 1].</p></blockquote><h5 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h5><p>对数组进行遍历，将符合条件的数组元素返回；<br>另有高效率<strong>遍历哈希表法</strong>，待研究。</p><h5 id="解答："><a href="#解答：" class="headerlink" title="解答："></a>解答：</h5><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//暴力法：遍历整个数组，耗时较长（72ms）</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">twoSum</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span>     <span class="token punctuation">{</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> result<span class="token punctuation">;</span>        <span class="token keyword">int</span> size <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> complement <span class="token operator">=</span> target <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> complement<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    result<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                    result<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> result<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
            <tag> 哈希表 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
