<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>云中的Jason</title>
  
  <subtitle>云中的Jason</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.wenguang0816.top/"/>
  <updated>2020-04-09T03:46:38.932Z</updated>
  <id>http://blog.wenguang0816.top/</id>
  
  <author>
    <name>Jason</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>群晖Docker加速</title>
    <link href="http://blog.wenguang0816.top/2020/03/30/share/synology_docker_accelerate/"/>
    <id>http://blog.wenguang0816.top/2020/03/30/share/synology_docker_accelerate/</id>
    <published>2020-03-30T11:15:00.000Z</published>
    <updated>2020-04-09T03:46:38.932Z</updated>
    
    <content type="html"><![CDATA[<h1 id="群晖Docker镜像下载失败"><a href="#群晖Docker镜像下载失败" class="headerlink" title="群晖Docker镜像下载失败"></a>群晖Docker镜像下载失败</h1><p>群晖的套件中心虽然很强大，但是套件中心并不能完全满足我们的使用需求，好在群晖支持Docker容器技术，我们可以通过Docker来实现很多新的功能，而且Docker更容易备份。</p><p>但是在使用Docker是总是镜像下载失败，尝试很多次都是如此。<br><img src="https://gitee.com/wenguang0816/blogPic/raw/master/20200330-2.jpg" alt="下载失败"></p><h1 id="镜像加速"><a href="#镜像加速" class="headerlink" title="镜像加速"></a>镜像加速</h1><p>查阅网上资料，很多网友出现的问题都是镜像下载速度满，通过配置镜像加速就可以了，本着死马当活马医，所以进行尝试。</p><p>这里，我选择了Azure的公开镜像：<a href="https://dockerhub.azk8s.cn。操作步骤如下：" target="_blank" rel="noopener">https://dockerhub.azk8s.cn。操作步骤如下：</a></p><p>打开Docker，选择<code>注册表——&gt;设置</code><br><img src="https://gitee.com/wenguang0816/blogPic/raw/master/20200330-3.jpg" alt="Docker设置"></p><p>选择<code>Docker Hub</code>，然后进行编辑<br><img src="https://gitee.com/wenguang0816/blogPic/raw/master/20200330-4.jpg" alt="编辑存储库"></p><p>在编辑注册表界面中，勾选<code>启用注册表镜像</code>，在<code>注册表镜像URL</code>中填入镜像地址，最终确认即可。<br><img src="https://gitee.com/wenguang0816/blogPic/raw/master/20200330-5.jpg" alt="image.png"></p><p>通过这种方式，完美解决了镜像下载失败的问题，笔者本人使用了Azure的公开镜像，大家也可以尝试其他公开镜像加速地址（本人未尝试）：</p><blockquote><p>七牛云加速器: <a href="https://reg-mirror.qiniu.com/" target="_blank" rel="noopener">https://reg-mirror.qiniu.com</a></p><p>网易: <a href="http://hub-mirror.c.163.com/" target="_blank" rel="noopener">http://hub-mirror.c.163.com</a></p><p>华为云: <a href="https://05cec16ef1800f790fabc01198b68720.mirror.swr.myhuaweicloud.com/" target="_blank" rel="noopener">https://05cec16ef1800f790fabc01198b68720.mirror.swr.myhuaweicloud.com</a></p></blockquote><h4 id="参考博客："><a href="#参考博客：" class="headerlink" title="参考博客："></a>参考博客：</h4><p><a href="https://blog.holegots.com/2019/11/06/SynologyDockerSpeed/" target="_blank" rel="noopener">群晖 NAS Docker 容器镜像加速</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;群晖Docker镜像下载失败&quot;&gt;&lt;a href=&quot;#群晖Docker镜像下载失败&quot; class=&quot;headerlink&quot; title=&quot;群晖Docker镜像下载失败&quot;&gt;&lt;/a&gt;群晖Docker镜像下载失败&lt;/h1&gt;&lt;p&gt;群晖的套件中心虽然很强大，但是套件中心并不能
      
    
    </summary>
    
      <category term="分享" scheme="http://blog.wenguang0816.top/categories/%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="群晖" scheme="http://blog.wenguang0816.top/tags/%E7%BE%A4%E6%99%96/"/>
    
      <category term="Docker" scheme="http://blog.wenguang0816.top/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>替换空格</title>
    <link href="http://blog.wenguang0816.top/2020/02/01/sword_refers_to_offer/02_replacespace/"/>
    <id>http://blog.wenguang0816.top/2020/02/01/sword_refers_to_offer/02_replacespace/</id>
    <published>2020-02-01T18:20:00.000Z</published>
    <updated>2020-04-09T03:46:38.932Z</updated>
    
    <content type="html"><![CDATA[<h3 id="2-替换空格"><a href="#2-替换空格" class="headerlink" title="2. 替换空格"></a><a href="https://www.nowcoder.com/practice/4060ac7e3e404ad1a894ef3e17650423?tpId=13&tqId=11155&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking" target="_blank" rel="noopener">2. 替换空格</a></h3><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>请实现一个函数，将一个字符串中的每个空格替换成“%20”。例如，当字符串为We Are Happy.则经过替换之后的字符串为We%20Are%20Happy。</p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h3><p>首先统计字符串中的空格数量<code>numberOfBlank</code>，那么将字符串中的空格替换为<code>%20</code>后，字符串的长度应该为<code>indexNew = length + 2 * numberOfBlank - 1</code>，这样从后向前将原有字符串的字符依次向后移动，遇到空格则替换为<code>%20</code>。</p><h3 id="解答："><a href="#解答：" class="headerlink" title="解答："></a>解答：</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">replaceSpace</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">,</span><span class="token keyword">int</span> length<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>str <span class="token operator">==</span> <span class="token keyword">nullptr</span> <span class="token operator">||</span> length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 统计空格数量</span>        <span class="token keyword">int</span> numberOfBlank <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">' '</span><span class="token punctuation">)</span>                <span class="token operator">++</span>numberOfBlank<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> indexOriginal <span class="token operator">=</span> length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> indexNew <span class="token operator">=</span> length <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">*</span> numberOfBlank <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> indexOriginal<span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">' '</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                str<span class="token punctuation">[</span>indexNew<span class="token punctuation">]</span> <span class="token operator">=</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token operator">--</span>indexNew<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                str<span class="token punctuation">[</span>indexNew<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'0'</span><span class="token punctuation">;</span>                str<span class="token punctuation">[</span>indexNew<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'2'</span><span class="token punctuation">;</span>                str<span class="token punctuation">[</span>indexNew<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'%'</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;2-替换空格&quot;&gt;&lt;a href=&quot;#2-替换空格&quot; class=&quot;headerlink&quot; title=&quot;2. 替换空格&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.nowcoder.com/practice/4060ac7e3e404ad1a894ef3e
      
    
    </summary>
    
      <category term="剑指 offer" scheme="http://blog.wenguang0816.top/categories/%E5%89%91%E6%8C%87-offer/"/>
    
    
      <category term="数组" scheme="http://blog.wenguang0816.top/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>修改ubuntu用户名</title>
    <link href="http://blog.wenguang0816.top/2019/11/25/share/modify_ubuntu_username/"/>
    <id>http://blog.wenguang0816.top/2019/11/25/share/modify_ubuntu_username/</id>
    <published>2019-11-25T19:06:00.000Z</published>
    <updated>2020-04-09T03:46:38.932Z</updated>
    
    <content type="html"><![CDATA[<h3 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h3><p>从腾讯云申请的云服务器(ubuntu系统)的默认用户名为<code>ubuntu</code>，一般来说可以也接受，但是作为自己要使用的机器还是要有点个性化。通过网上的帖子，摸索了半天才修改完成，现在将自己的经验分享给大家。</p><h3 id="切换到root账户"><a href="#切换到root账户" class="headerlink" title="切换到root账户"></a>切换到root账户</h3><p>因为修改普通账户的用户名，所以建议切换到<code>root</code>用户，这样可以避免一些权限的问题和其他不必要的影响。新申请或安装的机器<code>root</code>用户是没有密码的，所以可以先为<code>root</code>账户设置密码：</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 如果设置了密码可跳过此步</span>ubuntu@VM-0-4-ubuntu:~$ <span class="token function">sudo</span> <span class="token function">passwd</span> root<span class="token comment" spellcheck="true"># 为用户修改密码也可以使用此命令</span></code></pre><p>然后切换到<code>root</code>用户(需要输入密码）：</p><pre class=" language-bash"><code class="language-bash">ubuntu@VM-0-4-ubuntu:~$ <span class="token function">su</span> rootPassword:root@VM-0-4-ubuntu:/home/ubuntu<span class="token comment" spellcheck="true">#</span></code></pre><h3 id="修改用户名"><a href="#修改用户名" class="headerlink" title="修改用户名"></a>修改用户名</h3><p>修改用户名我们需要进行四步操作：</p><h4 id="1-修改-etc-passwd文件-vim-etc-passwd"><a href="#1-修改-etc-passwd文件-vim-etc-passwd" class="headerlink" title="1.修改/etc/passwd文件: vim /etc/passwd"></a>1.修改<code>/etc/passwd</code>文件: <code>vim /etc/passwd</code></h4><pre><code>```bashubuntu:x:500:500::/home/ubuntu:/bin/bash# 把用户名ubuntu改成：你想要的用户名，其他都不要修改test:x:500:500::/home/test:/bin/bash# 打开文件后回发现很多内容，可以利用替换指令进行修改# :1,$s/ubuntu/test/g# 解释: 替换第 1 行开始到最后一行中每一行所有 ubuntu 为 test```</code></pre><p>最后输入<code>:wq!</code>保存退出</p><p><em>ps：这里网上有帖子说用<code>gedit</code>进行修改，不过在新申请或安装的机器中是没有<code>gedit</code>的，所以可以使用<code>vim/vi</code>来代替</em></p><h4 id="2-修改-etc-shadow文件-vim-etc-shadow"><a href="#2-修改-etc-shadow文件-vim-etc-shadow" class="headerlink" title="2.修改/etc/shadow文件: vim /etc/shadow"></a>2.修改<code>/etc/shadow</code>文件: <code>vim /etc/shadow</code></h4><pre class=" language-bash"><code class="language-bash">ubunt:<span class="token variable">$6</span><span class="token variable">$ULolz</span><span class="token punctuation">..</span>.EMVYj/:18222:0:99999:7:::<span class="token comment" spellcheck="true"># 把用户名ubuntu改成：你想要的用户名，其他都不要修改</span>test:<span class="token variable">$6</span><span class="token variable">$ULolz</span><span class="token punctuation">..</span>.EMVYj/:18222:0:99999:7:::</code></pre><h4 id="3-修改-etc-group文件-vim-etc-group"><a href="#3-修改-etc-group文件-vim-etc-group" class="headerlink" title="3.修改/etc/group文件: vim /etc/group"></a>3.修改<code>/etc/group</code>文件: <code>vim /etc/group</code></h4><pre class=" language-bash"><code class="language-bash">ubunt:x:1:root,bin,ubuntu<span class="token comment" spellcheck="true">#...</span><span class="token comment" spellcheck="true"># 这个文件中的原用户名有很多，可以使用第一步中提到的替换指令修改:</span>:1,<span class="token variable">$s</span>/ubuntu/test/g</code></pre><h4 id="4-修改用户目录"><a href="#4-修改用户目录" class="headerlink" title="4.修改用户目录"></a>4.修改用户目录</h4><pre class=" language-bash"><code class="language-bash"><span class="token function">mv</span> /home/ubuntu /home/test</code></pre><p>此时，我们就可以更改万用户名了，可以切换到新的用户名测试一下：</p><pre class=" language-bash"><code class="language-bash">root@VM-0-4-ubuntu:~$ <span class="token function">su</span> <span class="token function">test</span>test@VM-0-4-ubuntu:~$</code></pre><h4 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h4><p><a href="https://blog.csdn.net/zhaokx3/article/details/64127454" target="_blank" rel="noopener">CSDN: Ubuntu 修改用户名-OneDay-X</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;起因&quot;&gt;&lt;a href=&quot;#起因&quot; class=&quot;headerlink&quot; title=&quot;起因&quot;&gt;&lt;/a&gt;起因&lt;/h3&gt;&lt;p&gt;从腾讯云申请的云服务器(ubuntu系统)的默认用户名为&lt;code&gt;ubuntu&lt;/code&gt;，一般来说可以也接受，但是作为自己要使用的机器
      
    
    </summary>
    
      <category term="分享" scheme="http://blog.wenguang0816.top/categories/%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="ubuntu" scheme="http://blog.wenguang0816.top/tags/ubuntu/"/>
    
      <category term="命令行" scheme="http://blog.wenguang0816.top/tags/%E5%91%BD%E4%BB%A4%E8%A1%8C/"/>
    
      <category term="用户名" scheme="http://blog.wenguang0816.top/tags/%E7%94%A8%E6%88%B7%E5%90%8D/"/>
    
  </entry>
  
  <entry>
    <title>Mac终端oh-my-zsh配置</title>
    <link href="http://blog.wenguang0816.top/2019/10/10/environment/zsh_for_mac/"/>
    <id>http://blog.wenguang0816.top/2019/10/10/environment/zsh_for_mac/</id>
    <published>2019-10-10T15:00:00.000Z</published>
    <updated>2020-04-09T03:46:38.932Z</updated>
    
    <content type="html"><![CDATA[<h2 id="bash到zsh"><a href="#bash到zsh" class="headerlink" title="bash到zsh"></a>bash到zsh</h2><p>在今年金秋，苹果公司发布了macOS Catalina(10.15)，在迎来了一系列重大更新之后，macOS的默认shell也从<code>bash</code>变成了<code>zsh</code>。</p><p><em>PS：新版本macOS为我们带来了随航功能，可以将iPad变成mac的另一块屏幕，不过需要注意：随航功能只适用于能够使用Apple pencil的iPad以及2016年之后发布的mac产品，笔者手里的2015款 MacBook Pro只能看着眼馋了。</em></p><h2 id="oh-my-zsh"><a href="#oh-my-zsh" class="headerlink" title="oh-my-zsh"></a>oh-my-zsh</h2><p>zsh本身功能强大，但是对于普通用户来说不太友好，但是伟大的程序猿无处不在，国外一名程序猿就开发了一款能够让大家快速上手<code>zsh</code>的项目：<a href="https://github.com/robbyrussell/oh-my-zsh" target="_blank" rel="noopener">oh-my-zsh</a>，借助该项目，只需要极为简单的安装配置，就可以享用<code>zsh</code>了</p><h3 id="安装zsh"><a href="#安装zsh" class="headerlink" title="安装zsh"></a>安装zsh</h3><p>macOS Catalina中默认安装了<code>zsh</code>，如果你使用的macOS的其他版本并且想使用<code>zsh</code>的话，可以利用<code>homebrew</code>安装</p><ol><li><p>查看已安装的shell</p><pre class=" language-bash"><code class="language-bash"><span class="token function">cat</span> /etc/shells /bin/bash /bin/csh /bin/dash /bin/ksh /bin/sh /bin/tcsh</code></pre></li><li><p>使用homebrew安装zsh</p><pre class=" language-bash"><code class="language-bash">brew <span class="token function">install</span> zsh</code></pre></li><li><p>切换为zsh</p><pre class=" language-bash"><code class="language-bash">chsh -s /bin/zsh</code></pre></li><li><p>重启终端即可使用zsh</p></li></ol><h3 id="安装-oh-my-zsh"><a href="#安装-oh-my-zsh" class="headerlink" title="安装 oh-my-zsh"></a>安装 oh-my-zsh</h3><p>打开终端执行以下命令：</p><pre class=" language-bash"><code class="language-bash">sh -c <span class="token string">"<span class="token variable"><span class="token variable">$(</span>curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh<span class="token variable">)</span></span>"</span></code></pre><p>在执行该命令时，可能会遇到以下错误：</p><pre class=" language-bash"><code class="language-bash">xcrun: error: invalid active developer path <span class="token punctuation">(</span>/Library/Developer/CommandLineTools<span class="token punctuation">)</span>, missing xcrun at: /Library/Developer/CommandLineTools/usr/bin/xcrunError: <span class="token function">git</span> clone of oh-my-zsh repo failed</code></pre><p>可以执行以下命令之后，再执行一次安装命令(时间可能有点久T_T))：</p><pre class=" language-bash"><code class="language-bash">xcode-select --install</code></pre><p>当看到<code>oh my zsh</code>的标志，就代表安装成功了</p><h2 id="zsh配置"><a href="#zsh配置" class="headerlink" title="zsh配置"></a>zsh配置</h2><p>安装好oh-my-zsh，我们可以在<code>.zshrc</code>文件中进行自定义配置</p><pre class=" language-bash"><code class="language-bash">vim ~/.zshrc</code></pre><p>大家可以根据自己的使用习惯和喜好自行更改</p><h3 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h3><p>刚刚安装好的zsh可能是这样的：</p><p><img src="https://gitee.com/wenguang0816/blogPic/raw/master/20191010-2.jpg" alt></p><p><em>ps：这里的终端配色使用了<code>Solarized</code>主题，可以参见本人另一篇博客：<a href="https://blog.wenguang0816.top/2019/07/14/environment/beautify_terminal/">macOS终端、vim美化(Solarized主题)</a></em></p><p>如果大家想换一个主题呢，可以前往oh-my-zsh的<a href="https://github.com/robbyrussell/oh-my-zsh/wiki/Themes" target="_blank" rel="noopener">官方Wiki</a>查看主题的样式和呈现效果，然后将<code>.zshrc</code>文件中<code>ZSH_THEME</code>的值修改为对应的主题即可，我这里选择的<code>af-magic</code>:</p><pre class=" language-bash"><code class="language-bash">ZSH_THEME<span class="token operator">=</span><span class="token string">"af-magic"</span></code></pre><p>效果如下：<br><img src="https://gitee.com/wenguang0816/blogPic/raw/master/20191010-3.jpg" alt></p><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p>从bash转换到zsh后可能导致原来配置的一些工作环境无法正常使用，这是因为<code>bash</code>的环境变量配置在了<code>.bash_profile</code>中，当使用<code>zsh</code>时，要在<code>.zshrc</code>中配置环境变量，直接将<code>.bash_profile</code>中的环境变量拷贝到<code>.zshrc</code>即可。另外zsh可以配合很多插件来提高工作效率，留给大家去探索啦！</p><h4 id="参考博客："><a href="#参考博客：" class="headerlink" title="参考博客："></a>参考博客：</h4><ol><li><a href="https://sspai.com/post/55176" target="_blank" rel="noopener">让你的 Mac 提前用上 macOS Catalina 的 Shell——Oh My Zsh 配置指南</a></li><li><a href="https://www.jianshu.com/p/64344229778a" target="_blank" rel="noopener">Mac 终端 oh-my-zsh 配置</a></li><li><a href="https://www.jianshu.com/p/020f3d02f538" target="_blank" rel="noopener">(Mac)在bash和zsh配置环境变量path的几种方法</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;bash到zsh&quot;&gt;&lt;a href=&quot;#bash到zsh&quot; class=&quot;headerlink&quot; title=&quot;bash到zsh&quot;&gt;&lt;/a&gt;bash到zsh&lt;/h2&gt;&lt;p&gt;在今年金秋，苹果公司发布了macOS Catalina(10.15)，在迎来了一系列重大更新
      
    
    </summary>
    
      <category term="分享" scheme="http://blog.wenguang0816.top/categories/%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="macOS" scheme="http://blog.wenguang0816.top/tags/macOS/"/>
    
      <category term="终端美化" scheme="http://blog.wenguang0816.top/tags/%E7%BB%88%E7%AB%AF%E7%BE%8E%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>包含min函数的栈</title>
    <link href="http://blog.wenguang0816.top/2019/08/11/sword_refers_to_offer/20_min/"/>
    <id>http://blog.wenguang0816.top/2019/08/11/sword_refers_to_offer/20_min/</id>
    <published>2019-08-11T18:40:00.000Z</published>
    <updated>2020-04-09T03:46:38.932Z</updated>
    
    <content type="html"><![CDATA[<h3 id="20-包含min函数的栈"><a href="#20-包含min函数的栈" class="headerlink" title="20. 包含min函数的栈"></a><a href="https://www.nowcoder.com/practice/4c776177d2c04c2494f2555c9fcc1e49?tpId=13&tqId=11173&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking" target="_blank" rel="noopener">20. 包含min函数的栈</a></h3><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>定义栈的数据结构，请在该类型中实现一个能够得到栈中所含最小元素的min函数（时间复杂度应为O（1））。</p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h3><p>这道题我们需要创建两个栈，一个栈<code>base</code>来作为栈结构主体，个辅助栈<code>sMin</code>来记录入栈的最小值，根据题目接口，我们需要实现四个方法：</p><ol><li>void push(int value): 在每次入栈时，如果入栈值<code>value</code>小于<code>sMin</code>中的元素，则将<code>value</code>压栈到<code>sMin</code>，这样能够保证最小元素永远在<code>sMin</code>栈顶</li><li>void pop(): 如果出栈元素等于<code>sMin</code>栈顶元素时，<code>sMin</code>栈顶元素出栈</li><li>int top(): 返回栈<code>base</code>的栈顶元素</li><li>int min(): 返回栈<code>sMin</code>的栈顶元素</li></ol><p>笔者展示的代码只是简单的实现了题目要求的包含min函数的栈，并且通过了牛客网的测试用例。不过代码并不完整，比如在调用<code>pop()</code>方法时应该去判断<code>base</code>和<code>sMin</code>是否为空，如果为空应该抛出异常。有兴趣的读者可以进一步完善代码。</p><h3 id="解答："><a href="#解答：" class="headerlink" title="解答："></a>解答：</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        base<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>sMin<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            sMin<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>value <span class="token operator">&lt;</span> sMin<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            sMin<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>base<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> sMin<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            sMin<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        base<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>base<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> base<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token keyword">return</span> <span class="token number">0x7fffffff</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>sMin<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> sMin<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token keyword">return</span> <span class="token number">0x7fffffff</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">private</span><span class="token operator">:</span>    stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> base<span class="token punctuation">,</span> sMin<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;20-包含min函数的栈&quot;&gt;&lt;a href=&quot;#20-包含min函数的栈&quot; class=&quot;headerlink&quot; title=&quot;20. 包含min函数的栈&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.nowcoder.com/practice/4c7761
      
    
    </summary>
    
      <category term="剑指 offer" scheme="http://blog.wenguang0816.top/categories/%E5%89%91%E6%8C%87-offer/"/>
    
    
      <category term="栈" scheme="http://blog.wenguang0816.top/tags/%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>Numpy基础</title>
    <link href="http://blog.wenguang0816.top/2019/08/04/share/numpy/"/>
    <id>http://blog.wenguang0816.top/2019/08/04/share/numpy/</id>
    <published>2019-08-04T22:30:00.000Z</published>
    <updated>2020-04-09T03:46:38.932Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装Numpy"><a href="#安装Numpy" class="headerlink" title="安装Numpy"></a>安装Numpy</h2><pre class=" language-bash"><code class="language-bash">pip <span class="token function">install</span> numpy</code></pre><h2 id="导入Numpy"><a href="#导入Numpy" class="headerlink" title="导入Numpy"></a>导入Numpy</h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 导入numpy</span><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np</code></pre><h2 id="Numpy属性"><a href="#Numpy属性" class="headerlink" title="Numpy属性"></a>Numpy属性</h2><ul><li>ndim：纬度</li><li>shape：行数和列数</li><li>size：元素个数</li></ul><h2 id="Numpy创建array"><a href="#Numpy创建array" class="headerlink" title="Numpy创建array"></a>Numpy创建array</h2><h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><ul><li>array：创建数组</li><li>dtype：指定数据类型</li><li>zeros：创建数据全为0</li><li>ones：创建数据全为1</li><li>empty：创建数据接近于0</li><li>arange：按指定范围创建数据</li><li>linspace：创建线段</li></ul><h3 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h3><ol><li>指定数组<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 2维矩阵，2行3列</span>a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre></li><li>全零数组<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 2维矩阵，2行3列</span>a <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 数据全为0，3行4列</span><span class="token triple-quoted-string string">'''[[0. 0. 0. 0.][0. 0. 0. 0.][0. 0. 0. 0.]]'''</span></code></pre></li><li>全一数组<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 2维矩阵，2行3列</span>a <span class="token operator">=</span> np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype <span class="token operator">=</span> np<span class="token punctuation">.</span>int<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 数据全为1，3行4列，数据类型为int</span><span class="token triple-quoted-string string">'''[[0. 0. 0. 0.][0. 0. 0. 0.][0. 0. 0. 0.]]'''</span></code></pre></li><li>全空数组<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 2维矩阵，2行3列</span>a <span class="token operator">=</span> np<span class="token punctuation">.</span>empty<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 数据为empty，接近于0，3行4列</span><span class="token triple-quoted-string string">'''[[ 1.72723371e-077 -4.32976793e-311  2.96439388e-323  0.00000000e+000][ 0.00000000e+000  0.00000000e+000  0.00000000e+000  0.00000000e+000][ 0.00000000e+000  0.00000000e+000  0.00000000e+000  8.34402697e-309]]'''</span></code></pre></li><li>创建连续数组<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 2维矩阵，2行3列</span>a <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 10-19的数据，2步长</span><span class="token triple-quoted-string string">'''[10 12 14 16 18]'''</span></code></pre></li><li>用<code>reshape</code>改变数组形状<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 2维矩阵，2行3列</span>a <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 10-19的数据，2步长</span><span class="token triple-quoted-string string">'''[[ 0  1  2  3][ 4  5  6  7][ 8  9 10 11]]'''</span></code></pre></li><li>创建线段型数组<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 2维矩阵，2行3列</span>a <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 10-19的数据，2步长</span><span class="token triple-quoted-string string">'''[[ 1.          1.47368421  1.94736842  2.42105263][ 2.89473684  3.36842105  3.84210526  4.31578947][ 4.78947368  5.26315789  5.73684211  6.21052632][ 6.68421053  7.15789474  7.63157895  8.10526316][ 8.57894737  9.05263158  9.52631579 10.        ]]'''</span></code></pre></li></ol><h2 id="Numpy基础运算"><a href="#Numpy基础运算" class="headerlink" title="Numpy基础运算"></a>Numpy基础运算</h2><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">)</span>b <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span></code></pre><h3 id="加减乘除"><a href="#加减乘除" class="headerlink" title="加减乘除"></a>加减乘除</h3><pre class=" language-python"><code class="language-python">c <span class="token operator">=</span> a <span class="token operator">+</span> b <span class="token comment" spellcheck="true"># array([10, 21, 32, 43])</span>c <span class="token operator">=</span> a <span class="token operator">-</span> b <span class="token comment" spellcheck="true"># array([10, 19, 28, 37])</span>c <span class="token operator">=</span> a <span class="token operator">*</span> b <span class="token comment" spellcheck="true"># array([0, 20, 60, 120])</span>c <span class="token operator">=</span> a <span class="token operator">/</span> b <span class="token comment" spellcheck="true"># array([inf, 20, 15, 13.33333333])</span></code></pre><h3 id="函数运算"><a href="#函数运算" class="headerlink" title="函数运算"></a>函数运算</h3><pre class=" language-python"><code class="language-python">c <span class="token operator">=</span> b <span class="token operator">**</span> <span class="token number">2</span> <span class="token comment" spellcheck="true"># 乘方运算 array([0, 1, 4, 9])</span>c <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">*</span> np<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># sin函数 array([-5.44021111, 9.12945251, -9.88031624, 7.4511316 ])</span><span class="token keyword">print</span><span class="token punctuation">(</span>b <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 逻辑运算 array([ True, True, True, False])</span></code></pre><h3 id="矩阵运算"><a href="#矩阵运算" class="headerlink" title="矩阵运算"></a>矩阵运算</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 符合数学矩阵运算</span>a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>b <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>c_dot <span class="token operator">=</span> np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 另一种写法</span>c_dot_2 <span class="token operator">=</span> a<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>c_dot<span class="token punctuation">)</span><span class="token triple-quoted-string string">'''[[2 4] [2 3]]'''</span></code></pre><h3 id="sum、min、max"><a href="#sum、min、max" class="headerlink" title="sum、min、max"></a>sum、min、max</h3><p><code>sum()</code>对数组所有元素求和，<code>min()</code>寻找数组最小值，<code>max()</code>寻找数组最大值</p><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''[[ 0  1  2  3] [ 4  5  6  7] [ 8  9 10 11]]'''</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 数组所有元素求和</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>min<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 数组中的最小元素</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>max<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 数组中的最大元素</span><span class="token triple-quoted-string string">'''66011'''</span></code></pre><p>如果要对行或列单独操作，则可以为<code>axis</code>参数赋值，当<code>axis = 1</code>时，将会以行作为查找单元，<code>axis = 0</code>时，将会以列作为查找单元</p><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>a<span class="token punctuation">,</span> axis <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>min<span class="token punctuation">(</span>a<span class="token punctuation">,</span> axis <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>max<span class="token punctuation">(</span>a<span class="token punctuation">,</span> axis <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''[ 6 22 38][0 4 8][ 3  7 11]'''</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>a<span class="token punctuation">,</span> axis <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>min<span class="token punctuation">(</span>a<span class="token punctuation">,</span> axis <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>max<span class="token punctuation">(</span>a<span class="token punctuation">,</span> axis <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''[12 15 18 21][0 1 2 3][ 8  9 10 11]'''</span></code></pre><h3 id="其他运算"><a href="#其他运算" class="headerlink" title="其他运算"></a>其他运算</h3><ol><li><code>argmin()</code>返回矩阵中最小元素的索引，<code>argmax()</code>返回矩阵中最大元素的索引<pre class=" language-python"><code class="language-python"> a <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>argmin<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 最小元素的索引</span> <span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 最大元素的索引</span> <span class="token triple-quoted-string string">''' [[ 0  1  2  3] [ 4  5  6  7] [ 8  9 10 11]] 0 11 '''</span></code></pre></li><li><code>mean()</code>和<code>average()</code>返回矩阵的平均值<pre class=" language-python"><code class="language-python"> <span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 5.5</span> <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 另一种写法</span> <span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>average<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 5.5</span></code></pre></li><li><code>cumsum()</code>累加函数<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># cumsum()函数生成的每一项矩阵元素均是从原矩阵首项累加到对应项的元素之和</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>cumsum<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># [ 0  1  3  6 10 15 21 28 36 45 55 66]</span></code></pre></li><li><code>diff()</code>累差函数<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 该函数计算的是每一行中后一项与前一项之差，所以3x4的矩阵通过函数计算后得到3x3的矩阵</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>diff<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''[[1 1 1] [1 1 1] [1 1 1]]'''</span></code></pre></li><li>矩阵转置<pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>T<span class="token punctuation">)</span><span class="token triple-quoted-string string">'''[[ 0  4  8] [ 1  5  9] [ 2  6 10] [ 3  7 11]]'''</span></code></pre></li></ol><h2 id="Numpy索引"><a href="#Numpy索引" class="headerlink" title="Numpy索引"></a>Numpy索引</h2><h3 id="一维索引"><a href="#一维索引" class="headerlink" title="一维索引"></a>一维索引</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 和数组索引类似</span>a <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''[ 0  1  2  3  4  5  6  7  8  9 10 11]3'''</span>b <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token triple-quoted-string string">'''[[ 0  1  2  3] [ 4  5  6  7] [ 8  9 10 11]]'''</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 打印矩阵第1行（从0起算）</span><span class="token triple-quoted-string string">'''[4 5 6 7]'''</span></code></pre><h3 id="二维索引"><a href="#二维索引" class="headerlink" title="二维索引"></a>二维索引</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 和python二维list相似</span>b <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 另一种写法</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 同时支持切片处理</span><span class="token triple-quoted-string string">'''55[5 6]'''</span></code></pre><h3 id="行列遍历以及迭代"><a href="#行列遍历以及迭代" class="headerlink" title="行列遍历以及迭代"></a>行列遍历以及迭代</h3><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 按行遍历</span><span class="token keyword">for</span> row <span class="token keyword">in</span> a<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token triple-quoted-string string">'''[0 1 2 3][4 5 6 7][8 9 10 11]'''</span><span class="token comment" spellcheck="true"># 按列遍历：将矩阵转置后遍历行</span><span class="token keyword">for</span> column <span class="token keyword">in</span> a<span class="token punctuation">.</span>T<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>column<span class="token punctuation">)</span><span class="token triple-quoted-string string">'''[0 4 8][1 5 9][2 6 10][3 7 11]'''</span><span class="token comment" spellcheck="true"># 迭代</span><span class="token comment" spellcheck="true"># flatten()是一个展开性质的函数，将多维矩阵展开为1行数列</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>flatten<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''[ 0  1  2  3  4  5  6  7  8  9 10 11]'''</span><span class="token comment" spellcheck="true"># flat迭代器</span><span class="token keyword">for</span> item <span class="token keyword">in</span> a<span class="token punctuation">.</span>flat<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token triple-quoted-string string">'''12...11'''</span></code></pre><h2 id="array合并"><a href="#array合并" class="headerlink" title="array合并"></a>array合并</h2><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>b <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># vstack()将两个array上下合并，列数必须相同</span>c <span class="token operator">=</span> np<span class="token punctuation">.</span>vstack<span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token triple-quoted-string string">'''[[1 2 3] [4 5 6]]'''</span><span class="token comment" spellcheck="true"># hstack()将两个array左右合并，行数必须相同</span>d <span class="token operator">=</span> np<span class="token punctuation">.</span>hstack<span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token triple-quoted-string string">'''[1 2 3 4 5 6]'''</span><span class="token comment" spellcheck="true"># 对于a序列来说，其并不是矩阵，需要通过新的方式进行转置</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>np<span class="token punctuation">.</span>newaxis<span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''[[1 2 3]]'''</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>newaxis<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''[[1] [2] [3]]'''</span><span class="token comment" spellcheck="true"># 合并多个矩阵或序列时，使用concatenate()更方便</span>a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>newaxis<span class="token punctuation">]</span>b <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>newaxis<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># axis = 0纵向合并</span>c <span class="token operator">=</span> np<span class="token punctuation">.</span>concatenate<span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> b<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">,</span> axis <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token triple-quoted-string string">'''[[1] [2] [3] [4] [5] [6] [4] [5] [6] [1] [2] [3]]'''</span><span class="token comment" spellcheck="true"># axis = 1横向合并</span>d <span class="token operator">=</span> np<span class="token punctuation">.</span>concatenate<span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> b<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">,</span> axis <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token triple-quoted-string string">'''[[1 4 4 1] [2 5 5 2] [3 6 6 3]]'''</span></code></pre><h2 id="array分割"><a href="#array分割" class="headerlink" title="array分割"></a>array分割</h2><h3 id="纵向分割"><a href="#纵向分割" class="headerlink" title="纵向分割"></a>纵向分割</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 纵向分割，即按列分割，分割数量必须是列数的公约数（列数能整除分割数）</span>a <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 第二个参数为分割数量，第三个参数表示纵向分割(按列分割)</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>split<span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''[array([[0, 1],       [4, 5],       [8, 9]]), array([[ 2,  3],       [ 6,  7],       [10, 11]])]'''</span></code></pre><h3 id="横向分割"><a href="#横向分割" class="headerlink" title="横向分割"></a>横向分割</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 横向分割，即按行分割，分割数量必须是行数的公约数（行数能整除分割数）</span><span class="token comment" spellcheck="true"># 第二个参数为分割数量，第三个参数表示横向分割(按行分割)</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>split<span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''[array([[0, 1, 2, 3]]), array([[4, 5, 6, 7]]), array([[ 8,  9, 10, 11]])]'''</span></code></pre><h3 id="不等量分割"><a href="#不等量分割" class="headerlink" title="不等量分割"></a>不等量分割</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 将4列矩阵不等量分割为3个矩阵</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>array_split<span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''[array([[0, 1],       [4, 5],       [8, 9]]), array([[ 2],       [ 6],       [10]]), array([[ 3],       [ 7],       [11]])]'''</span></code></pre><h3 id="其他分割方式"><a href="#其他分割方式" class="headerlink" title="其他分割方式"></a>其他分割方式</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 横向分割</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>vsplit<span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 等同于print(np.split(a, 3, axis=0))</span><span class="token triple-quoted-string string">'''[array([[0, 1, 2, 3]]), array([[4, 5, 6, 7]]), array([[ 8,  9, 10, 11]])]'''</span><span class="token comment" spellcheck="true"># 纵向分割</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>hsplit<span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 等同于print(np.split(a, 2, axis=1))</span><span class="token triple-quoted-string string">'''[array([[0, 1],       [4, 5],       [8, 9]]), array([[ 2,  3],       [ 6,  7],       [10, 11]])]'''</span></code></pre><h2 id="浅拷贝和深拷贝"><a href="#浅拷贝和深拷贝" class="headerlink" title="浅拷贝和深拷贝"></a>浅拷贝和深拷贝</h2><h3 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h3><blockquote><p>拷贝了最外围的对象本身，内部的元素都只是拷贝了一个引用而已。也就是，把对象复制一遍，但是该对象中引用的其他对象不复制</p></blockquote><p><code>=</code>的赋值方式带有关联性</p><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>b <span class="token operator">=</span> ac <span class="token operator">=</span> b<span class="token comment" spellcheck="true"># a的值改变，b，c的值会同时改变</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">11</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token triple-quoted-string string">'''[11  1  2  3] [11  1  2  3] [11  1  2  3]'''</span></code></pre><h3 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h3><blockquote><p>外围和内部元素都进行了拷贝对象本身，而不是引用。也就是，把对象复制一遍，并且该对象中引用的其他对象也复制。</p></blockquote><p><code>copy()</code>的方式没有关联性</p><pre class=" language-python"><code class="language-python">d <span class="token operator">=</span> a<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># a的值改变，d的值不会改变</span>a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">44</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token triple-quoted-string string">'''[11  1  2  3][11  1  2 44][11  1  2  3]'''</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;安装Numpy&quot;&gt;&lt;a href=&quot;#安装Numpy&quot; class=&quot;headerlink&quot; title=&quot;安装Numpy&quot;&gt;&lt;/a&gt;安装Numpy&lt;/h2&gt;&lt;pre class=&quot; language-bash&quot;&gt;&lt;code class=&quot;language-bas
      
    
    </summary>
    
      <category term="分享" scheme="http://blog.wenguang0816.top/categories/%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="Numpy" scheme="http://blog.wenguang0816.top/tags/Numpy/"/>
    
  </entry>
  
  <entry>
    <title>平衡二叉树</title>
    <link href="http://blog.wenguang0816.top/2019/07/27/sword_refers_to_offer/39_isbalanced/"/>
    <id>http://blog.wenguang0816.top/2019/07/27/sword_refers_to_offer/39_isbalanced/</id>
    <published>2019-07-27T18:00:00.000Z</published>
    <updated>2020-04-09T03:46:38.932Z</updated>
    
    <content type="html"><![CDATA[<h3 id="39-平衡二叉树"><a href="#39-平衡二叉树" class="headerlink" title="39. 平衡二叉树"></a><a href="https://www.nowcoder.com/practice/8b3b95850edb4115918ecebdf1b4d222?tpId=13&tqId=11192&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking" target="_blank" rel="noopener">39. 平衡二叉树</a></h3><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>输入一棵二叉树，判断该二叉树是否是平衡二叉树。</p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h3><blockquote><p>平衡二叉树：Wiki:在计算机科学中，AVL树是最早被发明的自平衡二叉查找树。在AVL树中，任一节点对应的两棵子树的最大高度差为1，因此它也被称为高度平衡树。查找、插入和删除在平均和最坏情况下的时间复杂度都是O(logn)</p></blockquote><p>我们可以通过递归的方式来获取二叉树每个节点的左右子树的深度，然后比较左右子树的深度，如果二者深度差值大于<code>1</code>，则可以判定该二叉树不是平衡二叉树，反之，该树为平衡二叉树。</p><p>如果从上向下进行判断，则会导致判断上层节点时，需要多次判断其下层节点。所以我们采用从下向上的方式进行判断，如果某节点出现左右子树深度差大于<code>1</code>，则可判定该树不是平衡二叉树。</p><h3 id="解答："><a href="#解答：" class="headerlink" title="解答："></a>解答：</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">bool</span> <span class="token function">IsBalanced_Solution</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> pRoot<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">TreeDepth</span><span class="token punctuation">(</span>pRoot<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">TreeDepth</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> pRoot<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>pRoot <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> leftDepth <span class="token operator">=</span> <span class="token function">TreeDepth</span><span class="token punctuation">(</span>pRoot<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>leftDepth <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> rightDepth <span class="token operator">=</span> <span class="token function">TreeDepth</span><span class="token punctuation">(</span>pRoot<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>rightDepth <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 如果两子树深度差大于1，则该树不是平衡二叉树，返回-1做标志</span>        <span class="token keyword">return</span> <span class="token function">abs</span><span class="token punctuation">(</span>leftDepth <span class="token operator">-</span> rightDepth<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> <span class="token function">max</span><span class="token punctuation">(</span>leftDepth<span class="token punctuation">,</span> rightDepth<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;39-平衡二叉树&quot;&gt;&lt;a href=&quot;#39-平衡二叉树&quot; class=&quot;headerlink&quot; title=&quot;39. 平衡二叉树&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.nowcoder.com/practice/8b3b95850edb411591
      
    
    </summary>
    
      <category term="剑指 offer" scheme="http://blog.wenguang0816.top/categories/%E5%89%91%E6%8C%87-offer/"/>
    
    
      <category term="二叉树" scheme="http://blog.wenguang0816.top/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
      <category term="递归" scheme="http://blog.wenguang0816.top/tags/%E9%80%92%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>连续子数组的最大和</title>
    <link href="http://blog.wenguang0816.top/2019/07/25/sword_refers_to_offer/30_findgreatestsumofsubarray/"/>
    <id>http://blog.wenguang0816.top/2019/07/25/sword_refers_to_offer/30_findgreatestsumofsubarray/</id>
    <published>2019-07-25T20:00:00.000Z</published>
    <updated>2020-04-09T03:46:38.932Z</updated>
    
    <content type="html"><![CDATA[<h3 id="30-连续子数组的最大和"><a href="#30-连续子数组的最大和" class="headerlink" title="30. 连续子数组的最大和"></a><a href="https://www.nowcoder.com/practice/459bd355da1549fa8a49e350bf3df484?tpId=13&tqId=11183&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking" target="_blank" rel="noopener">30. 连续子数组的最大和</a></h3><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>HZ偶尔会拿些专业问题来忽悠那些非计算机专业的同学。今天测试组开完会后,他又发话了:在古老的一维模式识别中,常常需要计算连续子向量的最大和,当向量全为正数的时候,问题很好解决。但是,如果向量中包含负数,是否应该包含某个负数,并期望旁边的正数会弥补它呢？例如:{6,-3,-2,7,-15,1,2,2},连续子向量的最大和为8(从第0个开始,到第3个为止)。给一个数组，返回它的最大连续子序列的和，你会不会被他忽悠住？(子向量的长度至少是1)</p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h3><p>这里补充一个例子来帮助更好的理解题意：</p><blockquote><p>输入数组为{1, -2, 3, 10, -4, 7, 2, -5}，和最大的子数组为{3, 10, -4, 7, 2}，因此该子数组的和为<code>18</code>。(子数组并不需要从第一个开始，即不需要从<code>1</code>开始)</p></blockquote><p>我们可以运用动态规划的思想来解决这个问题。我们用<code>f(i)</code>来表示以数组中第<code>i</code>个元素结尾的子数组的最大和，那么我们可以得到以下公式：</p><pre class=" language-python"><code class="language-python">  f<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span>           <span class="token comment" spellcheck="true"># i = 0或者f(i-1) &lt; 0</span>  f<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">=</span> f<span class="token punctuation">(</span>i<span class="token number">-1</span><span class="token punctuation">)</span> <span class="token operator">+</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># i != 0并且f(i-1) >= 0</span></code></pre><p>  这个公式的含义为：当<code>f(i-1) &lt; 0</code>即以第<code>i-1</code>个元素为结尾的子数组的最大和小于<code>0</code>时，我们如果将这个小于<code>0</code>的和与<code>array[i]</code>相加，就会导致结果比<code>array[i]</code>要小，所以我们舍弃以第<code>i-1</code>为结尾的子数组和，取<code>f(i) = array[i]</code>。反之，如果<code>f(i-1) &gt;= 0</code>，我们取<code>f(i) = f(i-1) + array[i]</code></p><h3 id="解答："><a href="#解答：" class="headerlink" title="解答："></a>解答：</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">FindGreatestSumOfSubArray</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>len <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> tempsum <span class="token operator">=</span> array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            tempsum <span class="token operator">=</span> <span class="token punctuation">(</span>tempsum <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">:</span> tempsum <span class="token operator">+</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            sum <span class="token operator">=</span> <span class="token punctuation">(</span>tempsum <span class="token operator">></span> sum<span class="token punctuation">)</span> <span class="token operator">?</span> tempsum <span class="token operator">:</span> sum<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> sum<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;30-连续子数组的最大和&quot;&gt;&lt;a href=&quot;#30-连续子数组的最大和&quot; class=&quot;headerlink&quot; title=&quot;30. 连续子数组的最大和&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.nowcoder.com/practice/459bd3
      
    
    </summary>
    
      <category term="剑指 offer" scheme="http://blog.wenguang0816.top/categories/%E5%89%91%E6%8C%87-offer/"/>
    
    
      <category term="数组" scheme="http://blog.wenguang0816.top/tags/%E6%95%B0%E7%BB%84/"/>
    
      <category term="动态规划" scheme="http://blog.wenguang0816.top/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>不用加减乘除做加法</title>
    <link href="http://blog.wenguang0816.top/2019/07/22/sword_refers_to_offer/48_add/"/>
    <id>http://blog.wenguang0816.top/2019/07/22/sword_refers_to_offer/48_add/</id>
    <published>2019-07-22T22:48:00.000Z</published>
    <updated>2020-04-09T03:46:38.932Z</updated>
    
    <content type="html"><![CDATA[<h3 id="48-不用加减乘除做加法"><a href="#48-不用加减乘除做加法" class="headerlink" title="48. 不用加减乘除做加法"></a><a href="https://www.nowcoder.com/practice/59ac416b4b944300b617d4f7f111b215?tpId=13&tqId=11201&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking" target="_blank" rel="noopener">48. 不用加减乘除做加法</a></h3><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>写一个函数，求两个整数之和，要求在函数体内不得使用+、-、*、/四则运算符号。</p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h3><p>题目要求不得使用+、-、*、/四则运算，了解计算机CPU的物理实现或者数字电路的同学应该知道，计算机完成计算是通过门电路（与门、非门、与非门等等）进行二进制运算来实现我们人类认知的所有运算的。我们先观察一下十进制进行运算的过程。这里我们以<code>8+14=22</code>为例：</p><ol><li>只做各位相加不进位，此时相加的结果是<code>12</code>（个位数8和4相加不进位是2，十位相加结果是1）</li><li>做进位，8+4有进位，进位值为<code>10</code></li><li>将前两步的结果相加：<code>12+10</code>的结果为<code>22</code>，也就是8+14的结果。（重复1、2步骤）</li></ol><p>可以看出，十进制进行加法运算时，最终的结果 = 无进位加法 + 进位值。这个结论同样适用于二进制运算，同样以<code>8+14</code>即<code>1000 + 1110</code>为例：</p><ol><li>只做各位相加不进位，此时结果为<code>0110</code></li><li>做进位，两者相加进位值为<code>10000</code></li><li>将两步结果相加：<code>0110 + 10000 = 10110</code>转化为十进制为<code>22</code>（重复1、2步骤）</li></ol><p>我们来观察一下二进制运算1、2步的结果，<code>0110</code>是<code>1000 ^ 1110</code>的结果，<code>10000</code>是<code>1000 &amp; 1110</code>后左移一位的结果。这样我们只需要重复1、2步骤，直到没有进位为止，便可得到最终结果。</p><h3 id="解答："><a href="#解答：" class="headerlink" title="解答："></a>解答：</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// 方法1: while循环</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">int</span> num1<span class="token punctuation">,</span> <span class="token keyword">int</span> num2<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 最终的结果 = 无进位加法 + 进位值</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>num2 <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> temp <span class="token operator">=</span> num1 <span class="token operator">^</span> num2<span class="token punctuation">;</span>            num2 <span class="token operator">=</span> <span class="token punctuation">(</span>num1 <span class="token operator">&amp;</span> num2<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span>            num1 <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> num1<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 方法2: 递归实现</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">int</span> num1<span class="token punctuation">,</span> <span class="token keyword">int</span> num2<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 最终的结果 = 无进位加法 + 进位值</span>        <span class="token keyword">return</span> num2 <span class="token operator">?</span> <span class="token function">Add</span><span class="token punctuation">(</span>num1 <span class="token operator">^</span> num2<span class="token punctuation">,</span> <span class="token punctuation">(</span>num1 <span class="token operator">&amp;</span> num2<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">:</span> num1<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;48-不用加减乘除做加法&quot;&gt;&lt;a href=&quot;#48-不用加减乘除做加法&quot; class=&quot;headerlink&quot; title=&quot;48. 不用加减乘除做加法&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.nowcoder.com/practice/59ac41
      
    
    </summary>
    
      <category term="剑指 offer" scheme="http://blog.wenguang0816.top/categories/%E5%89%91%E6%8C%87-offer/"/>
    
    
      <category term="递归" scheme="http://blog.wenguang0816.top/tags/%E9%80%92%E5%BD%92/"/>
    
      <category term="逻辑运算" scheme="http://blog.wenguang0816.top/tags/%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>macOS终端、vim美化(Solarized主题)</title>
    <link href="http://blog.wenguang0816.top/2019/07/14/environment/beautify_terminal/"/>
    <id>http://blog.wenguang0816.top/2019/07/14/environment/beautify_terminal/</id>
    <published>2019-07-14T13:44:00.000Z</published>
    <updated>2020-04-09T03:46:38.932Z</updated>
    
    <content type="html"><![CDATA[<h2 id="优化原因"><a href="#优化原因" class="headerlink" title="优化原因"></a>优化原因</h2><p>macOS自带的终端一开始是不好看的（个人向），黑底白字。在操作的时候不美观也不高效，就像下面这样：<br><img src="https://gitee.com/wenguang0816/blogPic/raw/master/20190714-1.jpg" alt><br>所以本着好看的原则，对macOS的终端进行一波优化。优化后的效果见图：<br><img src="https://gitee.com/wenguang0816/blogPic/raw/master/20190714-2.jpg" alt></p><h2 id="优化方法"><a href="#优化方法" class="headerlink" title="优化方法"></a>优化方法</h2><p>这里优化用到的是Solarized主题<a href="https://github.com/altercation/solarized" target="_blank" rel="noopener">GitHub</a>。Solarized是目前最完整的 Terminal/Editor/IDE 配色项目，几乎覆盖所有主流操作系统（Mac OS X, Linux, Windows）、编辑器和 IDE（Vim, Emacs, Xcode, TextMate, NetBeans, Visual Studio 等），终端（iTerm2, Terminal.app, Putty 等）。让我们看一下Solarized主题在mac终端上的效果，主题氛围Dark和Light两种。<br><img src="https://gitee.com/wenguang0816/blogPic/raw/master/20190714-3.jpg" alt></p><h3 id="主题安装"><a href="#主题安装" class="headerlink" title="主题安装"></a>主题安装</h3><ol><li>主题可以通过两种方式获取</li></ol><ul><li>从<a href="https://github.com/altercation/solarized" target="_blank" rel="noopener">GitHub</a>仓库中的<code>release</code>中下载作者发布的压缩包</li><li>通过终端克隆仓库的方式进行获取<pre class=" language-bash"><code class="language-bash">  <span class="token comment" spellcheck="true"># 在终端输入</span>  <span class="token function">git</span> clone git://github.com/altercation/solarized.git</code></pre></li></ul><ol start="2"><li>下载好主题后，从下载的文件中找到<code>osx-terminal.app-colors-solarized</code>文件夹，文件内容如图所示：<br><img src="https://gitee.com/wenguang0816/blogPic/raw/master/20190714-4.jpg" alt><br>文件中有Dark和Light两种主题，读者可以根据上文中的效果图选择安装（双击即可）。<em>在安装中可能会遇到安全提示，在<code>系统偏好设置\安全性与隐私</code>中允许即可。</em></li><li>打开终端，进入<code>偏好设置</code>便可以在<code>描述文件</code>中看到新安装的主题了，将新安装的主题设置为<strong>默认</strong>。并在<code>通用</code>设置为启动时打开刚才设置为默认的描述文件。<br><img src="https://gitee.com/wenguang0816/blogPic/raw/master/20190714-5.jpg" alt><br><img src="https://gitee.com/wenguang0816/blogPic/raw/master/20190714-6.jpg" alt><br>现在主题就安装好了。</li></ol><h3 id="vim配置"><a href="#vim配置" class="headerlink" title="vim配置"></a>vim配置</h3><ol><li>将Solarized主题的vim文件拷贝到系统的vim目录<pre class=" language-bash"><code class="language-bash"> <span class="token function">cd</span> solarized <span class="token function">cd</span> vim-colors-solarized/colors <span class="token function">mkdir</span> -p ~/.vim/colors <span class="token function">cp</span> solarized.vim ~/.vim/colors/</code></pre></li><li>修改vim设置:<code>vim ~/.vimrc</code>，在该文件中添加一下内容<pre class=" language-bash"><code class="language-bash"> syntax on <span class="token keyword">set</span> background<span class="token operator">=</span>dark <span class="token comment" spellcheck="true"># 背景为dark，也可选light</span> colorscheme solarized</code></pre>修改后如图所示：（版本不同，效果可能有所不同）<br><img src="https://gitee.com/wenguang0816/blogPic/raw/master/20190714-7.jpg" alt></li></ol><h3 id="高亮"><a href="#高亮" class="headerlink" title="高亮"></a>高亮</h3><p>安装Solarized主题后，终端中执行<code>ls</code>等命令时，文件都是同一个颜色，没有高亮，可以在<code>.bash_profile</code>中添加一下设置</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># vim ~/.bash_profile</span><span class="token function">export</span> GREP_OPTIONS<span class="token operator">=</span><span class="token string">'--color=auto'</span><span class="token function">export</span> TERM<span class="token operator">=</span><span class="token string">"xterm-color"</span>PS1<span class="token operator">=</span><span class="token string">'\[\e[0;33m\]\u\[\e[0m\]@\[\e[0;32m\]\h\[\e[0m\]:\[\e[0;34m\]\w\[\e[0m\]\$ '</span></code></pre><p>设置后如图所示：<br><img src="https://gitee.com/wenguang0816/blogPic/raw/master/20190714-8.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;优化原因&quot;&gt;&lt;a href=&quot;#优化原因&quot; class=&quot;headerlink&quot; title=&quot;优化原因&quot;&gt;&lt;/a&gt;优化原因&lt;/h2&gt;&lt;p&gt;macOS自带的终端一开始是不好看的（个人向），黑底白字。在操作的时候不美观也不高效，就像下面这样：&lt;br&gt;&lt;img src
      
    
    </summary>
    
      <category term="分享" scheme="http://blog.wenguang0816.top/categories/%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="macOS" scheme="http://blog.wenguang0816.top/tags/macOS/"/>
    
      <category term="终端美化" scheme="http://blog.wenguang0816.top/tags/%E7%BB%88%E7%AB%AF%E7%BE%8E%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>二叉树的创建和遍历</title>
    <link href="http://blog.wenguang0816.top/2019/05/11/dsa/create_and_traveral_bitree/"/>
    <id>http://blog.wenguang0816.top/2019/05/11/dsa/create_and_traveral_bitree/</id>
    <published>2019-05-11T00:00:00.000Z</published>
    <updated>2020-04-09T03:46:38.932Z</updated>
    
    <content type="html"><![CDATA[<h2 id="二叉树相关概念"><a href="#二叉树相关概念" class="headerlink" title="二叉树相关概念"></a>二叉树相关概念</h2><p>二叉树是一种常见的数据结构，二叉树的每个节点<strong>最多有2个</strong>孩子节点</p><h3 id="二叉树形式"><a href="#二叉树形式" class="headerlink" title="二叉树形式"></a>二叉树形式</h3><ol><li><p>满二叉树</p><blockquote><p>一个二叉树的所有非叶子节点都存在左右孩子，并且所有叶子节点都在同意层级上，则该树为满二叉树<br><img src="https://gitee.com/wenguang0816/blogPic/raw/master/20190511-2.jpg" alt="满二叉树"></p></blockquote></li><li><p>完全二叉树</p><blockquote><p>对一个有n个节点的二叉树，按层级顺序编号，则所有节点的编号从1到n。如果这个树所有的节点和同样深度的满二叉树的编号从1到n的节点位置相同，则这个二叉树为完全二叉树<br><img src="https://gitee.com/wenguang0816/blogPic/raw/master/20190511-3.jpg" alt="完全二叉树"></p></blockquote></li></ol><h3 id="二叉树存储方式"><a href="#二叉树存储方式" class="headerlink" title="二叉树存储方式"></a>二叉树存储方式</h3><ol><li>链式存储<blockquote><p> <img src="https://gitee.com/wenguang0816/blogPic/raw/master/20190511-4.jpg" alt="链式存储"></p></blockquote></li><li>数组存储<blockquote><p> <img src="https://gitee.com/wenguang0816/blogPic/raw/master/20190511-5.jpg" alt="数组存储"><br>在数组存储中，如果父节点下标为<code>parent</code>， 那么他的左孩子节点下标为<code>2 * parent + 1</code>，右孩子节点下标为<code>2 * parent + 2</code>。</p></blockquote></li></ol><h2 id="二叉树的遍历"><a href="#二叉树的遍历" class="headerlink" title="二叉树的遍历"></a>二叉树的遍历</h2><p>二叉树遍历分为两个大类：深度优先遍历（DFS）和广度优先遍历（BFS）<br>以下树为例来讲述不同方式的遍历顺序</p><pre><code>        实例二叉树            3           /  \          2    8         / \    \        9  10   11</code></pre><h3 id="深度优先遍历"><a href="#深度优先遍历" class="headerlink" title="深度优先遍历"></a>深度优先遍历</h3><ol><li><p>前序遍历（先序遍历）</p><blockquote><p>二叉树前序遍历的输出顺序为：根节点、左节点、右节点</p></blockquote><p> 则上例二叉树的前序遍历顺序为：<code>3 -&gt; 2 -&gt; 9 -&gt; 10 -&gt; 8 -&gt; 11</code></p></li><li><p>中序遍历</p><blockquote><p>二叉树中序遍历的输出顺序为：左节点、根节点、右节点</p></blockquote><p> 则上例二叉树的中序遍历顺序为：<code>9 -&gt; 2 -&gt; 10 -&gt; 3 -&gt; 8 -&gt; 11</code></p></li><li><p>后序遍历</p><blockquote><p>二叉树后序遍历的输出顺序为：左节点、右节点、根节点</p></blockquote><p> 则上例二叉树的中序遍历顺序为：<code>9 -&gt; 10 -&gt; 2 -&gt; 11 -&gt; 8 -&gt; 3</code></p></li></ol><p><strong>中序遍历和前序遍历或者中序遍历和后序遍历可以唯一确定一棵二叉树</strong></p><h3 id="广度优先遍历"><a href="#广度优先遍历" class="headerlink" title="广度优先遍历"></a>广度优先遍历</h3><ol><li><p>层序遍历</p><blockquote><p>按照从根节点到叶子节点的层次关系，一层一层横向遍历各个节点</p></blockquote><p> 则上例二叉树的层序遍历顺序为：<code>3 -&gt; 2 -&gt; 8 -&gt; 9 -&gt; 10 -&gt; 11</code></p></li></ol><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;queue></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">struct</span> TreeNode<span class="token punctuation">{</span>    <span class="token keyword">int</span> val<span class="token punctuation">;</span>    <span class="token keyword">struct</span> TreeNode <span class="token operator">*</span>left<span class="token punctuation">;</span>    <span class="token keyword">struct</span> TreeNode <span class="token operator">*</span>right<span class="token punctuation">;</span>    <span class="token function">TreeNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">val</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">left</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">right</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">BinaryTree</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token comment" spellcheck="true">// 前序遍历创建二叉树</span>    TreeNode<span class="token operator">*</span> <span class="token function">createBinaryTree_1</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">&amp;</span>array<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 层序遍历创建二叉树</span>    TreeNode<span class="token operator">*</span> <span class="token function">createBinaryTree_2</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">&amp;</span>array<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 前序遍历</span>    <span class="token keyword">void</span> <span class="token function">preOrderTraveral</span><span class="token punctuation">(</span>TreeNode <span class="token operator">*</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 中序遍历</span>    <span class="token keyword">void</span> <span class="token function">inOrderTraveral</span><span class="token punctuation">(</span>TreeNode <span class="token operator">*</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 后序遍历</span>    <span class="token keyword">void</span> <span class="token function">postOrderTraveral</span><span class="token punctuation">(</span>TreeNode <span class="token operator">*</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 层序遍历</span>    <span class="token keyword">void</span> <span class="token function">levelOrderTraveral</span><span class="token punctuation">(</span>TreeNode <span class="token operator">*</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 二叉树深度</span>    <span class="token keyword">int</span> <span class="token function">TreeDepth</span><span class="token punctuation">(</span>TreeNode <span class="token operator">*</span>pRoot<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//前序遍历顺序创建二叉树</span>TreeNode<span class="token operator">*</span> BinaryTree<span class="token operator">::</span><span class="token function">createBinaryTree_1</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">&amp;</span>array<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> index<span class="token punctuation">)</span><span class="token punctuation">{</span>    TreeNode <span class="token operator">*</span>node <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">&lt;</span> len <span class="token operator">&amp;&amp;</span> array<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">TreeNode</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        node<span class="token operator">-</span><span class="token operator">></span>left <span class="token operator">=</span> <span class="token function">createBinaryTree_1</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> len<span class="token punctuation">,</span> <span class="token operator">++</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        node<span class="token operator">-</span><span class="token operator">></span>right <span class="token operator">=</span> <span class="token function">createBinaryTree_1</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> len<span class="token punctuation">,</span> <span class="token operator">++</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> node<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 层序遍历创建二叉树</span>TreeNode<span class="token operator">*</span> BinaryTree<span class="token operator">::</span><span class="token function">createBinaryTree_2</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">&amp;</span>array<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">{</span>    TreeNode <span class="token operator">*</span>node <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">&lt;</span> len <span class="token operator">&amp;&amp;</span> array<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">TreeNode</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        node<span class="token operator">-</span><span class="token operator">></span>left <span class="token operator">=</span> <span class="token function">createBinaryTree_2</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> len<span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        node<span class="token operator">-</span><span class="token operator">></span>right <span class="token operator">=</span> <span class="token function">createBinaryTree_2</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> len<span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> index <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> node<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 前序遍历</span><span class="token keyword">void</span> BinaryTree<span class="token operator">::</span><span class="token function">preOrderTraveral</span><span class="token punctuation">(</span>TreeNode <span class="token operator">*</span>node<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> node<span class="token operator">-</span><span class="token operator">></span>val <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token function">preOrderTraveral</span><span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">preOrderTraveral</span><span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 中序遍历</span><span class="token keyword">void</span> BinaryTree<span class="token operator">::</span><span class="token function">inOrderTraveral</span><span class="token punctuation">(</span>TreeNode <span class="token operator">*</span>node<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token function">inOrderTraveral</span><span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> node<span class="token operator">-</span><span class="token operator">></span>val <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token function">inOrderTraveral</span><span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 后序遍历</span><span class="token keyword">void</span> BinaryTree<span class="token operator">::</span><span class="token function">postOrderTraveral</span><span class="token punctuation">(</span>TreeNode <span class="token operator">*</span>node<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token function">postOrderTraveral</span><span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">postOrderTraveral</span><span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> node<span class="token operator">-</span><span class="token operator">></span>val <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 层序遍历</span><span class="token comment" spellcheck="true">// 层序遍历需要借助队列来实现</span><span class="token keyword">void</span> BinaryTree<span class="token operator">::</span><span class="token function">levelOrderTraveral</span><span class="token punctuation">(</span>TreeNode <span class="token operator">*</span>node<span class="token punctuation">)</span><span class="token punctuation">{</span>    queue<span class="token operator">&lt;</span>TreeNode <span class="token operator">*</span><span class="token operator">></span> qTreeNode<span class="token punctuation">;</span>    qTreeNode<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>qTreeNode<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        TreeNode <span class="token operator">*</span>pNode <span class="token operator">=</span> qTreeNode<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        qTreeNode<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> pNode<span class="token operator">-</span><span class="token operator">></span>val <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>pNode<span class="token operator">-</span><span class="token operator">></span>left <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>            qTreeNode<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>pNode<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>pNode<span class="token operator">-</span><span class="token operator">></span>right <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>            qTreeNode<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>pNode<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 二叉树深度</span><span class="token keyword">int</span> BinaryTree<span class="token operator">::</span><span class="token function">TreeDepth</span><span class="token punctuation">(</span>TreeNode <span class="token operator">*</span>pRoot<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>pRoot<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token function">TreeDepth</span><span class="token punctuation">(</span>pRoot<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">TreeDepth</span><span class="token punctuation">(</span>pRoot<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// -1 代表节点为空</span>    <span class="token comment" spellcheck="true">// 按前序遍历顺序创建二叉树，并且遍历</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> array_1 <span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> len_1 <span class="token operator">=</span> array_1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    BinaryTree biTree<span class="token punctuation">;</span>    <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    TreeNode <span class="token operator">*</span>root_1 <span class="token operator">=</span> biTree<span class="token punctuation">.</span><span class="token function">createBinaryTree_1</span><span class="token punctuation">(</span>array_1<span class="token punctuation">,</span> len_1<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"PreOrderTraveral: "</span><span class="token punctuation">;</span>    biTree<span class="token punctuation">.</span><span class="token function">preOrderTraveral</span><span class="token punctuation">(</span>root_1<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"InOrderTraveral: "</span><span class="token punctuation">;</span>    biTree<span class="token punctuation">.</span><span class="token function">inOrderTraveral</span><span class="token punctuation">(</span>root_1<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"PostOrderTraveral: "</span><span class="token punctuation">;</span>    biTree<span class="token punctuation">.</span><span class="token function">postOrderTraveral</span><span class="token punctuation">(</span>root_1<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"LevelOrderTraveral: "</span><span class="token punctuation">;</span>    biTree<span class="token punctuation">.</span><span class="token function">levelOrderTraveral</span><span class="token punctuation">(</span>root_1<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Tree_1's depth is: "</span> <span class="token operator">&lt;&lt;</span> biTree<span class="token punctuation">.</span><span class="token function">TreeDepth</span><span class="token punctuation">(</span>root_1<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 按层序遍历顺序创建二叉树，并且遍历</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> array_2 <span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> len_2 <span class="token operator">=</span> array_2<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    TreeNode <span class="token operator">*</span>root_2 <span class="token operator">=</span> biTree<span class="token punctuation">.</span><span class="token function">createBinaryTree_2</span><span class="token punctuation">(</span>array_2<span class="token punctuation">,</span> len_2<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"PreOrderTraveral: "</span><span class="token punctuation">;</span>    biTree<span class="token punctuation">.</span><span class="token function">preOrderTraveral</span><span class="token punctuation">(</span>root_2<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"InOrderTraveral: "</span><span class="token punctuation">;</span>    biTree<span class="token punctuation">.</span><span class="token function">inOrderTraveral</span><span class="token punctuation">(</span>root_2<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"PostOrderTraveral: "</span><span class="token punctuation">;</span>    biTree<span class="token punctuation">.</span><span class="token function">postOrderTraveral</span><span class="token punctuation">(</span>root_2<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"LevelOrderTraveral: "</span><span class="token punctuation">;</span>    biTree<span class="token punctuation">.</span><span class="token function">levelOrderTraveral</span><span class="token punctuation">(</span>root_2<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Tree_2's depth is: "</span> <span class="token operator">&lt;&lt;</span> biTree<span class="token punctuation">.</span><span class="token function">TreeDepth</span><span class="token punctuation">(</span>root_2<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>致谢：</strong>本文部分文字和图片引自<strong>程序员小灰</strong>的新书<strong>漫画算法</strong>，为表感谢，特附上程序员小灰公众号二维码，大家快扫码学习新知识哈！<br><img src="https://gitee.com/wenguang0816/blogPic/raw/master/20190511-6.jpg" alt="程序员小灰"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;二叉树相关概念&quot;&gt;&lt;a href=&quot;#二叉树相关概念&quot; class=&quot;headerlink&quot; title=&quot;二叉树相关概念&quot;&gt;&lt;/a&gt;二叉树相关概念&lt;/h2&gt;&lt;p&gt;二叉树是一种常见的数据结构，二叉树的每个节点&lt;strong&gt;最多有2个&lt;/strong&gt;孩子节点&lt;/
      
    
    </summary>
    
      <category term="分享" scheme="http://blog.wenguang0816.top/categories/%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="数据结构" scheme="http://blog.wenguang0816.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="二叉树" scheme="http://blog.wenguang0816.top/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>链表中环的入口节点</title>
    <link href="http://blog.wenguang0816.top/2019/04/23/sword_refers_to_offer/55_entrynodeofloop/"/>
    <id>http://blog.wenguang0816.top/2019/04/23/sword_refers_to_offer/55_entrynodeofloop/</id>
    <published>2019-04-23T19:30:00.000Z</published>
    <updated>2020-04-09T03:46:38.932Z</updated>
    
    <content type="html"><![CDATA[<h3 id="55-链表中环的入口节点"><a href="#55-链表中环的入口节点" class="headerlink" title="55. 链表中环的入口节点"></a><a href="https://www.nowcoder.com/practice/253d2c59ec3e4bc68da16833f79a38e4?tpId=13&tqId=11208&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking" target="_blank" rel="noopener">55. 链表中环的入口节点</a></h3><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给一个链表，若其中包含环，请找出该链表的环的入口结点，否则，输出nullptr。</p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h3><ul><li>确定是否有环：定义两个指针，同时从链表头节点出发，慢指针每次走一步，快指针每次走两步，如果快指针追上了慢指针，那么链表中有环，如果快指针走到了链表末尾都没有追上慢指针，那么链表中没有环</li><li>找到入口节点：<ul><li>确定环内节点数目：快指针与慢指针相遇肯定位于环内，可以记录该相遇节点，然后从该节点出发，当再次回到这个节点经过了<code>k</code>个节点，即环内节点数目为<code>k</code></li><li>定义两个指针P1和P2指向链表的头节点，如果环内有<code>k</code>个节点，那么P1先在链表上向前移动<code>k</code>步，然后两个指针以相同的速度向前移动。当P2指向入环节点时，P1已经绕环一周，重新回到入口节点</li></ul></li></ul><p>异常处理：</p><ol><li>输入为空指针</li><li>链表无环</li><li>链表只有一个节点</li></ol><h3 id="解答："><a href="#解答：" class="headerlink" title="解答："></a>解答：</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*struct ListNode {    int val;    struct ListNode *next;    ListNode(int x) :        val(x), next(nullptr) {    }};*/</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    ListNode<span class="token operator">*</span> <span class="token function">MeetingNode</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> pHead<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>pHead <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>        ListNode<span class="token operator">*</span> pSlow <span class="token operator">=</span> pHead<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>pSlow <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>        ListNode<span class="token operator">*</span> pFast <span class="token operator">=</span> pSlow<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>pFast <span class="token operator">!=</span> <span class="token keyword">nullptr</span> <span class="token operator">&amp;&amp;</span> pSlow <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>pFast <span class="token operator">==</span> pSlow<span class="token punctuation">)</span>                <span class="token keyword">return</span> pFast<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// pSlow走一步</span>            pSlow <span class="token operator">=</span> pSlow<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// pFast走两步</span>            pFast <span class="token operator">=</span> pFast<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>pFast <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>                pFast <span class="token operator">=</span> pFast<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 不存在环</span>        <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">public</span><span class="token operator">:</span>    ListNode<span class="token operator">*</span> <span class="token function">EntryNodeOfLoop</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> pHead<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        ListNode<span class="token operator">*</span> meetingNode <span class="token operator">=</span> <span class="token function">MeetingNode</span><span class="token punctuation">(</span>pHead<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>meetingNode <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取环中节点的数目</span>        <span class="token keyword">int</span> nodesInLoop <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        ListNode<span class="token operator">*</span> pNode1 <span class="token operator">=</span> meetingNode<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>pNode1<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">!=</span> meetingNode<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            pNode1 <span class="token operator">=</span> pNode1<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>            <span class="token operator">++</span>nodesInLoop<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 先移动pNode1，次数为环中节点的数目</span>        pNode1 <span class="token operator">=</span> pHead<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nodesInLoop<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>            pNode1 <span class="token operator">=</span> pNode1<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 再移动pNode1和pNode2</span>        ListNode<span class="token operator">*</span> pNode2 <span class="token operator">=</span> pHead<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>pNode1 <span class="token operator">!=</span> pNode2<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            pNode1 <span class="token operator">=</span> pNode1<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>            pNode2 <span class="token operator">=</span> pNode2<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> pNode1<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;55-链表中环的入口节点&quot;&gt;&lt;a href=&quot;#55-链表中环的入口节点&quot; class=&quot;headerlink&quot; title=&quot;55. 链表中环的入口节点&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.nowcoder.com/practice/253d2c
      
    
    </summary>
    
      <category term="剑指 offer" scheme="http://blog.wenguang0816.top/categories/%E5%89%91%E6%8C%87-offer/"/>
    
    
      <category term="链表" scheme="http://blog.wenguang0816.top/tags/%E9%93%BE%E8%A1%A8/"/>
    
      <category term="鲁棒性" scheme="http://blog.wenguang0816.top/tags/%E9%B2%81%E6%A3%92%E6%80%A7/"/>
    
  </entry>
  
  <entry>
    <title>链表中倒数第k个节点</title>
    <link href="http://blog.wenguang0816.top/2019/04/23/sword_refers_to_offer/14_findkthtotail/"/>
    <id>http://blog.wenguang0816.top/2019/04/23/sword_refers_to_offer/14_findkthtotail/</id>
    <published>2019-04-23T19:00:00.000Z</published>
    <updated>2020-04-09T03:46:38.932Z</updated>
    
    <content type="html"><![CDATA[<h3 id="14-链表中倒数第k个节点"><a href="#14-链表中倒数第k个节点" class="headerlink" title="14. 链表中倒数第k个节点"></a><a href="https://www.nowcoder.com/practice/529d3ae5a407492994ad2a246518148a?tpId=13&tqId=11167&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking" target="_blank" rel="noopener">14. 链表中倒数第k个节点</a></h3><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>输入一个链表，输出该链表中倒数第k个结点。</p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h3><ul><li>定义两个指针，第一个指针从链表头部开始遍历至第<code>k-1</code>个节点，第二个指针保持不懂；</li><li>第二个指针指向链表头部，然后两个指针同时向后遍历，由于两个指针的距离始终保持<code>k-1</code>，所以当第一个指针到达链表的尾节点是，第二个指针正好指向倒数第<code>k</code>个节点</li></ul><p>异常处理：</p><ol><li>输入为空指针</li><li>链表节点数小于k</li><li>k为0</li></ol><h3 id="解答："><a href="#解答：" class="headerlink" title="解答："></a>解答：</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*struct ListNode {    int val;    struct ListNode *next;    ListNode(int x) :            val(x), next(nullptr) {    }};*/</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    ListNode<span class="token operator">*</span> <span class="token function">FindKthToTail</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> pListHead<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>pListHead <span class="token operator">==</span> <span class="token keyword">nullptr</span> <span class="token operator">||</span> k <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>        ListNode<span class="token operator">*</span> pAhead <span class="token operator">=</span> pListHead<span class="token punctuation">;</span>        ListNode<span class="token operator">*</span> pBehind <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>pAhead<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>                pAhead <span class="token operator">=</span> pAhead<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>            <span class="token keyword">else</span>                <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        pBehind <span class="token operator">=</span> pListHead<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>pAhead<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            pAhead <span class="token operator">=</span> pAhead<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>            pBehind <span class="token operator">=</span> pBehind<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> pBehind<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;14-链表中倒数第k个节点&quot;&gt;&lt;a href=&quot;#14-链表中倒数第k个节点&quot; class=&quot;headerlink&quot; title=&quot;14. 链表中倒数第k个节点&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.nowcoder.com/practice/529
      
    
    </summary>
    
      <category term="剑指 offer" scheme="http://blog.wenguang0816.top/categories/%E5%89%91%E6%8C%87-offer/"/>
    
    
      <category term="链表" scheme="http://blog.wenguang0816.top/tags/%E9%93%BE%E8%A1%A8/"/>
    
      <category term="鲁棒性" scheme="http://blog.wenguang0816.top/tags/%E9%B2%81%E6%A3%92%E6%80%A7/"/>
    
  </entry>
  
  <entry>
    <title>左旋转字符串</title>
    <link href="http://blog.wenguang0816.top/2019/04/21/sword_refers_to_offer/43_leftrotatestring/"/>
    <id>http://blog.wenguang0816.top/2019/04/21/sword_refers_to_offer/43_leftrotatestring/</id>
    <published>2019-04-21T18:23:00.000Z</published>
    <updated>2020-04-09T03:46:38.932Z</updated>
    
    <content type="html"><![CDATA[<h3 id="43-左旋转字符串"><a href="#43-左旋转字符串" class="headerlink" title="43. 左旋转字符串"></a><a href="https://www.nowcoder.com/practice/12d959b108cb42b1ab72cef4d36af5ec?tpId=13&tqId=11196&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking" target="_blank" rel="noopener">43. 左旋转字符串</a></h3><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>汇编语言中有一种移位指令叫做循环左移（ROL），现在有个简单的任务，就是用字符串模拟这个指令的运算结果。对于一个给定的字符序列S，请你把其循环左移K位后的序列输出。例如，字符序列S=”abcXYZdef”,要求输出循环左移3位后的结果，即“XYZdefabc”。是不是很简单？OK，搞定它！</p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h3><ul><li>思路1: 首先确定左移之后第一个字符在原字符串中的位置<code>begin</code>，然后从<code>begin</code>向后遍历完原字符串，然后从0开始遍历到<code>begin</code>，将两部分拼接即可</li><li>思路2: <code>begin</code>为分界线，将两侧字符串分别反转，然后再将整个字符串反转</li></ul><h3 id="解答："><a href="#解答：" class="headerlink" title="解答："></a>解答：</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// 解法1:</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    string <span class="token function">LeftRotateString</span><span class="token punctuation">(</span>string str<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>len <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>        string res <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> begin <span class="token operator">=</span> n <span class="token operator">%</span> len<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> begin<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>            res <span class="token operator">+</span><span class="token operator">=</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> begin<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>            res <span class="token operator">+</span><span class="token operator">=</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 解法2:</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    string <span class="token function">LeftRotateString</span><span class="token punctuation">(</span>string str<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>len <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> begin <span class="token operator">=</span> n <span class="token operator">%</span> len<span class="token punctuation">;</span>        <span class="token function">reverse</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> str<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> begin<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">reverse</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> begin<span class="token punctuation">,</span> str<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">reverse</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> str<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> str<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;43-左旋转字符串&quot;&gt;&lt;a href=&quot;#43-左旋转字符串&quot; class=&quot;headerlink&quot; title=&quot;43. 左旋转字符串&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.nowcoder.com/practice/12d959b108cb42b
      
    
    </summary>
    
      <category term="剑指 offer" scheme="http://blog.wenguang0816.top/categories/%E5%89%91%E6%8C%87-offer/"/>
    
    
      <category term="字符串" scheme="http://blog.wenguang0816.top/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>把字符串转换成整数</title>
    <link href="http://blog.wenguang0816.top/2019/04/21/sword_refers_to_offer/49_strtoint/"/>
    <id>http://blog.wenguang0816.top/2019/04/21/sword_refers_to_offer/49_strtoint/</id>
    <published>2019-04-21T17:51:00.000Z</published>
    <updated>2020-04-09T03:46:38.932Z</updated>
    
    <content type="html"><![CDATA[<h3 id="49-把字符串转换成整数"><a href="#49-把字符串转换成整数" class="headerlink" title="49. 把字符串转换成整数"></a><a href="https://www.nowcoder.com/practice/1277c681251b4372bdef344468e4f26e?tpId=13&tqId=11202&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking" target="_blank" rel="noopener">49. 把字符串转换成整数</a></h3><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>将一个字符串转换成一个整数(实现Integer.valueOf(string)的功能，但是string不符合数字要求时返回0)，要求不能使用字符串转换整数的库函数。 数值为0或者字符串不是一个合法的数值则返回0。</p><h4 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述"></a>输入描述</h4><blockquote><p>输入一个字符串,包括数字字母符号,可以为空</p></blockquote><h4 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述"></a>输出描述</h4><blockquote><p>如果是合法的数值表达则返回该数字，否则返回0</p></blockquote><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><blockquote><p>输入</p><blockquote><p>+2147483647</p><p>1a33</p></blockquote><p>输出</p><blockquote><p>2147483647</p><p>0</p></blockquote></blockquote><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h3><p>本题目要将字符串转换成整数，方法并不复杂，但是要考虑异常处理：</p><ul><li>字符串是否为空</li><li>字符串对正负号进行处理</li><li>输入值是否合法</li><li>返回值类型为int，所以要考虑是否有溢出，int范围(-2147483648 ~ 2147483647)</li></ul><h3 id="解答："><a href="#解答：" class="headerlink" title="解答："></a>解答：</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">StrToInt</span><span class="token punctuation">(</span>string str<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 判断字符串是否为空</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>len <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> begin <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> isNegative <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 处理'+', '-'</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'+'</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            isNegative <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            begin <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'-'</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            isNegative <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            begin <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> position <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 以long long 类型存储转换结果</span>        <span class="token keyword">long</span> <span class="token keyword">long</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> len <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> begin<span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token string">'0'</span> <span class="token operator">||</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token string">'9'</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>            res <span class="token operator">+</span><span class="token operator">=</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">)</span> <span class="token operator">*</span> position<span class="token punctuation">;</span>            position <span class="token operator">*</span><span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 判断是否溢出</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>isNegative <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> res <span class="token operator">></span> <span class="token number">0x7fffffff</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>isNegative <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> res <span class="token operator">></span> <span class="token number">0x80000000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            res <span class="token operator">=</span> isNegative <span class="token operator">?</span> <span class="token operator">-</span>res <span class="token operator">:</span> res<span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;49-把字符串转换成整数&quot;&gt;&lt;a href=&quot;#49-把字符串转换成整数&quot; class=&quot;headerlink&quot; title=&quot;49. 把字符串转换成整数&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.nowcoder.com/practice/1277c6
      
    
    </summary>
    
      <category term="剑指 offer" scheme="http://blog.wenguang0816.top/categories/%E5%89%91%E6%8C%87-offer/"/>
    
    
      <category term="字符串" scheme="http://blog.wenguang0816.top/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>数值的整数次方</title>
    <link href="http://blog.wenguang0816.top/2019/04/21/sword_refers_to_offer/12_power/"/>
    <id>http://blog.wenguang0816.top/2019/04/21/sword_refers_to_offer/12_power/</id>
    <published>2019-04-21T13:52:00.000Z</published>
    <updated>2020-04-09T03:46:38.932Z</updated>
    
    <content type="html"><![CDATA[<h3 id="12-数值的整数次方"><a href="#12-数值的整数次方" class="headerlink" title="12. 数值的整数次方"></a><a href="https://www.nowcoder.com/practice/1a834e5e3e1a4b7ba251417554e07c00?tpId=13&tqId=11165&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking" target="_blank" rel="noopener">12. 数值的整数次方</a></h3><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定一个double类型的浮点数base和int类型的整数exponent。求base的exponent次方。</p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h3><ul><li>思路1：直接求解</li><li>思路2：简单快速幂：<ul><li>写出指数的二进制表达，例如<code>13</code>的二进制为<code>1101</code></li><li>以底数为<code>10</code>为例：<code>10^13 = 10^1101 = 10^0001 * 10^0100 * 10^1000</code></li></ul></li></ul><h3 id="解答："><a href="#解答：" class="headerlink" title="解答："></a>解答：</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// 方法1</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">double</span> <span class="token function">Power</span><span class="token punctuation">(</span><span class="token keyword">double</span> base<span class="token punctuation">,</span> <span class="token keyword">int</span> exponent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">double</span> res <span class="token operator">=</span> <span class="token number">1.0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>exponent <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>exponent <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>base <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token keyword">throw</span> <span class="token string">"The denominator cannot be 0"</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                base <span class="token operator">=</span> <span class="token number">1.0</span> <span class="token operator">/</span> base<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>exponent<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            res <span class="token operator">*</span><span class="token operator">=</span> base<span class="token punctuation">;</span>            exponent <span class="token operator">=</span> <span class="token punctuation">(</span>exponent <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token operator">--</span>exponent <span class="token operator">:</span> <span class="token operator">++</span>exponent<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 方法2:</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">double</span> <span class="token function">Power</span><span class="token punctuation">(</span><span class="token keyword">double</span> base<span class="token punctuation">,</span> <span class="token keyword">int</span> exponent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">double</span> res <span class="token operator">=</span> <span class="token number">1.0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 指数正负标志位，1为正</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>exponent <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>exponent <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>base <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token keyword">throw</span> <span class="token string">"The denominator cannot be 0"</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                exponent <span class="token operator">=</span> <span class="token operator">-</span>exponent<span class="token punctuation">;</span>            flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>exponent <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>exponent <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>                res <span class="token operator">*</span><span class="token operator">=</span> base<span class="token punctuation">;</span>            base <span class="token operator">*</span><span class="token operator">=</span> base<span class="token punctuation">;</span>            exponent <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> flag <span class="token operator">?</span> res <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">/</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;12-数值的整数次方&quot;&gt;&lt;a href=&quot;#12-数值的整数次方&quot; class=&quot;headerlink&quot; title=&quot;12. 数值的整数次方&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.nowcoder.com/practice/1a834e5e3e1a
      
    
    </summary>
    
      <category term="剑指 offer" scheme="http://blog.wenguang0816.top/categories/%E5%89%91%E6%8C%87-offer/"/>
    
    
      <category term="数学" scheme="http://blog.wenguang0816.top/tags/%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>用两个栈实现队列</title>
    <link href="http://blog.wenguang0816.top/2019/04/18/sword_refers_to_offer/05_queue_with_two_stacks/"/>
    <id>http://blog.wenguang0816.top/2019/04/18/sword_refers_to_offer/05_queue_with_two_stacks/</id>
    <published>2019-04-18T09:20:00.000Z</published>
    <updated>2020-04-09T03:46:38.932Z</updated>
    
    <content type="html"><![CDATA[<h3 id="5-用两个栈实现队列"><a href="#5-用两个栈实现队列" class="headerlink" title="5. 用两个栈实现队列"></a><a href="https://www.nowcoder.com/practice/54275ddae22f475981afa2244dd448c6?tpId=13&tqId=11158&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking" target="_blank" rel="noopener">5. 用两个栈实现队列</a></h3><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>用两个栈来实现一个队列，完成队列的Push和Pop操作。 队列中的元素为int类型。</p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h3><p>入队：将元素进栈A<br>出队：判断栈B是否为空，如果为空，则将栈A中所有元素依次出栈，并压栈进入栈B，之后栈B出栈；如果不为空，栈B直接出栈。</p><h3 id="解答："><a href="#解答：" class="headerlink" title="解答："></a>解答：</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">int</span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>        stack1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>stack2<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> stack1<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 队列为空，异常处理</span>            <span class="token keyword">throw</span> <span class="token string">"The queue is empty!"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>stack2<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stack1<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">int</span> tmp <span class="token operator">=</span> stack1<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                stack1<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                stack2<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> top <span class="token operator">=</span> stack2<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stack2<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> top<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">private</span><span class="token operator">:</span>    stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> stack1<span class="token punctuation">;</span>    stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> stack2<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;5-用两个栈实现队列&quot;&gt;&lt;a href=&quot;#5-用两个栈实现队列&quot; class=&quot;headerlink&quot; title=&quot;5. 用两个栈实现队列&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.nowcoder.com/practice/54275ddae22f
      
    
    </summary>
    
      <category term="剑指 offer" scheme="http://blog.wenguang0816.top/categories/%E5%89%91%E6%8C%87-offer/"/>
    
    
      <category term="栈" scheme="http://blog.wenguang0816.top/tags/%E6%A0%88/"/>
    
      <category term="队列" scheme="http://blog.wenguang0816.top/tags/%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>二叉树的镜像</title>
    <link href="http://blog.wenguang0816.top/2019/04/17/sword_refers_to_offer/18_mirror/"/>
    <id>http://blog.wenguang0816.top/2019/04/17/sword_refers_to_offer/18_mirror/</id>
    <published>2019-04-17T21:48:00.000Z</published>
    <updated>2020-04-09T03:46:38.932Z</updated>
    
    <content type="html"><![CDATA[<h3 id="18-二叉树的镜像"><a href="#18-二叉树的镜像" class="headerlink" title="18. 二叉树的镜像"></a><a href="https://www.nowcoder.com/practice/564f4c26aa584921bc75623e48ca3011?tpId=13&tqId=11171&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking" target="_blank" rel="noopener">18. 二叉树的镜像</a></h3><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>操作给定的二叉树，将其变换为源二叉树的镜像。</p><h4 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述"></a>输入描述</h4><pre><code>二叉树的镜像定义：源二叉树            8           /  \          6   10         / \  / \        5  7 9 11        镜像二叉树            8           /  \          10   6         / \  / \        11 9 7  5</code></pre><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h3><p>使用递归思路，先交换根节点的两个子节点，再交换子节点的两个子节点</p><h3 id="解答："><a href="#解答：" class="headerlink" title="解答："></a>解答：</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*struct TreeNode {    int val;    struct TreeNode *left;    struct TreeNode *right;    TreeNode(int x) :            val(x), left(nullptr), right(nullptr) {    }};*/</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">Mirror</span><span class="token punctuation">(</span>TreeNode <span class="token operator">*</span>pRoot<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>pRoot<span class="token punctuation">)</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        TreeNode <span class="token operator">*</span>tmp <span class="token operator">=</span> pRoot<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">;</span>        pRoot<span class="token operator">-</span><span class="token operator">></span>left <span class="token operator">=</span> pRoot<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">;</span>        pRoot<span class="token operator">-</span><span class="token operator">></span>right <span class="token operator">=</span> tmp<span class="token punctuation">;</span>        <span class="token function">Mirror</span><span class="token punctuation">(</span>pRoot<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Mirror</span><span class="token punctuation">(</span>pRoot<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;18-二叉树的镜像&quot;&gt;&lt;a href=&quot;#18-二叉树的镜像&quot; class=&quot;headerlink&quot; title=&quot;18. 二叉树的镜像&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.nowcoder.com/practice/564f4c26aa58492
      
    
    </summary>
    
      <category term="剑指 offer" scheme="http://blog.wenguang0816.top/categories/%E5%89%91%E6%8C%87-offer/"/>
    
    
      <category term="二叉树" scheme="http://blog.wenguang0816.top/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
      <category term="栈" scheme="http://blog.wenguang0816.top/tags/%E6%A0%88/"/>
    
      <category term="递归" scheme="http://blog.wenguang0816.top/tags/%E9%80%92%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>二叉树的深度</title>
    <link href="http://blog.wenguang0816.top/2019/04/17/sword_refers_to_offer/38_treedepth/"/>
    <id>http://blog.wenguang0816.top/2019/04/17/sword_refers_to_offer/38_treedepth/</id>
    <published>2019-04-17T20:46:00.000Z</published>
    <updated>2020-04-09T03:46:38.932Z</updated>
    
    <content type="html"><![CDATA[<h3 id="38-二叉树的深度"><a href="#38-二叉树的深度" class="headerlink" title="38. 二叉树的深度"></a><a href="https://www.nowcoder.com/practice/435fb86331474282a3499955f0a41e8b?tpId=13&tqId=11191&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking" target="_blank" rel="noopener">38. 二叉树的深度</a></h3><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>输入一棵二叉树，求该树的深度。从根结点到叶结点依次经过的结点（含根、叶结点）形成树的一条路径，最长路径的长度为树的深度。</p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h3><ul><li>思路1: 使用递归思路，属于DFS（深度优先搜索），时间复杂度为<code>O(N)</code>，空间复杂度：在最糟糕的情况下，树是完全不平衡的，例如每个结点只剩下左子结点，递归将会被调用<code>N</code>次（树的高度），因此保持调用栈的存储将是<code>O(N)</code>。但在最好的情况下（树是完全平衡的），树的高度将是<code>log(N)</code>。因此，在这种情况下的空间复杂度将是<code>O(log(N))</code>。</li><li>思路2: 使用迭代思路，引入一个栈，使用 DFS 策略访问每个结点，同时在每次访问时更新最大深度。时间复杂度为<code>O(N)</code>，空间复杂度将是<code>O(N)</code>。</li></ul><h3 id="解答："><a href="#解答：" class="headerlink" title="解答："></a>解答：</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*struct TreeNode {    int val;    struct TreeNode *left;    struct TreeNode *right;    TreeNode(int x) :            val(x), left(nullptr), right(nullptr) {    }};*/</span><span class="token comment" spellcheck="true">// 解法1:</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">TreeDepth</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> pRoot<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>pRoot<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token function">TreeDepth</span><span class="token punctuation">(</span>pRoot<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token function">TreeDepth</span><span class="token punctuation">(</span>pRoot<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 解法2:</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">TreeDepth</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> pRoot<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>pRoot<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        queue<span class="token operator">&lt;</span>TreeNode <span class="token operator">*</span><span class="token operator">></span> que<span class="token punctuation">;</span>        que<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>pRoot<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> depth <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>que<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 队列中每次迭代都只存储了一层的元素</span>            <span class="token keyword">int</span> size <span class="token operator">=</span> que<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            depth<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                TreeNode <span class="token operator">*</span>node <span class="token operator">=</span> que<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                que<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">)</span>                    que<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">)</span>                    que<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> depth<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;38-二叉树的深度&quot;&gt;&lt;a href=&quot;#38-二叉树的深度&quot; class=&quot;headerlink&quot; title=&quot;38. 二叉树的深度&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.nowcoder.com/practice/435fb8633147428
      
    
    </summary>
    
      <category term="剑指 offer" scheme="http://blog.wenguang0816.top/categories/%E5%89%91%E6%8C%87-offer/"/>
    
    
      <category term="二叉树" scheme="http://blog.wenguang0816.top/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
      <category term="栈" scheme="http://blog.wenguang0816.top/tags/%E6%A0%88/"/>
    
      <category term="递归" scheme="http://blog.wenguang0816.top/tags/%E9%80%92%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>构建乘积数组</title>
    <link href="http://blog.wenguang0816.top/2019/04/04/sword_refers_to_offer/51_multiply/"/>
    <id>http://blog.wenguang0816.top/2019/04/04/sword_refers_to_offer/51_multiply/</id>
    <published>2019-04-04T10:50:00.000Z</published>
    <updated>2020-04-09T03:46:38.932Z</updated>
    
    <content type="html"><![CDATA[<h3 id="51-构建乘积数组"><a href="#51-构建乘积数组" class="headerlink" title="51. 构建乘积数组"></a><a href="https://www.nowcoder.com/practice/94a4d381a68b47b7a8bed86f2975db46?tpId=13&tqId=11204&tPage=2&rp=2&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking" target="_blank" rel="noopener">51. 构建乘积数组</a></h3><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定一个数组<code>A[0,1,...,n-1]</code>,请构建一个数组<code>B[0,1,...,n-1]</code>,其中B中的元素<code>B[i]=A[0]*A[1]*...*A[i-1]*A[i+1]*...*A[n-1]</code>。不能使用除法。</p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h3><ul><li>思路1: 遍历数组，时间复杂度O(n)</li><li>思路2: </li></ul><table><thead><tr><th>B<sub>i</sub></th><th>A<sub>0</sub></th><th>A<sub>1</sub></th><th>A<sub>2</sub></th><th>…</th><th>A<sub>n-2</sub></th><th>A<sub>n-1</sub></th></tr></thead><tbody><tr><td>B<sub>0</sub></td><td><strong>1</strong></td><td>A<sub>1</sub></td><td>A<sub>2</sub></td><td>…</td><td>A<sub>n-2</sub></td><td>A<sub>n-1</sub></td></tr><tr><td>B<sub>1</sub></td><td>A<sub>0</sub></td><td><strong>1</strong></td><td>A<sub>2</sub></td><td>…</td><td>A<sub>n-2</sub></td><td>A<sub>n-1</sub></td></tr><tr><td>B<sub>2</sub></td><td>A<sub>0</sub></td><td>A<sub>1</sub></td><td><strong>1</strong></td><td>…</td><td>A<sub>n-2</sub></td><td>A<sub>n-1</sub></td></tr><tr><td>B<sub>0</sub></td><td>…</td><td>…</td><td>…</td><td>…</td><td>…</td><td>…</td></tr><tr><td>B<sub>n-2</sub></td><td>A<sub>0</sub></td><td>A<sub>1</sub></td><td>A<sub>2</sub></td><td>…</td><td><strong>1</strong></td><td>A<sub>n-1</sub></td></tr><tr><td>B<sub>n-1</sub></td><td>A<sub>0</sub></td><td>A<sub>1</sub></td><td>A<sub>2</sub></td><td>…</td><td>A<sub>n-2</sub></td><td><strong>1</strong></td></tr></tbody></table><p>通过观察，B<sub>i</sub>的值可以看作表格中每一行的乘积，下三角连乘易求得，上三角，从下向上也是连乘，所以我们可以先计算下三角中的连乘，再算上三角的连乘，将B<sub>i</sub>两部分相乘即可。</p><h3 id="解答："><a href="#解答：" class="headerlink" title="解答："></a>解答：</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// 解法1:</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">multiply</span><span class="token punctuation">(</span><span class="token keyword">const</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> A<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> A<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> B<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> bi <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> j<span class="token punctuation">)</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                bi <span class="token operator">*</span><span class="token operator">=</span> A<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>            B<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>bi<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> B<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 解法2:</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">multiply</span><span class="token punctuation">(</span><span class="token keyword">const</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> A<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> A<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">B</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>len <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> B<span class="token punctuation">;</span>        B<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 计算下三角</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            B<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> B<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">*</span> A<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> tmp <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//计算上三角</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> len <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            tmp <span class="token operator">*</span><span class="token operator">=</span> A<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            B<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span><span class="token operator">=</span> tmp<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> B<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;51-构建乘积数组&quot;&gt;&lt;a href=&quot;#51-构建乘积数组&quot; class=&quot;headerlink&quot; title=&quot;51. 构建乘积数组&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.nowcoder.com/practice/94a4d381a68b47b
      
    
    </summary>
    
      <category term="剑指 offer" scheme="http://blog.wenguang0816.top/categories/%E5%89%91%E6%8C%87-offer/"/>
    
    
      <category term="数组" scheme="http://blog.wenguang0816.top/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
</feed>
