<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>云中的Jason</title>
  
  <subtitle>云中的Jason</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.wenguang0816.top/"/>
  <updated>2019-07-18T14:35:18.377Z</updated>
  <id>http://blog.wenguang0816.top/</id>
  
  <author>
    <name>Jason</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>macOS终端、vim美化(Solarized主题)</title>
    <link href="http://blog.wenguang0816.top/2019/07/14/environment/beautify_terminal/"/>
    <id>http://blog.wenguang0816.top/2019/07/14/environment/beautify_terminal/</id>
    <published>2019-07-14T13:44:00.000Z</published>
    <updated>2019-07-18T14:35:18.377Z</updated>
    
    <content type="html"><![CDATA[<h2 id="优化原因"><a href="#优化原因" class="headerlink" title="优化原因"></a>优化原因</h2><p>macOS自带的终端一开始是不好看的（个人向），黑底白字。在操作的时候不美观也不高效，就像下面这样：<br><img src="https://gitee.com/wenguang0816/blogPic/raw/master/20190714-1.jpg" alt><br>所以本着好看的原则，对macOS的终端进行一波优化。优化后的效果见图：<br><img src="https://gitee.com/wenguang0816/blogPic/raw/master/20190714-2.jpg" alt></p><h2 id="优化方法"><a href="#优化方法" class="headerlink" title="优化方法"></a>优化方法</h2><p>这里优化用到的是Solarized主题<a href="https://github.com/altercation/solarized" target="_blank" rel="noopener">GitHub</a>。Solarized是目前最完整的 Terminal/Editor/IDE 配色项目，几乎覆盖所有主流操作系统（Mac OS X, Linux, Windows）、编辑器和 IDE（Vim, Emacs, Xcode, TextMate, NetBeans, Visual Studio 等），终端（iTerm2, Terminal.app, Putty 等）。让我们看一下Solarized主题在mac终端上的效果，主题氛围Dark和Light两种。<br><img src="https://gitee.com/wenguang0816/blogPic/raw/master/20190714-3.jpg" alt></p><h3 id="主题安装"><a href="#主题安装" class="headerlink" title="主题安装"></a>主题安装</h3><ol><li>主题可以通过两种方式获取</li></ol><ul><li>从<a href="https://github.com/altercation/solarized" target="_blank" rel="noopener">GitHub</a>仓库中的<code>release</code>中下载作者发布的压缩包</li><li>通过终端克隆仓库的方式进行获取<pre class=" language-bash"><code class="language-bash">  <span class="token comment" spellcheck="true"># 在终端输入</span>  <span class="token function">git</span> clone git://github.com/altercation/solarized.git</code></pre></li></ul><ol start="2"><li>下载好主题后，从下载的文件中找到<code>osx-terminal.app-colors-solarized</code>文件夹，文件内容如图所示：<br><img src="https://gitee.com/wenguang0816/blogPic/raw/master/20190714-4.jpg" alt><br>文件中有Dark和Light两种主题，读者可以根据上文中的效果图选择安装（双击即可）。<em>在安装中可能会遇到安全提示，在<code>系统偏好设置\安全性与隐私</code>中允许即可。</em></li><li>打开终端，进入<code>偏好设置</code>便可以在<code>描述文件</code>中看到新安装的主题了，将新安装的主题设置为<strong>默认</strong>。并在<code>通用</code>设置为启动时打开刚才设置为默认的描述文件。<br><img src="https://gitee.com/wenguang0816/blogPic/raw/master/20190714-5.jpg" alt><br><img src="https://gitee.com/wenguang0816/blogPic/raw/master/20190714-6.jpg" alt><br>现在主题就安装好了。</li></ol><h3 id="vim配置"><a href="#vim配置" class="headerlink" title="vim配置"></a>vim配置</h3><ol><li>将Solarized主题的vim文件拷贝到系统的vim目录<pre class=" language-bash"><code class="language-bash"> <span class="token function">cd</span> solarized <span class="token function">cd</span> vim-colors-solarized/colors <span class="token function">mkdir</span> -p ~/.vim/colors <span class="token function">cp</span> solarized.vim ~/.vim/colors/</code></pre></li><li>修改vim设置:<code>vim ~/.vimrc</code>，在该文件中添加一下内容<pre class=" language-bash"><code class="language-bash"> syntax on <span class="token keyword">set</span> background<span class="token operator">=</span>dark <span class="token comment" spellcheck="true"># 背景为dark，也可选light</span> colorscheme solarized</code></pre>修改后如图所示：（版本不同，效果可能有所不同）<br><img src="https://gitee.com/wenguang0816/blogPic/raw/master/20190714-7.jpg" alt></li></ol><h3 id="高亮"><a href="#高亮" class="headerlink" title="高亮"></a>高亮</h3><p>安装Solarized主题后，终端中执行<code>ls</code>等命令时，文件都是同一个颜色，没有高亮，可以在<code>.bash_profile</code>中添加一下设置</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># vim ~/.bash_profile</span><span class="token function">export</span> GREP_OPTIONS<span class="token operator">=</span><span class="token string">'--color=auto'</span><span class="token function">export</span> TERM<span class="token operator">=</span><span class="token string">"xterm-color"</span>PS1<span class="token operator">=</span><span class="token string">'\[\e[0;33m\]\u\[\e[0m\]@\[\e[0;32m\]\h\[\e[0m\]:\[\e[0;34m\]\w\[\e[0m\]\$ '</span></code></pre><p>设置后如图所示：<br><img src="https://gitee.com/wenguang0816/blogPic/raw/master/20190714-8.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;优化原因&quot;&gt;&lt;a href=&quot;#优化原因&quot; class=&quot;headerlink&quot; title=&quot;优化原因&quot;&gt;&lt;/a&gt;优化原因&lt;/h2&gt;&lt;p&gt;macOS自带的终端一开始是不好看的（个人向），黑底白字。在操作的时候不美观也不高效，就像下面这样：&lt;br&gt;&lt;img src
      
    
    </summary>
    
      <category term="分享" scheme="http://blog.wenguang0816.top/categories/%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="macOS" scheme="http://blog.wenguang0816.top/tags/macOS/"/>
    
      <category term="终端美化" scheme="http://blog.wenguang0816.top/tags/%E7%BB%88%E7%AB%AF%E7%BE%8E%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>二叉树的创建和遍历</title>
    <link href="http://blog.wenguang0816.top/2019/05/11/dsa/create_and_traveral_bitree/"/>
    <id>http://blog.wenguang0816.top/2019/05/11/dsa/create_and_traveral_bitree/</id>
    <published>2019-05-11T00:00:00.000Z</published>
    <updated>2019-07-18T14:35:18.377Z</updated>
    
    <content type="html"><![CDATA[<h2 id="二叉树相关概念"><a href="#二叉树相关概念" class="headerlink" title="二叉树相关概念"></a>二叉树相关概念</h2><p>二叉树是一种常见的数据结构，二叉树的每个节点<strong>最多有2个</strong>孩子节点</p><h3 id="二叉树形式"><a href="#二叉树形式" class="headerlink" title="二叉树形式"></a>二叉树形式</h3><ol><li><p>满二叉树</p><blockquote><p>一个二叉树的所有非叶子节点都存在左右孩子，并且所有叶子节点都在同意层级上，则该树为满二叉树<br><img src="https://gitee.com/wenguang0816/blogPic/raw/master/20190511-2.jpg" alt="满二叉树"></p></blockquote></li><li><p>完全二叉树</p><blockquote><p>对一个有n个节点的二叉树，按层级顺序编号，则所有节点的编号从1到n。如果这个树所有的节点和同样深度的满二叉树的编号从1到n的节点位置相同，则这个二叉树为完全二叉树<br><img src="https://gitee.com/wenguang0816/blogPic/raw/master/20190511-3.jpg" alt="完全二叉树"></p></blockquote></li></ol><h3 id="二叉树存储方式"><a href="#二叉树存储方式" class="headerlink" title="二叉树存储方式"></a>二叉树存储方式</h3><ol><li>链式存储<blockquote><p> <img src="https://gitee.com/wenguang0816/blogPic/raw/master/20190511-4.jpg" alt="链式存储"></p></blockquote></li><li>数组存储<blockquote><p> <img src="https://gitee.com/wenguang0816/blogPic/raw/master/20190511-5.jpg" alt="数组存储"><br>在数组存储中，如果父节点下标为<code>parent</code>， 那么他的左孩子节点下标为<code>2 * parent + 1</code>，右孩子节点下标为<code>2 * parent + 2</code>。</p></blockquote></li></ol><h2 id="二叉树的遍历"><a href="#二叉树的遍历" class="headerlink" title="二叉树的遍历"></a>二叉树的遍历</h2><p>二叉树遍历分为两个大类：深度优先遍历（DFS）和广度优先遍历（BFS）<br>以下树为例来讲述不同方式的遍历顺序</p><pre><code>        实例二叉树            3           /  \          2    8         / \    \        9  10   11</code></pre><h3 id="深度优先遍历"><a href="#深度优先遍历" class="headerlink" title="深度优先遍历"></a>深度优先遍历</h3><ol><li><p>前序遍历（先序遍历）</p><blockquote><p>二叉树前序遍历的输出顺序为：根节点、左节点、右节点</p></blockquote><p> 则上例二叉树的前序遍历顺序为：<code>3 -&gt; 2 -&gt; 9 -&gt; 10 -&gt; 8 -&gt; 11</code></p></li><li><p>中序遍历</p><blockquote><p>二叉树中序遍历的输出顺序为：左节点、根节点、右节点</p></blockquote><p> 则上例二叉树的中序遍历顺序为：<code>9 -&gt; 2 -&gt; 10 -&gt; 3 -&gt; 8 -&gt; 11</code></p></li><li><p>后序遍历</p><blockquote><p>二叉树后序遍历的输出顺序为：左节点、右节点、根节点</p></blockquote><p> 则上例二叉树的中序遍历顺序为：<code>9 -&gt; 10 -&gt; 2 -&gt; 11 -&gt; 8 -&gt; 3</code></p></li></ol><p><strong>中序遍历和前序遍历或者中序遍历和后序遍历可以唯一确定一棵二叉树</strong></p><h3 id="广度优先遍历"><a href="#广度优先遍历" class="headerlink" title="广度优先遍历"></a>广度优先遍历</h3><ol><li><p>层序遍历</p><blockquote><p>按照从根节点到叶子节点的层次关系，一层一层横向遍历各个节点</p></blockquote><p> 则上例二叉树的层序遍历顺序为：<code>3 -&gt; 2 -&gt; 8 -&gt; 9 -&gt; 10 -&gt; 11</code></p></li></ol><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;queue></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">struct</span> TreeNode<span class="token punctuation">{</span>    <span class="token keyword">int</span> val<span class="token punctuation">;</span>    <span class="token keyword">struct</span> TreeNode <span class="token operator">*</span>left<span class="token punctuation">;</span>    <span class="token keyword">struct</span> TreeNode <span class="token operator">*</span>right<span class="token punctuation">;</span>    <span class="token function">TreeNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">val</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">left</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">right</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">BinaryTree</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token comment" spellcheck="true">// 前序遍历创建二叉树</span>    TreeNode<span class="token operator">*</span> <span class="token function">createBinaryTree_1</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">&amp;</span>array<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 层序遍历创建二叉树</span>    TreeNode<span class="token operator">*</span> <span class="token function">createBinaryTree_2</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">&amp;</span>array<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 前序遍历</span>    <span class="token keyword">void</span> <span class="token function">preOrderTraveral</span><span class="token punctuation">(</span>TreeNode <span class="token operator">*</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 中序遍历</span>    <span class="token keyword">void</span> <span class="token function">inOrderTraveral</span><span class="token punctuation">(</span>TreeNode <span class="token operator">*</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 后序遍历</span>    <span class="token keyword">void</span> <span class="token function">postOrderTraveral</span><span class="token punctuation">(</span>TreeNode <span class="token operator">*</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 层序遍历</span>    <span class="token keyword">void</span> <span class="token function">levelOrderTraveral</span><span class="token punctuation">(</span>TreeNode <span class="token operator">*</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 二叉树深度</span>    <span class="token keyword">int</span> <span class="token function">TreeDepth</span><span class="token punctuation">(</span>TreeNode <span class="token operator">*</span>pRoot<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//前序遍历顺序创建二叉树</span>TreeNode<span class="token operator">*</span> BinaryTree<span class="token operator">::</span><span class="token function">createBinaryTree_1</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">&amp;</span>array<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> index<span class="token punctuation">)</span><span class="token punctuation">{</span>    TreeNode <span class="token operator">*</span>node <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">&lt;</span> len <span class="token operator">&amp;&amp;</span> array<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">TreeNode</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        node<span class="token operator">-</span><span class="token operator">></span>left <span class="token operator">=</span> <span class="token function">createBinaryTree_1</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> len<span class="token punctuation">,</span> <span class="token operator">++</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        node<span class="token operator">-</span><span class="token operator">></span>right <span class="token operator">=</span> <span class="token function">createBinaryTree_1</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> len<span class="token punctuation">,</span> <span class="token operator">++</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> node<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 层序遍历创建二叉树</span>TreeNode<span class="token operator">*</span> BinaryTree<span class="token operator">::</span><span class="token function">createBinaryTree_2</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">&amp;</span>array<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">{</span>    TreeNode <span class="token operator">*</span>node <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">&lt;</span> len <span class="token operator">&amp;&amp;</span> array<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">TreeNode</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        node<span class="token operator">-</span><span class="token operator">></span>left <span class="token operator">=</span> <span class="token function">createBinaryTree_2</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> len<span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        node<span class="token operator">-</span><span class="token operator">></span>right <span class="token operator">=</span> <span class="token function">createBinaryTree_2</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> len<span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> index <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> node<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 前序遍历</span><span class="token keyword">void</span> BinaryTree<span class="token operator">::</span><span class="token function">preOrderTraveral</span><span class="token punctuation">(</span>TreeNode <span class="token operator">*</span>node<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> node<span class="token operator">-</span><span class="token operator">></span>val <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token function">preOrderTraveral</span><span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">preOrderTraveral</span><span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 中序遍历</span><span class="token keyword">void</span> BinaryTree<span class="token operator">::</span><span class="token function">inOrderTraveral</span><span class="token punctuation">(</span>TreeNode <span class="token operator">*</span>node<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token function">inOrderTraveral</span><span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> node<span class="token operator">-</span><span class="token operator">></span>val <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token function">inOrderTraveral</span><span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 后序遍历</span><span class="token keyword">void</span> BinaryTree<span class="token operator">::</span><span class="token function">postOrderTraveral</span><span class="token punctuation">(</span>TreeNode <span class="token operator">*</span>node<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token function">postOrderTraveral</span><span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">postOrderTraveral</span><span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> node<span class="token operator">-</span><span class="token operator">></span>val <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 层序遍历</span><span class="token comment" spellcheck="true">// 层序遍历需要借助队列来实现</span><span class="token keyword">void</span> BinaryTree<span class="token operator">::</span><span class="token function">levelOrderTraveral</span><span class="token punctuation">(</span>TreeNode <span class="token operator">*</span>node<span class="token punctuation">)</span><span class="token punctuation">{</span>    queue<span class="token operator">&lt;</span>TreeNode <span class="token operator">*</span><span class="token operator">></span> qTreeNode<span class="token punctuation">;</span>    qTreeNode<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>qTreeNode<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        TreeNode <span class="token operator">*</span>pNode <span class="token operator">=</span> qTreeNode<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        qTreeNode<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> pNode<span class="token operator">-</span><span class="token operator">></span>val <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>pNode<span class="token operator">-</span><span class="token operator">></span>left <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>            qTreeNode<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>pNode<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>pNode<span class="token operator">-</span><span class="token operator">></span>right <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>            qTreeNode<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>pNode<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 二叉树深度</span><span class="token keyword">int</span> BinaryTree<span class="token operator">::</span><span class="token function">TreeDepth</span><span class="token punctuation">(</span>TreeNode <span class="token operator">*</span>pRoot<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>pRoot<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token function">TreeDepth</span><span class="token punctuation">(</span>pRoot<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">TreeDepth</span><span class="token punctuation">(</span>pRoot<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// -1 代表节点为空</span>    <span class="token comment" spellcheck="true">// 按前序遍历顺序创建二叉树，并且遍历</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> array_1 <span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> len_1 <span class="token operator">=</span> array_1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    BinaryTree biTree<span class="token punctuation">;</span>    <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    TreeNode <span class="token operator">*</span>root_1 <span class="token operator">=</span> biTree<span class="token punctuation">.</span><span class="token function">createBinaryTree_1</span><span class="token punctuation">(</span>array_1<span class="token punctuation">,</span> len_1<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"PreOrderTraveral: "</span><span class="token punctuation">;</span>    biTree<span class="token punctuation">.</span><span class="token function">preOrderTraveral</span><span class="token punctuation">(</span>root_1<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"InOrderTraveral: "</span><span class="token punctuation">;</span>    biTree<span class="token punctuation">.</span><span class="token function">inOrderTraveral</span><span class="token punctuation">(</span>root_1<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"PostOrderTraveral: "</span><span class="token punctuation">;</span>    biTree<span class="token punctuation">.</span><span class="token function">postOrderTraveral</span><span class="token punctuation">(</span>root_1<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"LevelOrderTraveral: "</span><span class="token punctuation">;</span>    biTree<span class="token punctuation">.</span><span class="token function">levelOrderTraveral</span><span class="token punctuation">(</span>root_1<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Tree_1's depth is: "</span> <span class="token operator">&lt;&lt;</span> biTree<span class="token punctuation">.</span><span class="token function">TreeDepth</span><span class="token punctuation">(</span>root_1<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 按层序遍历顺序创建二叉树，并且遍历</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> array_2 <span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> len_2 <span class="token operator">=</span> array_2<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    TreeNode <span class="token operator">*</span>root_2 <span class="token operator">=</span> biTree<span class="token punctuation">.</span><span class="token function">createBinaryTree_2</span><span class="token punctuation">(</span>array_2<span class="token punctuation">,</span> len_2<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"PreOrderTraveral: "</span><span class="token punctuation">;</span>    biTree<span class="token punctuation">.</span><span class="token function">preOrderTraveral</span><span class="token punctuation">(</span>root_2<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"InOrderTraveral: "</span><span class="token punctuation">;</span>    biTree<span class="token punctuation">.</span><span class="token function">inOrderTraveral</span><span class="token punctuation">(</span>root_2<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"PostOrderTraveral: "</span><span class="token punctuation">;</span>    biTree<span class="token punctuation">.</span><span class="token function">postOrderTraveral</span><span class="token punctuation">(</span>root_2<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"LevelOrderTraveral: "</span><span class="token punctuation">;</span>    biTree<span class="token punctuation">.</span><span class="token function">levelOrderTraveral</span><span class="token punctuation">(</span>root_2<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Tree_2's depth is: "</span> <span class="token operator">&lt;&lt;</span> biTree<span class="token punctuation">.</span><span class="token function">TreeDepth</span><span class="token punctuation">(</span>root_2<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>致谢：</strong>本文部分文字和图片引自<strong>程序员小灰</strong>的新书<strong>漫画算法</strong>，为表感谢，特附上程序员小灰公众号二维码，大家快扫码学习新知识哈！<br><img src="https://gitee.com/wenguang0816/blogPic/raw/master/20190511-6.jpg" alt="程序员小灰"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;二叉树相关概念&quot;&gt;&lt;a href=&quot;#二叉树相关概念&quot; class=&quot;headerlink&quot; title=&quot;二叉树相关概念&quot;&gt;&lt;/a&gt;二叉树相关概念&lt;/h2&gt;&lt;p&gt;二叉树是一种常见的数据结构，二叉树的每个节点&lt;strong&gt;最多有2个&lt;/strong&gt;孩子节点&lt;/
      
    
    </summary>
    
      <category term="分享" scheme="http://blog.wenguang0816.top/categories/%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="数据结构" scheme="http://blog.wenguang0816.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="二叉树" scheme="http://blog.wenguang0816.top/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>链表中环的入口节点</title>
    <link href="http://blog.wenguang0816.top/2019/04/23/sword_refers_to_offer/55_entrynodeofloop/"/>
    <id>http://blog.wenguang0816.top/2019/04/23/sword_refers_to_offer/55_entrynodeofloop/</id>
    <published>2019-04-23T19:30:00.000Z</published>
    <updated>2019-07-18T14:35:18.381Z</updated>
    
    <content type="html"><![CDATA[<h3 id="55-链表中环的入口节点"><a href="#55-链表中环的入口节点" class="headerlink" title="55. 链表中环的入口节点"></a><a href="https://www.nowcoder.com/practice/253d2c59ec3e4bc68da16833f79a38e4?tpId=13&tqId=11208&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking" target="_blank" rel="noopener">55. 链表中环的入口节点</a></h3><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给一个链表，若其中包含环，请找出该链表的环的入口结点，否则，输出null。</p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h3><ul><li>确定是否有环：定义两个指针，同时从链表头节点出发，慢指针每次走一步，快指针每次走两步，如果快指针追上了慢指针，那么链表中有环，如果快指针走到了链表末尾都没有追上慢指针，那么链表中没有环</li><li>找到入口节点：<ul><li>确定环内节点数目：快指针与慢指针相遇肯定位于环内，可以记录该相遇节点，然后从该节点出发，当再次回到这个节点经过了<code>k</code>个节点，即环内节点数目为<code>k</code></li><li>定义两个指针P1和P2指向链表的头节点，如果环内有<code>k</code>个节点，那么P1先在链表上向前移动<code>k</code>步，然后两个指针以相同的速度向前移动。当P2指向入环节点时，P1已经绕环一周，重新回到入口节点</li></ul></li></ul><p>异常处理：</p><ol><li>输入为空指针</li><li>链表无环</li><li>链表只有一个节点</li></ol><h3 id="解答："><a href="#解答：" class="headerlink" title="解答："></a>解答：</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*struct ListNode {    int val;    struct ListNode *next;    ListNode(int x) :        val(x), next(NULL) {    }};*/</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    ListNode<span class="token operator">*</span> <span class="token function">MeetingNode</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> pHead<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>pHead <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>        ListNode<span class="token operator">*</span> pSlow <span class="token operator">=</span> pHead<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>pSlow <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>        ListNode<span class="token operator">*</span> pFast <span class="token operator">=</span> pSlow<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>pFast <span class="token operator">!=</span> <span class="token keyword">nullptr</span> <span class="token operator">&amp;&amp;</span> pSlow <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>pFast <span class="token operator">==</span> pSlow<span class="token punctuation">)</span>                <span class="token keyword">return</span> pFast<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// pSlow走一步</span>            pSlow <span class="token operator">=</span> pSlow<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// pFast走两步</span>            pFast <span class="token operator">=</span> pFast<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>pFast <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>                pFast <span class="token operator">=</span> pFast<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 不存在环</span>        <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">public</span><span class="token operator">:</span>    ListNode<span class="token operator">*</span> <span class="token function">EntryNodeOfLoop</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> pHead<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        ListNode<span class="token operator">*</span> meetingNode <span class="token operator">=</span> <span class="token function">MeetingNode</span><span class="token punctuation">(</span>pHead<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>meetingNode <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取环中节点的数目</span>        <span class="token keyword">int</span> nodesInLoop <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        ListNode<span class="token operator">*</span> pNode1 <span class="token operator">=</span> meetingNode<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>pNode1<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">!=</span> meetingNode<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            pNode1 <span class="token operator">=</span> pNode1<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>            <span class="token operator">++</span>nodesInLoop<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 先移动pNode1，次数为环中节点的数目</span>        pNode1 <span class="token operator">=</span> pHead<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nodesInLoop<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>            pNode1 <span class="token operator">=</span> pNode1<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 再移动pNode1和pNode2</span>        ListNode<span class="token operator">*</span> pNode2 <span class="token operator">=</span> pHead<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>pNode1 <span class="token operator">!=</span> pNode2<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            pNode1 <span class="token operator">=</span> pNode1<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>            pNode2 <span class="token operator">=</span> pNode2<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> pNode1<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;55-链表中环的入口节点&quot;&gt;&lt;a href=&quot;#55-链表中环的入口节点&quot; class=&quot;headerlink&quot; title=&quot;55. 链表中环的入口节点&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.nowcoder.com/practice/253d2c
      
    
    </summary>
    
      <category term="剑指 offer" scheme="http://blog.wenguang0816.top/categories/%E5%89%91%E6%8C%87-offer/"/>
    
    
      <category term="链表" scheme="http://blog.wenguang0816.top/tags/%E9%93%BE%E8%A1%A8/"/>
    
      <category term="鲁棒性" scheme="http://blog.wenguang0816.top/tags/%E9%B2%81%E6%A3%92%E6%80%A7/"/>
    
  </entry>
  
  <entry>
    <title>链表中倒数第k个节点</title>
    <link href="http://blog.wenguang0816.top/2019/04/23/sword_refers_to_offer/14_findkthtotail/"/>
    <id>http://blog.wenguang0816.top/2019/04/23/sword_refers_to_offer/14_findkthtotail/</id>
    <published>2019-04-23T19:00:00.000Z</published>
    <updated>2019-07-18T14:35:18.381Z</updated>
    
    <content type="html"><![CDATA[<h3 id="14-链表中倒数第k个节点"><a href="#14-链表中倒数第k个节点" class="headerlink" title="14. 链表中倒数第k个节点"></a><a href="https://www.nowcoder.com/practice/529d3ae5a407492994ad2a246518148a?tpId=13&tqId=11167&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking" target="_blank" rel="noopener">14. 链表中倒数第k个节点</a></h3><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>输入一个链表，输出该链表中倒数第k个结点。</p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h3><ul><li>定义两个指针，第一个指针从链表头部开始遍历至第<code>k-1</code>个节点，第二个指针保持不懂；</li><li>第二个指针指向链表头部，然后两个指针同时向后遍历，由于两个指针的距离始终保持<code>k-1</code>，所以当第一个指针到达链表的尾节点是，第二个指针正好指向倒数第<code>k</code>个节点</li></ul><p>异常处理：</p><ol><li>输入为空指针</li><li>链表节点数小于k</li><li>k为0</li></ol><h3 id="解答："><a href="#解答：" class="headerlink" title="解答："></a>解答：</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*struct ListNode {    int val;    struct ListNode *next;    ListNode(int x) :            val(x), next(NULL) {    }};*/</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    ListNode<span class="token operator">*</span> <span class="token function">FindKthToTail</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> pListHead<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>pListHead <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> k <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>        ListNode<span class="token operator">*</span> pAhead <span class="token operator">=</span> pListHead<span class="token punctuation">;</span>        ListNode<span class="token operator">*</span> pBehind <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>pAhead<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>                pAhead <span class="token operator">=</span> pAhead<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>            <span class="token keyword">else</span>                <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        pBehind <span class="token operator">=</span> pListHead<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>pAhead<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            pAhead <span class="token operator">=</span> pAhead<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>            pBehind <span class="token operator">=</span> pBehind<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> pBehind<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;14-链表中倒数第k个节点&quot;&gt;&lt;a href=&quot;#14-链表中倒数第k个节点&quot; class=&quot;headerlink&quot; title=&quot;14. 链表中倒数第k个节点&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.nowcoder.com/practice/529
      
    
    </summary>
    
      <category term="剑指 offer" scheme="http://blog.wenguang0816.top/categories/%E5%89%91%E6%8C%87-offer/"/>
    
    
      <category term="链表" scheme="http://blog.wenguang0816.top/tags/%E9%93%BE%E8%A1%A8/"/>
    
      <category term="鲁棒性" scheme="http://blog.wenguang0816.top/tags/%E9%B2%81%E6%A3%92%E6%80%A7/"/>
    
  </entry>
  
  <entry>
    <title>左旋转字符串</title>
    <link href="http://blog.wenguang0816.top/2019/04/21/sword_refers_to_offer/43_leftrotatestring/"/>
    <id>http://blog.wenguang0816.top/2019/04/21/sword_refers_to_offer/43_leftrotatestring/</id>
    <published>2019-04-21T18:23:00.000Z</published>
    <updated>2019-07-18T14:35:18.381Z</updated>
    
    <content type="html"><![CDATA[<h3 id="43-左旋转字符串"><a href="#43-左旋转字符串" class="headerlink" title="43. 左旋转字符串"></a><a href="https://www.nowcoder.com/practice/12d959b108cb42b1ab72cef4d36af5ec?tpId=13&tqId=11196&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking" target="_blank" rel="noopener">43. 左旋转字符串</a></h3><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>汇编语言中有一种移位指令叫做循环左移（ROL），现在有个简单的任务，就是用字符串模拟这个指令的运算结果。对于一个给定的字符序列S，请你把其循环左移K位后的序列输出。例如，字符序列S=”abcXYZdef”,要求输出循环左移3位后的结果，即“XYZdefabc”。是不是很简单？OK，搞定它！</p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h3><ul><li>思路1: 首先确定左移之后第一个字符在原字符串中的位置<code>begin</code>，然后从<code>begin</code>向后遍历完原字符串，然后从0开始遍历到<code>begin</code>，将两部分拼接即可</li><li>思路2: <code>begin</code>为分界线，将两侧字符串分别反转，然后再将整个字符串反转</li></ul><h3 id="解答："><a href="#解答：" class="headerlink" title="解答："></a>解答：</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// 解法1:</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    string <span class="token function">LeftRotateString</span><span class="token punctuation">(</span>string str<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>len <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>        string res <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> begin <span class="token operator">=</span> n <span class="token operator">%</span> len<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> begin<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>            res <span class="token operator">+</span><span class="token operator">=</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> begin<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>            res <span class="token operator">+</span><span class="token operator">=</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 解法2:</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    string <span class="token function">LeftRotateString</span><span class="token punctuation">(</span>string str<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>len <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> begin <span class="token operator">=</span> n <span class="token operator">%</span> len<span class="token punctuation">;</span>        <span class="token function">reverse</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> str<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> begin<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">reverse</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> begin<span class="token punctuation">,</span> str<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">reverse</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> str<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> str<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;43-左旋转字符串&quot;&gt;&lt;a href=&quot;#43-左旋转字符串&quot; class=&quot;headerlink&quot; title=&quot;43. 左旋转字符串&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.nowcoder.com/practice/12d959b108cb42b
      
    
    </summary>
    
      <category term="剑指 offer" scheme="http://blog.wenguang0816.top/categories/%E5%89%91%E6%8C%87-offer/"/>
    
    
      <category term="字符串" scheme="http://blog.wenguang0816.top/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>把字符串转换成整数</title>
    <link href="http://blog.wenguang0816.top/2019/04/21/sword_refers_to_offer/49_strtoint/"/>
    <id>http://blog.wenguang0816.top/2019/04/21/sword_refers_to_offer/49_strtoint/</id>
    <published>2019-04-21T17:51:00.000Z</published>
    <updated>2019-07-18T14:35:18.381Z</updated>
    
    <content type="html"><![CDATA[<h3 id="49-把字符串转换成整数"><a href="#49-把字符串转换成整数" class="headerlink" title="49. 把字符串转换成整数"></a><a href="https://www.nowcoder.com/practice/1277c681251b4372bdef344468e4f26e?tpId=13&tqId=11202&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking" target="_blank" rel="noopener">49. 把字符串转换成整数</a></h3><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>将一个字符串转换成一个整数(实现Integer.valueOf(string)的功能，但是string不符合数字要求时返回0)，要求不能使用字符串转换整数的库函数。 数值为0或者字符串不是一个合法的数值则返回0。</p><h4 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述"></a>输入描述</h4><blockquote><p>输入一个字符串,包括数字字母符号,可以为空</p></blockquote><h4 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述"></a>输出描述</h4><blockquote><p>如果是合法的数值表达则返回该数字，否则返回0</p></blockquote><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><blockquote><p>输入</p><blockquote><p>+2147483647</p><p>1a33</p></blockquote><p>输出</p><blockquote><p>2147483647</p><p>0</p></blockquote></blockquote><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h3><p>本题目要将字符串转换成整数，方法并不复杂，但是要考虑异常处理：</p><ul><li>字符串是否为空</li><li>字符串对正负号进行处理</li><li>输入值是否合法</li><li>返回值类型为int，所以要考虑是否有溢出，int范围(-2147483648 ~ 2147483647)</li></ul><h3 id="解答："><a href="#解答：" class="headerlink" title="解答："></a>解答：</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">StrToInt</span><span class="token punctuation">(</span>string str<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 判断字符串是否为空</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>len <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> begin <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> isNegative <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 处理'+', '-'</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'+'</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            isNegative <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            begin <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'-'</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            isNegative <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            begin <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> position <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 以long long 类型存储转换结果</span>        <span class="token keyword">long</span> <span class="token keyword">long</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> len <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> begin<span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token string">'0'</span> <span class="token operator">||</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token string">'9'</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>            res <span class="token operator">+</span><span class="token operator">=</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">)</span> <span class="token operator">*</span> position<span class="token punctuation">;</span>            position <span class="token operator">*</span><span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 判断是否溢出</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>isNegative <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> res <span class="token operator">></span> <span class="token number">0x7fffffff</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>isNegative <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> res <span class="token operator">></span> <span class="token number">0x80000000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            res <span class="token operator">=</span> isNegative <span class="token operator">?</span> <span class="token operator">-</span>res <span class="token operator">:</span> res<span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;49-把字符串转换成整数&quot;&gt;&lt;a href=&quot;#49-把字符串转换成整数&quot; class=&quot;headerlink&quot; title=&quot;49. 把字符串转换成整数&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.nowcoder.com/practice/1277c6
      
    
    </summary>
    
      <category term="剑指 offer" scheme="http://blog.wenguang0816.top/categories/%E5%89%91%E6%8C%87-offer/"/>
    
    
      <category term="字符串" scheme="http://blog.wenguang0816.top/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>数值的整数次方</title>
    <link href="http://blog.wenguang0816.top/2019/04/21/sword_refers_to_offer/12_power/"/>
    <id>http://blog.wenguang0816.top/2019/04/21/sword_refers_to_offer/12_power/</id>
    <published>2019-04-21T13:52:00.000Z</published>
    <updated>2019-07-18T14:35:18.381Z</updated>
    
    <content type="html"><![CDATA[<h3 id="12-数值的整数次方"><a href="#12-数值的整数次方" class="headerlink" title="12. 数值的整数次方"></a><a href="https://www.nowcoder.com/practice/1a834e5e3e1a4b7ba251417554e07c00?tpId=13&tqId=11165&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking" target="_blank" rel="noopener">12. 数值的整数次方</a></h3><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定一个double类型的浮点数base和int类型的整数exponent。求base的exponent次方。</p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h3><ul><li>思路1：直接求解</li><li>思路2：简单快速幂：<ul><li>写出指数的二进制表达，例如<code>13</code>的二进制为<code>1101</code></li><li>以底数为<code>10</code>为例：<code>10^13 = 10^1101 = 10^0001 * 10^0100 * 10^1000</code></li></ul></li></ul><h3 id="解答："><a href="#解答：" class="headerlink" title="解答："></a>解答：</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// 方法1</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">double</span> <span class="token function">Power</span><span class="token punctuation">(</span><span class="token keyword">double</span> base<span class="token punctuation">,</span> <span class="token keyword">int</span> exponent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">double</span> res <span class="token operator">=</span> <span class="token number">1.0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>exponent <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>exponent <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>base <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token keyword">throw</span> <span class="token string">"The denominator cannot be 0"</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                base <span class="token operator">=</span> <span class="token number">1.0</span> <span class="token operator">/</span> base<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>exponent<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            res <span class="token operator">*</span><span class="token operator">=</span> base<span class="token punctuation">;</span>            exponent <span class="token operator">=</span> <span class="token punctuation">(</span>exponent <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token operator">--</span>exponent <span class="token operator">:</span> <span class="token operator">++</span>exponent<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 方法2:</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">double</span> <span class="token function">Power</span><span class="token punctuation">(</span><span class="token keyword">double</span> base<span class="token punctuation">,</span> <span class="token keyword">int</span> exponent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">double</span> res <span class="token operator">=</span> <span class="token number">1.0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 指数正负标志位，1为正</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>exponent <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>exponent <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>base <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token keyword">throw</span> <span class="token string">"The denominator cannot be 0"</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                exponent <span class="token operator">=</span> <span class="token operator">-</span>exponent<span class="token punctuation">;</span>            flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>exponent <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>exponent <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>                res <span class="token operator">*</span><span class="token operator">=</span> base<span class="token punctuation">;</span>            base <span class="token operator">*</span><span class="token operator">=</span> base<span class="token punctuation">;</span>            exponent <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> flag <span class="token operator">?</span> res <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">/</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;12-数值的整数次方&quot;&gt;&lt;a href=&quot;#12-数值的整数次方&quot; class=&quot;headerlink&quot; title=&quot;12. 数值的整数次方&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.nowcoder.com/practice/1a834e5e3e1a
      
    
    </summary>
    
      <category term="剑指 offer" scheme="http://blog.wenguang0816.top/categories/%E5%89%91%E6%8C%87-offer/"/>
    
    
      <category term="数学" scheme="http://blog.wenguang0816.top/tags/%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>用两个栈实现队列</title>
    <link href="http://blog.wenguang0816.top/2019/04/18/sword_refers_to_offer/05_queue_with_two_stacks/"/>
    <id>http://blog.wenguang0816.top/2019/04/18/sword_refers_to_offer/05_queue_with_two_stacks/</id>
    <published>2019-04-18T09:20:00.000Z</published>
    <updated>2019-07-18T14:35:18.381Z</updated>
    
    <content type="html"><![CDATA[<h3 id="5-用两个栈实现队列"><a href="#5-用两个栈实现队列" class="headerlink" title="5. 用两个栈实现队列"></a><a href="https://www.nowcoder.com/practice/54275ddae22f475981afa2244dd448c6?tpId=13&tqId=11158&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking" target="_blank" rel="noopener">5. 用两个栈实现队列</a></h3><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>用两个栈来实现一个队列，完成队列的Push和Pop操作。 队列中的元素为int类型。</p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h3><p>入队：将元素进栈A<br>出队：判断栈B是否为空，如果为空，则将栈A中所有元素依次出栈，并压栈进入栈B，之后栈B出栈；如果不为空，栈B直接出栈。</p><h3 id="解答："><a href="#解答：" class="headerlink" title="解答："></a>解答：</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">int</span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>        stack1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>stack2<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> stack1<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 队列为空，异常处理</span>            <span class="token keyword">throw</span> <span class="token string">"The queue is empty!"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>stack2<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stack1<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">int</span> tmp <span class="token operator">=</span> stack1<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                stack1<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                stack2<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> top <span class="token operator">=</span> stack2<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stack2<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> top<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">private</span><span class="token operator">:</span>    stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> stack1<span class="token punctuation">;</span>    stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> stack2<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;5-用两个栈实现队列&quot;&gt;&lt;a href=&quot;#5-用两个栈实现队列&quot; class=&quot;headerlink&quot; title=&quot;5. 用两个栈实现队列&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.nowcoder.com/practice/54275ddae22f
      
    
    </summary>
    
      <category term="剑指 offer" scheme="http://blog.wenguang0816.top/categories/%E5%89%91%E6%8C%87-offer/"/>
    
    
      <category term="栈" scheme="http://blog.wenguang0816.top/tags/%E6%A0%88/"/>
    
      <category term="队列" scheme="http://blog.wenguang0816.top/tags/%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>二叉树的镜像</title>
    <link href="http://blog.wenguang0816.top/2019/04/17/sword_refers_to_offer/18_mirror/"/>
    <id>http://blog.wenguang0816.top/2019/04/17/sword_refers_to_offer/18_mirror/</id>
    <published>2019-04-17T21:48:00.000Z</published>
    <updated>2019-07-18T14:35:18.381Z</updated>
    
    <content type="html"><![CDATA[<h3 id="18-二叉树的镜像"><a href="#18-二叉树的镜像" class="headerlink" title="18. 二叉树的镜像"></a><a href="https://www.nowcoder.com/practice/564f4c26aa584921bc75623e48ca3011?tpId=13&tqId=11171&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking" target="_blank" rel="noopener">18. 二叉树的镜像</a></h3><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>操作给定的二叉树，将其变换为源二叉树的镜像。</p><h4 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述"></a>输入描述</h4><pre><code>二叉树的镜像定义：源二叉树             8           /  \          6   10         / \  / \        5  7 9 11        镜像二叉树            8           /  \          10   6         / \  / \        11 9 7  5</code></pre><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h3><p>使用递归思路，先交换根节点的两个子节点，再交换子节点的两个子节点</p><h3 id="解答："><a href="#解答：" class="headerlink" title="解答："></a>解答：</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*struct TreeNode {    int val;    struct TreeNode *left;    struct TreeNode *right;    TreeNode(int x) :            val(x), left(NULL), right(NULL) {    }};*/</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">Mirror</span><span class="token punctuation">(</span>TreeNode <span class="token operator">*</span>pRoot<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>pRoot<span class="token punctuation">)</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        TreeNode <span class="token operator">*</span>tmp <span class="token operator">=</span> pRoot<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">;</span>        pRoot<span class="token operator">-</span><span class="token operator">></span>left <span class="token operator">=</span> pRoot<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">;</span>        pRoot<span class="token operator">-</span><span class="token operator">></span>right <span class="token operator">=</span> tmp<span class="token punctuation">;</span>        <span class="token function">Mirror</span><span class="token punctuation">(</span>pRoot<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Mirror</span><span class="token punctuation">(</span>pRoot<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;18-二叉树的镜像&quot;&gt;&lt;a href=&quot;#18-二叉树的镜像&quot; class=&quot;headerlink&quot; title=&quot;18. 二叉树的镜像&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.nowcoder.com/practice/564f4c26aa58492
      
    
    </summary>
    
      <category term="剑指 offer" scheme="http://blog.wenguang0816.top/categories/%E5%89%91%E6%8C%87-offer/"/>
    
    
      <category term="二叉树" scheme="http://blog.wenguang0816.top/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
      <category term="栈" scheme="http://blog.wenguang0816.top/tags/%E6%A0%88/"/>
    
      <category term="递归" scheme="http://blog.wenguang0816.top/tags/%E9%80%92%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>二叉树的深度</title>
    <link href="http://blog.wenguang0816.top/2019/04/17/sword_refers_to_offer/38_treedepth/"/>
    <id>http://blog.wenguang0816.top/2019/04/17/sword_refers_to_offer/38_treedepth/</id>
    <published>2019-04-17T20:46:00.000Z</published>
    <updated>2019-07-18T14:35:18.381Z</updated>
    
    <content type="html"><![CDATA[<h3 id="38-二叉树的深度"><a href="#38-二叉树的深度" class="headerlink" title="38. 二叉树的深度"></a><a href="https://www.nowcoder.com/practice/435fb86331474282a3499955f0a41e8b?tpId=13&tqId=11191&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking" target="_blank" rel="noopener">38. 二叉树的深度</a></h3><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>输入一棵二叉树，求该树的深度。从根结点到叶结点依次经过的结点（含根、叶结点）形成树的一条路径，最长路径的长度为树的深度。</p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h3><ul><li>思路1: 使用递归思路，属于DFS（深度优先搜索），时间复杂度为<code>O(N)</code>，空间复杂度：在最糟糕的情况下，树是完全不平衡的，例如每个结点只剩下左子结点，递归将会被调用<code>N</code>次（树的高度），因此保持调用栈的存储将是<code>O(N)</code>。但在最好的情况下（树是完全平衡的），树的高度将是<code>log(N)</code>。因此，在这种情况下的空间复杂度将是<code>O(log(N))</code>。</li><li>思路2: 使用迭代思路，引入一个栈，使用 DFS 策略访问每个结点，同时在每次访问时更新最大深度。时间复杂度为<code>O(N)</code>，空间复杂度将是<code>O(N)</code>。</li></ul><h3 id="解答："><a href="#解答：" class="headerlink" title="解答："></a>解答：</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*struct TreeNode {    int val;    struct TreeNode *left;    struct TreeNode *right;    TreeNode(int x) :            val(x), left(NULL), right(NULL) {    }};*/</span><span class="token comment" spellcheck="true">// 解法1:</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">TreeDepth</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> pRoot<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>pRoot<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token function">TreeDepth</span><span class="token punctuation">(</span>pRoot<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token function">TreeDepth</span><span class="token punctuation">(</span>pRoot<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 解法2:</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">TreeDepth</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> pRoot<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>pRoot<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        queue<span class="token operator">&lt;</span>TreeNode <span class="token operator">*</span><span class="token operator">></span> que<span class="token punctuation">;</span>        que<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>pRoot<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> depth <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>que<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 队列中每次迭代都只存储了一层的元素</span>            <span class="token keyword">int</span> size <span class="token operator">=</span> que<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            depth<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                TreeNode <span class="token operator">*</span>node <span class="token operator">=</span> que<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                que<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">)</span>                    que<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">)</span>                    que<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> depth<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;38-二叉树的深度&quot;&gt;&lt;a href=&quot;#38-二叉树的深度&quot; class=&quot;headerlink&quot; title=&quot;38. 二叉树的深度&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.nowcoder.com/practice/435fb8633147428
      
    
    </summary>
    
      <category term="剑指 offer" scheme="http://blog.wenguang0816.top/categories/%E5%89%91%E6%8C%87-offer/"/>
    
    
      <category term="二叉树" scheme="http://blog.wenguang0816.top/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
      <category term="栈" scheme="http://blog.wenguang0816.top/tags/%E6%A0%88/"/>
    
      <category term="递归" scheme="http://blog.wenguang0816.top/tags/%E9%80%92%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>构建乘积数组</title>
    <link href="http://blog.wenguang0816.top/2019/04/04/sword_refers_to_offer/51_multiply/"/>
    <id>http://blog.wenguang0816.top/2019/04/04/sword_refers_to_offer/51_multiply/</id>
    <published>2019-04-04T10:50:00.000Z</published>
    <updated>2019-07-18T14:35:18.381Z</updated>
    
    <content type="html"><![CDATA[<h3 id="51-构建乘积数组"><a href="#51-构建乘积数组" class="headerlink" title="51. 构建乘积数组"></a><a href="https://www.nowcoder.com/practice/94a4d381a68b47b7a8bed86f2975db46?tpId=13&tqId=11204&tPage=2&rp=2&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking" target="_blank" rel="noopener">51. 构建乘积数组</a></h3><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定一个数组<code>A[0,1,...,n-1]</code>,请构建一个数组<code>B[0,1,...,n-1]</code>,其中B中的元素<code>B[i]=A[0]*A[1]*...*A[i-1]*A[i+1]*...*A[n-1]</code>。不能使用除法。</p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h3><ul><li>思路1: 遍历数组，时间复杂度O(n)</li><li>思路2: </li></ul><table><thead><tr><th>B<sub>i</sub></th><th>A<sub>0</sub></th><th>A<sub>1</sub></th><th>A<sub>2</sub></th><th>…</th><th>A<sub>n-2</sub></th><th>A<sub>n-1</sub></th></tr></thead><tbody><tr><td>B<sub>0</sub></td><td><strong>1</strong></td><td>A<sub>1</sub></td><td>A<sub>2</sub></td><td>…</td><td>A<sub>n-2</sub></td><td>A<sub>n-1</sub></td></tr><tr><td>B<sub>1</sub></td><td>A<sub>0</sub></td><td><strong>1</strong></td><td>A<sub>2</sub></td><td>…</td><td>A<sub>n-2</sub></td><td>A<sub>n-1</sub></td></tr><tr><td>B<sub>2</sub></td><td>A<sub>0</sub></td><td>A<sub>1</sub></td><td><strong>1</strong></td><td>…</td><td>A<sub>n-2</sub></td><td>A<sub>n-1</sub></td></tr><tr><td>B<sub>0</sub></td><td>…</td><td>…</td><td>…</td><td>…</td><td>…</td><td>…</td></tr><tr><td>B<sub>n-2</sub></td><td>A<sub>0</sub></td><td>A<sub>1</sub></td><td>A<sub>2</sub></td><td>…</td><td><strong>1</strong></td><td>A<sub>n-1</sub></td></tr><tr><td>B<sub>n-1</sub></td><td>A<sub>0</sub></td><td>A<sub>1</sub></td><td>A<sub>2</sub></td><td>…</td><td>A<sub>n-2</sub></td><td><strong>1</strong></td></tr></tbody></table><p>通过观察，B<sub>i</sub>的值可以看作表格中每一行的乘积，下三角连乘易求得，上三角，从下向上也是连乘，所以我们可以先计算下三角中的连乘，再算上三角的连乘，将B<sub>i</sub>两部分相乘即可。</p><h3 id="解答："><a href="#解答：" class="headerlink" title="解答："></a>解答：</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// 解法1:</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">multiply</span><span class="token punctuation">(</span><span class="token keyword">const</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> A<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> A<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> B<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> bi <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> j<span class="token punctuation">)</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                bi <span class="token operator">*</span><span class="token operator">=</span> A<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>            B<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>bi<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> B<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 解法2:</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">multiply</span><span class="token punctuation">(</span><span class="token keyword">const</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> A<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> A<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">B</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>len <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> B<span class="token punctuation">;</span>        B<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 计算下三角</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            B<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> B<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">*</span> A<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> tmp <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//计算上三角</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> len <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            tmp <span class="token operator">*</span><span class="token operator">=</span> A<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            B<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span><span class="token operator">=</span> tmp<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> B<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;51-构建乘积数组&quot;&gt;&lt;a href=&quot;#51-构建乘积数组&quot; class=&quot;headerlink&quot; title=&quot;51. 构建乘积数组&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.nowcoder.com/practice/94a4d381a68b47b
      
    
    </summary>
    
      <category term="剑指 offer" scheme="http://blog.wenguang0816.top/categories/%E5%89%91%E6%8C%87-offer/"/>
    
    
      <category term="数组" scheme="http://blog.wenguang0816.top/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>矩形覆盖</title>
    <link href="http://blog.wenguang0816.top/2019/04/04/sword_refers_to_offer/10_rectcover/"/>
    <id>http://blog.wenguang0816.top/2019/04/04/sword_refers_to_offer/10_rectcover/</id>
    <published>2019-04-04T10:30:00.000Z</published>
    <updated>2019-07-18T14:35:18.381Z</updated>
    
    <content type="html"><![CDATA[<h3 id="10-矩形覆盖"><a href="#10-矩形覆盖" class="headerlink" title="10. 矩形覆盖"></a><a href="https://www.nowcoder.com/practice/72a5a919508a4251859fb2cfb987a0e6?tpId=13&tqId=11163&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking" target="_blank" rel="noopener">10. 矩形覆盖</a></h3><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>我们可以用<code>2*1</code>的小矩形横着或者竖着去覆盖更大的矩形。请问用n个<code>2*1</code>的小矩形无重叠地覆盖一个<code>2*n</code>的大矩形，总共有多少种方法？</p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h3><p>这仍然是一个斐波那契数列问题。</p><pre><code>f(1) = 1f(2) = 2f(n) = f(n-1) + f(n-2)</code></pre><h3 id="解答："><a href="#解答：" class="headerlink" title="解答："></a>解答：</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">rectCover</span><span class="token punctuation">(</span><span class="token keyword">int</span> number<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>number <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>number <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> first <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> second <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> third <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> number<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            third <span class="token operator">=</span> first <span class="token operator">+</span> second<span class="token punctuation">;</span>            first <span class="token operator">=</span> second<span class="token punctuation">;</span>            second <span class="token operator">=</span> third<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> third<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;10-矩形覆盖&quot;&gt;&lt;a href=&quot;#10-矩形覆盖&quot; class=&quot;headerlink&quot; title=&quot;10. 矩形覆盖&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.nowcoder.com/practice/72a5a919508a4251859fb
      
    
    </summary>
    
      <category term="剑指 offer" scheme="http://blog.wenguang0816.top/categories/%E5%89%91%E6%8C%87-offer/"/>
    
    
      <category term="递归" scheme="http://blog.wenguang0816.top/tags/%E9%80%92%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>变态跳台阶</title>
    <link href="http://blog.wenguang0816.top/2019/04/03/sword_refers_to_offer/09_jumpfloorii/"/>
    <id>http://blog.wenguang0816.top/2019/04/03/sword_refers_to_offer/09_jumpfloorii/</id>
    <published>2019-04-03T15:25:00.000Z</published>
    <updated>2019-07-18T14:35:18.381Z</updated>
    
    <content type="html"><![CDATA[<h3 id="9-变态跳台阶"><a href="#9-变态跳台阶" class="headerlink" title="9. 变态跳台阶"></a><a href="https://www.nowcoder.com/practice/22243d016f6b47f2a6928b4313c85387?tpId=13&tqId=11162&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking" target="_blank" rel="noopener">9. 变态跳台阶</a></h3><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>一只青蛙一次可以跳上1级台阶，也可以跳上2级……它也可以跳上n级。求该青蛙跳上一个n级的台阶总共有多少种跳法。</p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h3><ul><li>思路1: 利用递归思路，可参考<a href="http://blog.wenguang0816.top/2019/04/03/08-jumpfloor/">8、跳台阶</a><br>递归公式为：<pre><code>f(1) = 1f(2) = 1 + f(1) = 2f(3) = 1 + f(1) + f(2) = 4...f(n) = 1 + f(1) + f(2) + ... + f(n-1)</code></pre>另外可以观察到：<br>```<br>f(n) = 1 + f(1) + f(2) + … + f(n-2) + f(n-1)<br>f(n-1) = 1 + f(1) + f(2) + … + f(n-2) + f(n-1)</li></ul><p>–&gt;<br>f(n) = 2*f(n-1)</p><pre><code>+ 思路2: 除最后一个台阶外，每一个台阶都可以选择跳或者不跳，故`f(n) = 2 ^ (n - 1)`### 解答：```cpp// 解法1:class Solution {public:    int jumpFloorII(int number) {        if(number &lt;= 0)            return 0;        if(number == 1)            return 1;        int ans = 1;        while(number &gt; 0)        {            ans += jumpFloorII(number -1);            --number;        }        return ans;    }};// 解法2:class Solution {public:    int jumpFloorII(int number) {        if(number &lt;= 0)            return 0;        if(number == 1)            return 1;        int ans = 1;        return 2 * jumpFloorII(number - 1);    }};// 解法3:class Solution {public:    int jumpFloorII(int number) {        int ans =  pow(2, number - 1);        return ans;    }};</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;9-变态跳台阶&quot;&gt;&lt;a href=&quot;#9-变态跳台阶&quot; class=&quot;headerlink&quot; title=&quot;9. 变态跳台阶&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.nowcoder.com/practice/22243d016f6b47f2a6928
      
    
    </summary>
    
      <category term="剑指 offer" scheme="http://blog.wenguang0816.top/categories/%E5%89%91%E6%8C%87-offer/"/>
    
    
      <category term="循环" scheme="http://blog.wenguang0816.top/tags/%E5%BE%AA%E7%8E%AF/"/>
    
      <category term="递归" scheme="http://blog.wenguang0816.top/tags/%E9%80%92%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>跳台阶</title>
    <link href="http://blog.wenguang0816.top/2019/04/03/sword_refers_to_offer/08_jumpfloor/"/>
    <id>http://blog.wenguang0816.top/2019/04/03/sword_refers_to_offer/08_jumpfloor/</id>
    <published>2019-04-03T15:00:00.000Z</published>
    <updated>2019-07-18T14:35:18.381Z</updated>
    
    <content type="html"><![CDATA[<h3 id="8-跳台阶"><a href="#8-跳台阶" class="headerlink" title="8. 跳台阶"></a><a href="https://www.nowcoder.com/practice/8c82a5b80378478f9484d87d1c5f12a4?tpId=13&tqId=11161&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking" target="_blank" rel="noopener">8. 跳台阶</a></h3><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>一只青蛙一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个n级的台阶总共有多少种跳法（先后次序不同算不同的结果）。</p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h3><p>利用递归思想：可以根据第一步的走法，将所有走法分为两类，第一类是第一步走<code>1</code>个台阶，另一类是第一步走<code>2</code>个台阶，所以<code>n</code>个台阶的走法就等于先走<code>1</code>个台阶后<code>n-1</code>个台阶的走法，加上先走<code>2</code>个台阶后<code>n-2</code>个台阶的走法，用公式表示为：</p><pre><code>f(n) = f(n-1) + f(n-2)</code></pre><p>有了递归公式，接下来就需要确定终止条件了，当有<code>1</code>个台阶时，只有一种走法，<code>f(1) = 1</code>，当有<code>2</code>个台阶时，有两种走法，<code>f(2) = 2</code>，因此递归公式为：</p><pre><code>f(1) = 1f(2) = 2f(n) = f(n-1) + f(n-2)</code></pre><p>通过观察递归公式可以发现，递归公式和斐波那契数列相似，则可以改进代码，提高算法运行效率</p><h3 id="解答："><a href="#解答：" class="headerlink" title="解答："></a>解答：</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// 解法1:</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">jumpFloor</span><span class="token punctuation">(</span><span class="token keyword">int</span> number<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>number <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>number <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">jumpFloor</span><span class="token punctuation">(</span>number <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">jumpFloor</span><span class="token punctuation">(</span>number <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 解法2:</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">jumpFloor</span><span class="token punctuation">(</span><span class="token keyword">int</span> number<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> first <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> second <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> third <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>number <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>number <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> number<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            third <span class="token operator">=</span> first <span class="token operator">+</span> second<span class="token punctuation">;</span>            first <span class="token operator">=</span> second<span class="token punctuation">;</span>            second <span class="token operator">=</span> third<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> third<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;8-跳台阶&quot;&gt;&lt;a href=&quot;#8-跳台阶&quot; class=&quot;headerlink&quot; title=&quot;8. 跳台阶&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.nowcoder.com/practice/8c82a5b80378478f9484d87d1c5
      
    
    </summary>
    
      <category term="剑指 offer" scheme="http://blog.wenguang0816.top/categories/%E5%89%91%E6%8C%87-offer/"/>
    
    
      <category term="数组" scheme="http://blog.wenguang0816.top/tags/%E6%95%B0%E7%BB%84/"/>
    
      <category term="查找" scheme="http://blog.wenguang0816.top/tags/%E6%9F%A5%E6%89%BE/"/>
    
  </entry>
  
  <entry>
    <title>剑指 offer 刷题笔记链接汇总</title>
    <link href="http://blog.wenguang0816.top/2019/04/03/sword_refers_to_offer/sword_refers_to_offer/"/>
    <id>http://blog.wenguang0816.top/2019/04/03/sword_refers_to_offer/sword_refers_to_offer/</id>
    <published>2019-04-03T14:20:00.000Z</published>
    <updated>2019-07-18T14:35:18.381Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://blog.wenguang0816.top/2019/04/01/sword_refers_to_offer/01_lookup_in_a_two_dimensional_array/">1、二维数组中的查找</a></p><p>[2、替换空格]</p><p><a href="http://blog.wenguang0816.top/2019/04/02/sword_refers_to_offer/03_print_linkedlist_from_tail_to_head/">3、从尾到头打印链表</a></p><p>[4、重建二叉树]</p><p><a href="http://blog.wenguang0816.top/2019/04/18/sword_refers_to_offer/05_queue_with_two_stacks/">5、用两个栈实现队列</a></p><p>[6、循转数组的最小数字]</p><p><a href="http://blog.wenguang0816.top/2019/04/01/sword_refers_to_offer/07_fibonacci_series/">7、斐波那契数列</a></p><p><a href="http://blog.wenguang0816.top/2019/04/03/sword_refers_to_offer/08_jumpfloor/">8、跳台阶</a></p><p><a href="http://blog.wenguang0816.top/2019/04/03/sword_refers_to_offer/09_jumpfloorii/">9、变态跳台阶</a></p><p><a href="http://blog.wenguang0816.top/2019/04/04/sword_refers_to_offer/10_rectcover/">10、矩形覆盖</a></p><p><a href="http://blog.wenguang0816.top/2019/04/01/sword_refers_to_offer/11_number_of_1_bits/">11、二进制中1的个数</a></p><p><a href="http://blog.wenguang0816.top/2019/04/21/sword_refers_to_offer/12_power/">12、数值的整数次方</a></p><p>[13、调整数组顺序使奇数位于偶数前面]</p><p><a href="http://blog.wenguang0816.top/2019/04/23/sword_refers_to_offer/14_findkthtotail/">14、链表中倒数第k个节点</a></p><p><a href="http://blog.wenguang0816.top/2019/04/02/sword_refers_to_offer/15_reverse_linkedlist/">15、反转链表</a></p><p>[16、合并两个排序的链表]</p><p>[17、树的字结构]</p><p><a href="http://blog.wenguang0816.top/2019/04/17/sword_refers_to_offer/18_mirror/">18、二叉树的镜像</a></p><p>[19、顺时针打印矩阵]</p><p>[20、包含min函数的栈]</p><p>[21、栈的压入、弹出序列]</p><p>[22、从上往下打印二叉树]</p><p>[23、二叉搜索树的后序遍历序列]</p><p>[24、二叉树中和为某一值的路径]</p><p>[25、复杂链表的复制]</p><p>[26、二叉搜索树与双向链表]</p><p>[27、字符串的排列]</p><p>[28、数组中出现次数超过一半的数字]</p><p>[29、最小的k个数]</p><p>[30、连续子数组的最大和]</p><p>[31、整数中1出现的次数（从1到n整数中1出现的次数）]</p><p>[32、把数组排成最小的数]</p><p>[33、丑数]</p><p>[34、第一个只出现一次的字符]</p><p>[35、数组中的逆序对]</p><p>[36、两个链表的第一个公共结点]</p><p>[37、数字在排序数组中出现的次数]</p><p><a href="http://blog.wenguang0816.top/2019/04/17/sword_refers_to_offer/38_treedepth/">38、二叉树的深度</a></p><p>[39、平衡二叉树]</p><p>[40、数组中只出现一次的数字]</p><p>[41、和为S的连续正数序列]</p><p>[42、和为S的两个数字]</p><p><a href="http://blog.wenguang0816.top/2019/04/21/sword_refers_to_offer/43_leftrotatestring/">43、左旋转字符串</a></p><p>[44、翻转单词顺序列]</p><p>[45、扑克牌顺子]</p><p>[46、孩子们的游戏（圆圈中最后剩下的数）]</p><p><a href="http://blog.wenguang0816.top/2019/04/02/sword_refers_to_offer/47_sum/">47、求1+2+3+…+n</a></p><p>[48、不用加减乘除做加法]</p><p><a href="http://blog.wenguang0816.top/2019/04/21/sword_refers_to_offer/49_strtoint/">49、把字符串转换成整数</a></p><p>[50、数组中重复的数字]</p><p><a href="http://blog.wenguang0816.top/2019/04/04/sword_refers_to_offer/51_multiply/">51、构建乘积数组</a></p><p>[52、正则表达式匹配]</p><p>[53、表示数值的字符串]</p><p>[54、字符流中第一个不重复的字符]</p><p><a href="http://blog.wenguang0816.top/2019/04/23/sword_refers_to_offer/55_entrynodeofloop/">55、链表中环的入口节点</a></p><p>[56、删除链表中重复的节点]</p><p>[57、二叉树的下一个节点]</p><p>[58、对称的二叉树]</p><p>[59、按之字形顺序打印二叉树]</p><p>[60、把二叉树打印成多行]</p><p>[61、序列化二叉树]</p><p>[62、二叉搜索树的第k个节点]</p><p>[63、数据流中的中位数]</p><p>[64、滑动窗口的最大值]</p><p>[65、矩阵中的路径]</p><p>[66、机器人的运动范围]</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;http://blog.wenguang0816.top/2019/04/01/sword_refers_to_offer/01_lookup_in_a_two_dimensional_array/&quot;&gt;1、二维数组中的查找&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[2、替换
      
    
    </summary>
    
      <category term="剑指 offer" scheme="http://blog.wenguang0816.top/categories/%E5%89%91%E6%8C%87-offer/"/>
    
    
      <category term="索引" scheme="http://blog.wenguang0816.top/tags/%E7%B4%A2%E5%BC%95/"/>
    
  </entry>
  
  <entry>
    <title>反转链表</title>
    <link href="http://blog.wenguang0816.top/2019/04/02/sword_refers_to_offer/15_reverse_linkedlist/"/>
    <id>http://blog.wenguang0816.top/2019/04/02/sword_refers_to_offer/15_reverse_linkedlist/</id>
    <published>2019-04-02T20:00:00.000Z</published>
    <updated>2019-07-18T14:35:18.381Z</updated>
    
    <content type="html"><![CDATA[<h3 id="15-反转链表"><a href="#15-反转链表" class="headerlink" title="15. 反转链表"></a><a href="https://www.nowcoder.com/practice/75e878df47f24fdc9dc3e400ec6058ca?tpId=13&tqId=11168&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking" target="_blank" rel="noopener">15. 反转链表</a></h3><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>输入一个链表，反转链表后，输出新链表的表头。</p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h3><p>通过3个指针遍历一遍链表，实现链表反转，详细过程参见<a href="http://blog.wenguang0816.top/2019/03/20/reverse-linked-list/">（转载）漫画：如何将一个链表“逆序”？</a></p><h3 id="解答："><a href="#解答：" class="headerlink" title="解答："></a>解答：</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*struct ListNode {    int val;    struct ListNode *next;    ListNode(int x) :            val(x), next(NULL) {    }};*/</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    ListNode<span class="token operator">*</span> <span class="token function">ReverseList</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> pHead<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>pHead <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> pHead<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> pHead<span class="token punctuation">;</span>        ListNode <span class="token operator">*</span>p1 <span class="token operator">=</span> pHead<span class="token punctuation">;</span>        ListNode <span class="token operator">*</span>p2 <span class="token operator">=</span> pHead<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>        ListNode <span class="token operator">*</span>p3 <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>p2 <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            p3 <span class="token operator">=</span> p2<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>            p2<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> p1<span class="token punctuation">;</span>            p1 <span class="token operator">=</span> p2<span class="token punctuation">;</span>            p2 <span class="token operator">=</span> p3<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        pHead<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        pHead <span class="token operator">=</span> p1<span class="token punctuation">;</span>        <span class="token keyword">return</span> pHead<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;15-反转链表&quot;&gt;&lt;a href=&quot;#15-反转链表&quot; class=&quot;headerlink&quot; title=&quot;15. 反转链表&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.nowcoder.com/practice/75e878df47f24fdc9dc3e
      
    
    </summary>
    
      <category term="剑指 offer" scheme="http://blog.wenguang0816.top/categories/%E5%89%91%E6%8C%87-offer/"/>
    
    
      <category term="链表" scheme="http://blog.wenguang0816.top/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>从尾到头打印链表</title>
    <link href="http://blog.wenguang0816.top/2019/04/02/sword_refers_to_offer/03_print_linkedlist_from_tail_to_head/"/>
    <id>http://blog.wenguang0816.top/2019/04/02/sword_refers_to_offer/03_print_linkedlist_from_tail_to_head/</id>
    <published>2019-04-02T15:00:00.000Z</published>
    <updated>2019-07-18T14:35:18.381Z</updated>
    
    <content type="html"><![CDATA[<h3 id="3-从尾到头打印链表"><a href="#3-从尾到头打印链表" class="headerlink" title="3. 从尾到头打印链表"></a><a href="https://www.nowcoder.com/practice/d0267f7f55b3412ba93bd35cfa8e8035?tpId=13&tqId=11156&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking" target="_blank" rel="noopener">3. 从尾到头打印链表</a></h3><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>输入一个链表，按链表值从尾到头的顺序返回一个ArrayList。</p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h3><ul><li>思路1: 利用栈先进后出的性质，将链表中的数据<code>push</code>到栈中，然后<code>pop</code>到<code>vector</code>中</li><li>思路2: 利用头插法，遍历链表，将链表元素插入到<code>vector</code>头部(缺点：需要多次分配空间)</li></ul><h3 id="解答："><a href="#解答：" class="headerlink" title="解答："></a>解答：</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/* *  struct ListNode { *        int val; *        struct ListNode *next; *        ListNode(int x) : *              val(x), next(NULL) { *        } *  }; */</span><span class="token comment" spellcheck="true">// 解法1:</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">printListFromTailToHead</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> ans<span class="token punctuation">;</span>        stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> nodes<span class="token punctuation">;</span>        ListNode<span class="token operator">*</span> pNode <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>pNode <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            nodes<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>pNode<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            pNode <span class="token operator">=</span> pNode<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>nodes<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            ans<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>nodes<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            nodes<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//解法2:</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">printListFromTailToHead</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> ans<span class="token punctuation">;</span>        ListNode<span class="token operator">*</span> pNode <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>pNode <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            ans<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>ans<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pNode<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            pNode <span class="token operator">=</span> pNode<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;3-从尾到头打印链表&quot;&gt;&lt;a href=&quot;#3-从尾到头打印链表&quot; class=&quot;headerlink&quot; title=&quot;3. 从尾到头打印链表&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.nowcoder.com/practice/d0267f7f55b3
      
    
    </summary>
    
      <category term="剑指 offer" scheme="http://blog.wenguang0816.top/categories/%E5%89%91%E6%8C%87-offer/"/>
    
    
      <category term="链表" scheme="http://blog.wenguang0816.top/tags/%E9%93%BE%E8%A1%A8/"/>
    
      <category term="栈" scheme="http://blog.wenguang0816.top/tags/%E6%A0%88/"/>
    
      <category term="头插法" scheme="http://blog.wenguang0816.top/tags/%E5%A4%B4%E6%8F%92%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>求1+2+3+...+n</title>
    <link href="http://blog.wenguang0816.top/2019/04/02/sword_refers_to_offer/47_sum/"/>
    <id>http://blog.wenguang0816.top/2019/04/02/sword_refers_to_offer/47_sum/</id>
    <published>2019-04-02T10:20:00.000Z</published>
    <updated>2019-07-18T14:35:18.381Z</updated>
    
    <content type="html"><![CDATA[<h3 id="47-求1-2-3-…-n"><a href="#47-求1-2-3-…-n" class="headerlink" title="47. 求1+2+3+…+n"></a><a href="https://www.nowcoder.com/practice/7a0da8fc483247ff8800059e12d7caf1?tpId=13&tqId=11200&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking" target="_blank" rel="noopener">47. 求1+2+3+…+n</a></h3><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>求1+2+3+…+n，要求不能使用乘除法、for、while、if、else、switch、case等关键字及条件判断语句（A?B:C）。</p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h3><ul><li>思路1: 首先想到的是递归，但是递归要有返回条件，题目中明确说明不能使用if判断(用了if也可以AC)，所以采用逻辑与的短路特性，作为递归的返回条件</li><li>思路2: 借助求和公式，<code>sum = n * (n + 1) / 2</code>，题目中规定不允许使用乘除法，可以借助求<code>n * (n + 1)</code>的二维数组的大小以及右移运算实现，有违规嫌疑</li></ul><h3 id="解答："><a href="#解答：" class="headerlink" title="解答："></a>解答：</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// 解法1:</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">Sum_Solution</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> n<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 逻辑与有短路特点，当前面为假时，则后面不计算，当ans = 0时，递归返回</span>        ans <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>ans <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">Sum_Solution</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 解法2:</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">Sum_Solution</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">bool</span> a<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;47-求1-2-3-…-n&quot;&gt;&lt;a href=&quot;#47-求1-2-3-…-n&quot; class=&quot;headerlink&quot; title=&quot;47. 求1+2+3+…+n&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.nowcoder.com/practice/7a0
      
    
    </summary>
    
      <category term="剑指 offer" scheme="http://blog.wenguang0816.top/categories/%E5%89%91%E6%8C%87-offer/"/>
    
    
      <category term="递归" scheme="http://blog.wenguang0816.top/tags/%E9%80%92%E5%BD%92/"/>
    
      <category term="逻辑与" scheme="http://blog.wenguang0816.top/tags/%E9%80%BB%E8%BE%91%E4%B8%8E/"/>
    
  </entry>
  
  <entry>
    <title>斐波那契数列</title>
    <link href="http://blog.wenguang0816.top/2019/04/01/sword_refers_to_offer/07_fibonacci_series/"/>
    <id>http://blog.wenguang0816.top/2019/04/01/sword_refers_to_offer/07_fibonacci_series/</id>
    <published>2019-04-01T16:50:00.000Z</published>
    <updated>2019-07-18T14:35:18.381Z</updated>
    
    <content type="html"><![CDATA[<h3 id="7-斐波那契数列"><a href="#7-斐波那契数列" class="headerlink" title="7. 斐波那契数列"></a><a href="https://www.nowcoder.com/practice/c6c7742f5ba7442aada113136ddea0c3?tpId=13&tqId=11160&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking" target="_blank" rel="noopener">7. 斐波那契数列</a></h3><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>大家都知道斐波那契数列，现在要求输入一个整数n，请你输出斐波那契数列的第n项（从0开始，第0项为0）。</p><p><strong>注：n&lt;=39</strong></p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h3><blockquote><p>斐波那契数列：0, 1, 1, 2, 3, 5, 8 ……;</p><p>这个数列从第3项开始，每一项都等于前两项之和。</p><p>利用递推公式：f(n) = f(n - 1) + f(n - 2);(当n &gt;= 2时)</p><p>时间复杂度O(n), 空间复杂度O(1)</p></blockquote><h3 id="解答："><a href="#解答：" class="headerlink" title="解答："></a>解答：</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">Fibonacci</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> n<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            b <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>            a <span class="token operator">=</span> b <span class="token operator">-</span> a<span class="token punctuation">;</span>            <span class="token operator">++</span>i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> a<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;7-斐波那契数列&quot;&gt;&lt;a href=&quot;#7-斐波那契数列&quot; class=&quot;headerlink&quot; title=&quot;7. 斐波那契数列&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.nowcoder.com/practice/c6c7742f5ba7442aad
      
    
    </summary>
    
      <category term="剑指 offer" scheme="http://blog.wenguang0816.top/categories/%E5%89%91%E6%8C%87-offer/"/>
    
    
      <category term="循环" scheme="http://blog.wenguang0816.top/tags/%E5%BE%AA%E7%8E%AF/"/>
    
      <category term="斐波那契" scheme="http://blog.wenguang0816.top/tags/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91/"/>
    
  </entry>
  
  <entry>
    <title>二进制中1的个数</title>
    <link href="http://blog.wenguang0816.top/2019/04/01/sword_refers_to_offer/11_number_of_1_bits/"/>
    <id>http://blog.wenguang0816.top/2019/04/01/sword_refers_to_offer/11_number_of_1_bits/</id>
    <published>2019-04-01T16:50:00.000Z</published>
    <updated>2019-07-18T14:35:18.381Z</updated>
    
    <content type="html"><![CDATA[<h3 id="11-二进制中1的个数"><a href="#11-二进制中1的个数" class="headerlink" title="11. 二进制中1的个数"></a><a href="https://www.nowcoder.com/practice/8ee967e43c2c4ec193b040ea7fbb10b8?tpId=13&tqId=11164&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking" target="_blank" rel="noopener">11. 二进制中1的个数</a></h3><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>输入一个整数，输出该数二进制表示中1的个数。其中负数用补码表示。</p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h3><ul><li>思路1：直接去掉二进制中位置最靠后的1。假设<code>n=1100</code>，则<code>n-1=1011</code>，那么<code>n&amp;(n-1)=1000</code>,位置最靠后的1被去掉。 时间复杂度O(M), M为1的个数</li><li>思路2：利用标志位遍历int的32位; 时间复杂度O(1), 32次循环</li></ul><p><strong>注：负数右移后，最高位补1，如果右移判断最低位将导致死循环</strong> </p><h3 id="解答："><a href="#解答：" class="headerlink" title="解答："></a>解答：</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// 方法1</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">NumberOf1</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>n <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            n <span class="token operator">=</span> n <span class="token operator">&amp;</span> <span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cnt<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> cnt<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 方法2:</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>     <span class="token keyword">int</span>  <span class="token function">NumberOf1</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>         <span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>         <span class="token keyword">while</span><span class="token punctuation">(</span>flag <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>         <span class="token punctuation">{</span>             <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">&amp;</span> flag<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>                 <span class="token operator">++</span>cnt<span class="token punctuation">;</span>             flag <span class="token operator">=</span> flag <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token keyword">return</span> cnt<span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;11-二进制中1的个数&quot;&gt;&lt;a href=&quot;#11-二进制中1的个数&quot; class=&quot;headerlink&quot; title=&quot;11. 二进制中1的个数&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.nowcoder.com/practice/8ee967e43
      
    
    </summary>
    
      <category term="剑指 offer" scheme="http://blog.wenguang0816.top/categories/%E5%89%91%E6%8C%87-offer/"/>
    
    
      <category term="位运算" scheme="http://blog.wenguang0816.top/tags/%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
    
      <category term="数学" scheme="http://blog.wenguang0816.top/tags/%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
</feed>
